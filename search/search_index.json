{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation intro","text":"<p>Welcome to the documentation for the Unreal Engine\u2013based Virtual Anatomy application built by JRCZ Data Science Lab. This documentation aims to help you navigate the codebase, understand the system\u2019s architecture, and get up to speed with development and deployment processes.</p>"},{"location":"#general-overview","title":"General overview","text":"<p>The project itself is divided into several repositories:</p> <ul> <li>Unreal Engine's Virtual Anatomy application GitHub<ul> <li>It is core of the whole project. This repository contains an Unreal Engine project that can be loaded into UE5.</li> </ul> </li> <li>Python script for importing the Blender models to the Unreal Engine GitHub</li> <li>Python script for generating JSON files that can be loaded in the Model tagging application GitHub </li> <li>This documentation GitHub</li> </ul>"},{"location":"#how-to-approach-this-large-project","title":"How to approach this (large) project?","text":"<p>This project is large and can feel overwhelming to grasp everything at once. We all have tried to make as many components as stable and unchanging as possible. This means that most of what you see on the screen does not require a deep understanding right away\u2014working code is best left untouched. \ud83d\ude04</p> <p>If you are (completely or to some extent) not familiar with C++, we strongly encourage you to focus on learning this programming language, especially general OOP concepts and how pointers work, for the first 1\u20133 week(s) of your internship. Try building for example a simple calculator or a rock-paper-scissors app using OOP and pointers to get more comfortable with C++.</p> <p>Next, dive into general Unreal Engine tutorials. Remember, everything in Unreal Engine is highly decoupled \u2014 it is not like a website or other applications where you can easily call everything through dependency injections or setters. We also recommend following some C++ tutorials in Unreal Engine and creating a small project to test things out. Once you get comfortable with the C++ side, using Blueprints will feel like a helpful tool for tying your logic together.</p> <p>Keep in mind that C++, OOP, and other programming patterns are not quite the same when developing in Unreal Engine. Moreover, Unreal Engine documentation can be extremely frustrating to navigate. Because of this, we strongly advise using JetBrains Rider IDE if your RAM allows it, as it provides the best autocompletion and function documentation support. Otherwise, you can try increasing your swap file to use your SSD as temporary RAM.</p> <p>Note</p> <p>We have made an effort to cover as much as possible. However, as you will soon realize, balancing the development of new features, handling with the HZ internship flow/process, and keeping documentation up to date is no small feat.</p> <p>While this documentation may not be perfect, it should serve as a solid guide to help you get started and make sense of the project.</p>"},{"location":"About-the-project/","title":"About the project","text":"<p>This project is developed for nursing department at HZ University of Applied Sciences in Vlissingen campus.</p>"},{"location":"About-the-project/#purpose","title":"Purpose","text":"<p>Nursing students often face difficulties in understanding complex anatomical structures and the effects of various medical conditions on the human body. Traditional learning methods - such as static images in presentations - do not always provide the interactivity needed for deep comprehension.</p> <p>To address this, we have created an interactive Unreal Engine\u2013based application that enhances anatomy education by allowing both students and instructors to explore the human body in an engaging and dynamic way.</p>"},{"location":"About-the-project/#our-goal","title":"Our goal","text":"<p>Our goal is simple: to provide the most efficient and interactive way for teachers and students to explore the human body, deepen their understanding of anatomy, and, ultimately, contribute positively to healthcare education and society.</p>"},{"location":"About-the-project/#interactive-anatomy","title":"Interactive Anatomy","text":"<p>Understanding human anatomy becomes significantly easier when learners can interact with the subject matter. In standard lectures, instructors typically rely on slides filled with fixed-angle images, which limits their ability to demonstrate anatomical structures effectively.</p> <p>This application streamlines the teaching process and enriches student learning by offering a fully interactive 3D model of the human body. Teachers can display organs, bones, arteries, and other structures from any angle, manipulate them freely, and guide students through complex topics in real time.</p> <p>Beyond simple visualization, it is aimed that the platform includes powerful features to support and enrich the curriculum such as detailed anatomical descriptions, layered filtering options, guided tours, demonstration of illnesses, and so on.</p>"},{"location":"About-the-project/#interactive-learning","title":"Interactive Learning","text":"<p>Students could strengthen their understanding through interactive features included in the application. These elements are intended to complement traditional learning methods by encouraging exploration and offering opportunities for self-assessment in a more engaging format.</p> <p>By integrating with external educational platforms, the application could support a variety of instructional materials and activities aligned with the nursing curriculum.</p>"},{"location":"About-the-project/#medical-resources","title":"Medical resources","text":"<p>Information about shocks has been provided by HZ nursing teachers: Link to the document</p>"},{"location":"Authors/","title":"Authors","text":"<p>v.2.0.0 (as of July 2025)</p> <p>Kristers Gruzin\u0161</p> <p>Bartosz Adamczyk - contact@badamczyk.eu</p> <p>M\u0101rti\u0146\u0161 Greizis</p> <p>v.1.0.0 (as of February 2025)</p> <p>Simon Potocnak - simon.potocnak03@gmail.com</p> <p>Daniel Bartha - daniel.bartha@ymail.com</p>"},{"location":"Basic-information-for-development-of-the-project/","title":"Codebase overview &amp; guidelines","text":"<p>This section outlines fundamental guidelines and practices essential for continuing development on this project.</p>"},{"location":"Basic-information-for-development-of-the-project/#c-code-guide-lines","title":"C++ code guide lines","text":"<p>For class members that have macro <code>UPROPERTY</code> or <code>UFUNCTION</code> defined above them, we have used the <code>PascalCase</code></p> <p>For functions that are used inside classes we have also used <code>PascalCase</code></p> <p>For private member functions that are only accessible within the classes we have used <code>m_</code> prefix and <code>smallPacalCase</code> example</p> <pre><code>class FooBar{\n\npublic:\n    Foo(std::string name);\n\npublic:\n    UPROPERTY(BlueprintReadOnly)\n    AActor* actor\n\n    UFUNCTION(BlueprintCallable)\n    void DisplayFoo(bool&amp; success);\n\nprivate:\n    int m_countOfFoos;\n}\n</code></pre>"},{"location":"Basic-information-for-development-of-the-project/#class-names","title":"Class names","text":"<p>Class names are specified with <code>PascalCase</code></p>"},{"location":"Basic-information-for-development-of-the-project/#forward-declaration-of-headers","title":"Forward declaration of headers","text":"<p>In C++ you can use <code>#include</code> preprocessor to include external header files. This, however, is going to take long time to compile, therefore we have used forward declaration wherever possible inside the header files and only use <code>#include</code> preprocessor inside the <code>.cpp</code> files. </p>"},{"location":"Basic-information-for-development-of-the-project/#memory-safety","title":"Memory safety","text":"<p>The class architecture is designed around the principle of ownership. We utilize Unreal Engine\u2019s smart pointers (e.g., TSharedPtr, TWeakObjectPtr, etc.) to ensure that each resource has a single owner, while other classes may only reference it without unnecessary copying. This approach promotes memory safety and performance</p>"},{"location":"Basic-information-for-development-of-the-project/#why-using-c-over-blueprints","title":"Why using C++ over Blueprints?","text":"<p>The decision to use C++ as the primary development language stems from a focus on long-term maintainability. While C++ can be complex and less forgiving than Blueprints, its performance advantages and precise control over application behavior make it a preferred choice for this project.</p> <p>For those unfamiliar with C++, it\u2019s perfectly acceptable to begin prototyping in Blueprints. Often, when a Blueprint implementation becomes difficult to manage or overly complex, it\u2019s a good indicator that it should be refactored into C++.</p> <p>Take your time learning C++; it can be both powerful and challenging\u2014but ultimately rewarding.</p>"},{"location":"Basic-information-for-development-of-the-project/#development-approaches-in-unreal-engine","title":"Development Approaches in Unreal Engine","text":""},{"location":"Basic-information-for-development-of-the-project/#blueprints","title":"Blueprints","text":"<p>Advantages - Easy to understand - Integrated in the editor - Easier debugging - No C++ knowledge required</p> <p>Disadvantages - Limited scalability - Difficult to implement complex systems - Slower performance</p> <p>Notes</p> <p>Best for prototyping and ideal for small projects.</p>"},{"location":"Basic-information-for-development-of-the-project/#c","title":"C++","text":"<p>Advantages - High performance - Full control over memory - Higher maintainability - Future-proof</p> <p>Disadvantages - Steeper learning curve - Requires IDE setup and recompilation</p> <p>Notes</p> <p>Excellent for large systems and requires experienced developers.</p>"},{"location":"Basic-information-for-development-of-the-project/#c-blueprints-hybrid","title":"C++ &amp; Blueprints (Hybrid)","text":"<p>Advantages - Best of both worlds - Flexibility - High efficiency - Logical flow</p> <p>Disadvantages - Complexity of combining workflows - Requires expertise in both systems</p> <p>Notes</p> <p>Optimal for mid- to large-scale projects.</p>"},{"location":"Recomendations-for-future-developers/","title":"Recommendations for future developers","text":""},{"location":"Recomendations-for-future-developers/#recommendations-from-bartan02","title":"Recommendations from @bartan02","text":""},{"location":"Recomendations-for-future-developers/#version-control","title":"Version Control","text":"<p>When working with Unreal Engine assets (especially with this one: ExplorerMap.uasset), developers must be extremely cautious with branch management. Concurrent modifications to the same asset can lead to difficult merge conflicts. Additionally, To maintain project integrity and reduce conflicts, changes should be committed, pulled, and merged frequently\u2014especially after major updates or before switching tasks.</p>"},{"location":"Recomendations-for-future-developers/#simulation-manager","title":"Simulation Manager","text":"<p>Significant improvements to the simulation system (managed by SimulationManager class), are recommended:</p> <ul> <li>Investigate automated methods for spline generation to better simulate blood particle flow.</li> <li>Use the predefined poses available in the project to support a fully functional and position-aware anatomy simulation system. Do not forget about dynamic organ positioning and simulating corresponding blood flow variations based on different body poses. (See more: Body positions)</li> <li>Last, but not least, minimize the frequency of crashes that occur when interacting with this system.</li> </ul>"},{"location":"Recomendations-for-future-developers/#slicer","title":"Slicer","text":"<p>Implementing logic to exclude raycasting on body parts hidden by the slicer could be considered. While not critical, this enhancement could improve performance and offer a smoother, more intuitive user experience, especially during interactions with the visible anatomy layers.</p>"},{"location":"Recomendations-for-future-developers/#new-features","title":"New features","text":"<p>There are still some pending new features, such as the inclusion of blood pressure functionality and additional human parts or organs suggested by the nursing faculty. These enhancements would be valuable additions to the application. For some more details, please go to '(User) requirements list' Issue on GitHub repository.</p>"},{"location":"Recomendations-for-future-developers/#recommendations-from-animepuika","title":"Recommendations from @animepuika","text":""},{"location":"Recomendations-for-future-developers/#usability-ui-enhancements","title":"\ud83e\uddd1\u200d\ud83c\udfeb Usability &amp; UI Enhancements","text":"<ul> <li>Develop a tutorial or onboarding level to guide first-time users through:</li> <li>Toggling anatomical layers</li> <li>Using the slicer</li> <li>Interacting with simulation indicators</li> <li>Automatically activate the slicer menu when accessed to reduce confusion.</li> <li>Fully localize the user interface into Dutch, including:</li> <li>Quiz buttons</li> <li>Feedback messages</li> <li>Interface text</li> </ul>"},{"location":"Recomendations-for-future-developers/#system-stability-technical-refactoring","title":"\u2699\ufe0f System Stability &amp; Technical Refactoring","text":"<ul> <li>Resolve crash behavior in the <code>SimulationManager</code>, especially during:</li> <li>Complex state transitions</li> <li>Niagara FX spawning or cleanup</li> <li>Refactor the simulation core to:</li> <li>Improve performance</li> <li>Increase runtime stability</li> <li>Simplify behavior switching logic</li> <li>Consolidate duplicated logic related to rendering and simulation parameters across diagnosis behaviors.</li> </ul>"},{"location":"Recomendations-for-future-developers/#functional-expansion-dynamic-simulation","title":"\ud83d\udd2c Functional Expansion &amp; Dynamic Simulation","text":"<ul> <li>Enhance the blood circulation system to simulate:</li> <li>Dynamic blood pressure and flow changes per diagnosis</li> <li>Expand the shock system to include:</li> <li>Vitals integration (e.g. BPM and blood thickness)</li> <li>Real-time updates to temperature indicators</li> <li>Enable mesh-based deformation of blood vessels:</li> <li>Visually simulate shrinking/enlarging based on selected shock type</li> <li>Standardize Niagara FX triggering across all diagnoses for consistency and modularity.</li> </ul> <p>These improvements aim to evolve the Virtual Anatomy system into a scalable, production-ready tool for medical education.</p>"},{"location":"Recomendations-for-future-developers/#recommendations-from-mgreizis","title":"Recommendations from @MGreizis","text":"<p>A significant technical challenge that was encountered during the development of the quiz module was how tightly coupled the existing application was. The initial, and architecturally cleanest, approach was to create a distinct QuizGameMode and QuizPlayerController. This would have encapsulated all quiz logic, clearly separating it from the simulation functionalities of the main application. An attempt was made to do so, however this approach revealed deep-rooted dependencies that made this separation of concerns not feasible within the iteration\u2019s timeframe. The core of the issue lies in the fact that the ACPP_User and ACPP_GameMode classes serve as \u201cpillars\u201d of the entire application, which in turn creates a web of dependencies. For a visual overview of the problem, see the following image:</p> <p></p> <ul> <li>The Game Mode: The ACPP_GameMode is not just where the rules of the level are set; it also acts as a manager factory. It instantiates and keeps these instances of main systems like the UCPP_SimulationManager, UCPP_IsolateMesh, and now the UQuizUIManager too. This means that, if any part of the application needs to access these systems, it must be done by casting to ACPP_GameMode.</li> <li>The \u201cGod Object\u201d Pawn: With the current architecture, ACPP_User is much more than just a pawn for player controls. It is tightly integrated with core application functionality, like managing camera controls, raycasting, and handling all input for moving and interacting with the 3D model. As the blueprint BP_User (this blueprint is necessary for properly spawning the ACPP_User class in levels, therefore accessing it\u2019s functionality) is derived from ACPP_User, any level loaded with the ACPP_GameMode automatically assumes this specific pawn will be in use.</li> <li>Implicit Subsystem Dependencies: The most critical issue is an implicit dependency on seemingly unrelated subsystems. An example of this is how UCPP_BaseAnimation, which is a base class for body animations, directly refers to the SimulationManager from a method within the class to listen for simulation events. </li> <li>The Consequences: When a new level is loaded with a separate QuizGameMode, which does not hold references to, for example, the SimulationManager, the application would crash, as the game mode was not initializing the SimulationManager. But other parts of the program, including instances of the animations, were still loaded. Methods within these animation classes would attempt to access the SimulationManager (which does not exist, as it is not being initialized), receive a null pointer, and, due to improper error handling within the existing application, cause the engine to crash. </li> <li>The ideal solution to this problem would be a full architectural refactoring, which would involve decoupling of the SimulationManager, MeshSelector, and other systems from the GameMode and User classes by making use of a better event bus, dependency injection, or fetching them as separate engine subsystems.</li> </ul> <p>For the quizzing system backend there are separate suggestions in the Quizzing System Backend Repo</p> <p>As for next features of the quizzing system, just listen to what the clients (nursing teachers) want, and go off that.</p> Recommendations left on version 1.0.0 of this documentation <p>This seciton covers some recomendations we have for you. If you find this taken out of context, it is. I have written this to my porfolio and i am putting it here for you so that you have some stepping stones while starting this project and to know, what should you focuse on. I hope i have covered most of the aspects that needs to be done. Keep in mind that this is only my (Simon's) recomendations. Daniel will hopefuly have his own paragraph later on. </p> <p>The final recommendation is to continue with the project. Since the human body is a highly complex organism, more than six months are needed to fully translate it into a digital version. While the anatomical model was provided, it was not initially suited for interactive 3D applications. Consequently, significant reduction in the model's triangle count was implemented. Although these optimizations made the model more suitable for interactive rendering, they reduced the model's quality. It is recommended to employ more advanced triangle reduction techniques to achieve better performance while maintaining or improving model quality.</p> <p>The Niagara system, which simulates blood, was implemented later in the process. Therefore, additional optimizations and general improvements should be prioritized. For instance, collision detection currently uses ray tracing, which has a significant performance cost. A more approximate solution, such as analytical planes, could be implemented for particle/plane collisions. Since particles are represented as sprites, this issue can effectively be reduced to plane/plane collision handling.</p> <p>Draw call reduction\u2014achieved by merging parts of the model\u2014enabled the application to render a single frame in 8ms, which is excellent and does not require further optimization. However, this decision made it challenging to isolate specific parts of the body for display. For instance, it is currently impossible to display only the upper body. A recommended solution is to use a technique called stencil masking, which modifies stencil buffer values to force the renderer to exclude certain model parts from being displayed.</p> <p>The underlying architecture has been designed to be future-proof. Various design patterns were utilized, and a small UI framework was developed. It is recommended that future developers expand this UI framework to ensure seamless communication with underlying systems like simulation and animations.</p> <p>Given the project's scale, new developers should initially focus on resolving smaller bugs to familiarize themselves with the codebase. For example, one such bug is the camera deadlock that occurs when the user gets too close to the body and performs specific movements, preventing further navigation.</p> <p>Since it was agreed with key stakeholders that the primary focus should be on the \"Explorer Level\" of the Unreal Engine application, future developers are advised to concentrate on the quiz feature and its integration with the website. The quiz feature could benefit from the existing UI framework to achieve a modern look and streamline the automation of quiz question creation. The login and registration system also require improvements, and the quiz creation web application should be heavily inspired by the \"Wooclap\" platform, as per client feedback.</p> <p>Lastly, future developers should explore automated methods for creating splines used for blood particle movement. One promising approach is voxelization, which involves constructing a sparse voxel octree. The centers of individual voxels can then serve as control points for the splines.</p> <p>For the employer, it is recommended to hire individuals skilled in animation. The current solution uses superficial animated body parts that do not accurately represent the internal processes of the human body. Thanks to the application\u2019s modular structure, it is straightforward to replace animations and animation assets without disrupting the existing solution.</p> <p>Last area of focus is ray-casting, which involves clicking on the model and identifying the selected parts. While this functionality works reasonably well, it is not the most accurate. One potential improvement is to increase the scale of the model and the picker model, creating a larger surface area for more precise selection of small meshes. However, this change would require adjustments to the camera\u2019s field of view (FOV) and other tweaks to ensure the model does not appear oversized. These tweaks may require further exploration to implement effectively.</p>"},{"location":"Setting-up-the-project/","title":"Setting up the Virtual Anatomy repository","text":"<p>To begin development of this application, you need to retrieve Virtual Anatomy project from the GitHub repository and download Unreal Engine (at least version 5.5), which can be found in the Epic Games Launcher.</p> <p>Note</p> <p>If you use 'git clone' in order to retrieve this project from GitHub, we advise you to increase git buffer size beforehand so that the clone process is succesful:</p> <p>git config --global http.postBuffer 524288000</p> <p>(In this case it is 500MB buffer; adjust as needed, but this value should work in this case)</p>"},{"location":"Setting-up-the-project/#windows","title":"Windows","text":"<p>For Windows, you will also need Visual Studio with the following workload items added:</p> <ul> <li>Game Development with C++</li> <li>.NET SDK (can be installed by enabling .NET desktop development)</li> </ul> <p>Once you have everything set up, you can launch the project by opening the <code>VirtualAnatomy.uproject</code> file with Unreal Engine.</p> <p>To add the necessary files to open the project with Visual Studio, run <code>Tools &gt; Generate Visual Studio Project</code>. Then, open the project in Visual Studio by opening the generated <code>VirtualAnatomy.sln</code> file.</p>"},{"location":"Setting-up-the-project/#macos","title":"MacOS","text":"<p>For macOS install Rider, and launch the project by opening the <code>VirtualAnatomy.uproject</code> with Rider, and... that's it?</p>"},{"location":"Setting-up-the-project/#linux","title":"Linux","text":""},{"location":"Setting-up-the-project/#getting-unreal-engine","title":"Getting unreal engine","text":"<p>We have to compile unreal engine from source-code in order to use necessary plugins </p> <ol> <li>Visit unreal engine site and request their source code from this link they have a guide there how to do that</li> <li>Once you have the source code you can fork the repo and clone it directly to the desired directory on your compute, i suggest that you do it under <code>~/Software/</code></li> </ol> <pre><code>git clone &lt;repo url&gt;.git\n</code></pre> <ol> <li>When this is done go to the directory of the cloned game engine</li> </ol> <pre><code>cd ~/Software/UnrealEngine\n</code></pre> <ol> <li>Execute the following command to setup unreal engine for compilation</li> </ol> <p><pre><code>./Setup.sh\n</code></pre> This should take couple of minutes</p> <ol> <li>Now execute another bash script to generate the project files </li> </ol> <pre><code>./GenerateProjectFiles.sh\n</code></pre> <ol> <li> <p>Now run the make file to compile the engine  <pre><code>make\n</code></pre> This takes around 2 hours so, you only have to wait</p> </li> <li> <p>After this is done you can execute Unreal Editor and select any template to see if everything works</p> </li> </ol> <pre><code> cd ~/Software/UnrealEngine/Engine/Binaries/Linux\n ./UnrealEditor\n</code></pre>"},{"location":"Setting-up-the-project/#getting-jet-brains-rider","title":"Getting Jet Brains Rider","text":"<ol> <li>Download Jet Brains rider from this link  now go the the directory where <code>.tar.gz</code> file downloaded and execute following command </li> </ol> <pre><code>sudo tar -xzf Rider.tar.gz -C /opt\n</code></pre> <p>NOTE: the <code>Rider.tar.gz</code> can have various letters and strings after each, just change the file name to match the one you downloaded</p> <ol> <li>Navigate to <code>opt</code> directory and execute  the following commands <pre><code>cd ./opt/JetBrains Rider-2024.2.3 #can be different version\n\n./Rider.sh\n</code></pre></li> </ol> <p>This will open your The jet brains rider, feel free to create desktop shortcut if you want from Tools -&gt; Create Desktop Entry</p>"},{"location":"Setting-up-the-project/#compiling-plugins","title":"Compiling plugins","text":"<ol> <li>Download the epic assets manager from the Flat hub</li> </ol> <pre><code>flatpak run io.github.achetagemes.epic_asset_manager\n</code></pre> <ol> <li>Open the epic assets manager and enter your epic login info.</li> <li>Open the market place in bottom left corner of the application </li> <li>Search for the <code>VaRest</code> plugin and Download it, it should be included in <code>~/Document/Epic Vault/VaRestPlugin_5.5</code></li> <li>Go to the <code>VaRestPlugin_5.5/data/Engine/Plugins/Marketplace/VaRestPlugin</code></li> <li> <p>Open file <code>VaRest.uplugin</code> in any text editor and add <code>\"Linux\"</code> to the <code>PlatformAllowList</code>, if in the future plugins there is no modules add it there, this one should have it though <pre><code>\"Modules\": [\n        {\n            \"Name\": \"VaRest\",\n            \"Type\": \"Runtime\",\n            \"LoadingPhase\": \"PreDefault\",\n            \"PlatformAllowList\":[\n                \"Linux\"\n            ]\n        },\n        {\n            \"Name\": \"VaRestEditor\",\n            \"Type\": \"UncookedOnly\",\n            \"LoadingPhase\": \"Default\",\n            \"PlatformAllowList\":[\n                \"Linux\"\n            ]\n        }\n</code></pre></p> </li> <li> <p>Make a copy of your Unreal Engine folder as it can broke to the point you would have to rebuild entire engine if we use it for the compilation of the plugin.</p> </li> </ol> <pre><code>cd ~/Software\ncp UnrealEngin ./UnrealEngine-cpy -rrm \n</code></pre> <ol> <li>Navigate to the batch files of the copied engine and compile the plugin <pre><code>cd ~/Software/UnrealEngine-cpy/Engine/Build/BatchFiles\n\n./RunUAT.sh BuildPlugin -Plugin=\"/home/name/Documents/EpicVault/VaRestPlugin_5.5/data/Engine/Plugins/Marke\ntplace/VaRestPlugin/VaRest.uplugin\" -Package=\"/home/name/Documents/EpicVault/VaRestPlugin_5-build\" -TargetPlatforms=Linux\n\n# package is the directory where you want the compiled plugin to be in\n</code></pre></li> </ol> <p>This will again take around 1 hour to compile </p> <p>Once it is done move the plugin from its compiled directory to the <code>~/Software/UnrealEngine/Engine/Plugins/Markteplace</code> if there is no market place directory create it </p> <p>In case of any issues of compiling the plugin refer to this video. </p> <p>If you can not start your unreal engine after you have done this or getting error that the some library is missing, you unfortunately must remove the engine and recompile it from scratch.</p>"},{"location":"Setting-up-the-project/#running-the-project","title":"Running the project","text":"<p>Now we can finally get to the project we are supposed to be running. Clone the project from the organisation's  repository.</p> <p>Now open the rider use it to open the file called  <code>ThreeDAnatomy.uproject</code> if you get errors that there is no engine associated with this project or that the project could not be loaded navigate to the  <code>~/.config/EpicGames/UnrealEngine</code> and use open <code>Install.ini</code>, there you should see something like this </p> <pre><code>[Installations]\n{61290131-F9C9-4A40-9CB3-202F4B612D47}=/home/name/Software/UnrealEngine\n</code></pre> <p>Add another line with following content</p> <pre><code>UE_5.5=/home/wpsimon09/Software/UnrealEngine\n</code></pre> <p>Now open the <code>ThreeDAnatomy.uproject</code> and change the <code>\"EngineAssociation\"</code> key to have the value of <code>5.4</code> </p> <pre><code>{\n        \"FileVersion\": 3,\n        \"EngineAssociation\": \"5.5\",\n        \"Category\": \"\",\n        \"Description\": \"\",\n//other stuff\n}\n</code></pre> <p>Now close the rider and reopen the <code>ThreeDAnatomy.uproject</code> with it, it might still display that it was not loaded but eventually after quite some time it should load it, the loading is signalised by the progress bars on the bottom left of Rider interface  </p> <p>Note that it loaded both the project and engine.</p> <p>![[Rider-interface-loaded-project-and-engine.png]]</p> <p>Now you have to build the project by right clicking on the <code>ThreeDAnatomy</code> and selecting <code>BuildSelectedProjects</code> </p> <p>IMPORTANT: Never select the option to build the solution as it will rebuild entire Unreal Engine together with it</p> <p>Once everything is build you can press play in top right corner (or debug) it will open the unreal editor where you can start working </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/ContentBrowser/","title":"Content browser","text":"<p>On the very bottom of the Unreal Engine, you should see an icon with a folder; this is called the <code>Content Browser</code>. Here, all the project files, assets, and Blueprints for the Virtual Anatomy are located.</p> <p>You can see below the content browser structure of this Unreal Engine project. There is a lot, but you do not need to swot it all at once. You will get used to it as you work with this project for a long time. </p> <pre><code>.\n\u251c\u2500\u2500 Blueprints\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 BloodFlowSimulation\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 BloodSimPaths\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Enviroment\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 InfoElements\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Quiz\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Splines\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 UserControls\n\u251c\u2500\u2500 Collections\n\u251c\u2500\u2500 DataAssets\n\u251c\u2500\u2500 Developers\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 bartoszadamczyk\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 Collections\n\u251c\u2500\u2500 Input\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 InputActions\n\u251c\u2500\u2500 Localization\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Game\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 en\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 nl-NL\n\u251c\u2500\u2500 LocalizationDataTables\n\u251c\u2500\u2500 Maps\n\u251c\u2500\u2500 Models\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Body-Merged-Full\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Arteries\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 BodyPartBlueprints\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Body\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Digestion\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Hearth\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Lungs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Bones\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Digestive_System\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Heart\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Heart\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 PapillaryMuscle\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 SubcalvinianArteries\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Valves\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Lungs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Muscles\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Veins\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Body-No-Material\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Arteries\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Bones\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Digestive_System\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Hearth\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Lungs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Body-Picker-Textured\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Arteries\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 Components\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ElementActions\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Outliner\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Enviroment\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 BookShelf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 HopitalRoomFloor\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 textures\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 HospitalBed\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 HospitalDoors\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 HospitalEquipment\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 HospitalRoom-Wall\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 textures_new\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 textures_old\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 HospitalRoomAssetPack\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 IndoorPlant\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 NeonLight\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Full-Body-Organized\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Digestive_System\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Ear_Bones\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Lower_Extremity_Bones\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Lower_Extremity_Bones\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Skull_Bones\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Thoracic_Bones\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Textures\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Upper_Extremity_Bones\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Vertebral_Column_Bones\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 HDRi\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 HospitalRoomAssetPack\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Model\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 Textures\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 PulmonaryVeins\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 Window\n\u251c\u2500\u2500 Movies\n\u251c\u2500\u2500 Niagara\n\u251c\u2500\u2500 Python\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 DataExports\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 GeneratedSeedData\n\u251c\u2500\u2500 Sequences\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 BloodPaths\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Misc\n\u251c\u2500\u2500 Slicer\n\u2514\u2500\u2500 UI\n    \u251c\u2500\u2500 Assets\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 ButtonAssets\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 General\n    \u251c\u2500\u2500 ButtonsForShocks\n    \u251c\u2500\u2500 Components\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 CameraControls\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 Depricated\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 DropDownMenues\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 PopUps\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 SideBar\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 TreeView\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 Sliders\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 ToolTips\n    \u251c\u2500\u2500 Fonts\n    \u251c\u2500\u2500 Icons\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 Element\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 Mouse\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 Sidebar\n    \u251c\u2500\u2500 Images\n    \u251c\u2500\u2500 Islands\n    \u251c\u2500\u2500 LevelUI\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 ExplorerLevelUI\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 QuizUI\n    \u251c\u2500\u2500 Menus\n    \u251c\u2500\u2500 Quiz\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 Questions\n    \u2514\u2500\u2500 ReusableButtons\n</code></pre> <p>That is a lot of directories, right? Let's walk through them really superficially to get a basic idea of what is going on.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/ContentBrowser/#blueprints","title":"Blueprints","text":"<p>Here, all of the Blueprints are located. You can find the Blueprints for the User that can walk around (inside the <code>UserControls</code> folder) in the scene once the simulation is started (we will talk about this later).</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/ContentBrowser/#developers","title":"Developers","text":"<p>Here, each developer can store their personalized assets. Nothing should be here unless you want to hide something from your colleagues.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/ContentBrowser/#enums","title":"Enums","text":"<p>This folder contains Enums to differentiate between parts of the model, like the skull, muscles, heart, etc.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/ContentBrowser/#input","title":"Input","text":"<p>This directory contains inputs and input mappings utilizing the Unreal Engine Enhanced Input system.</p> <p>In short, all user actions are defined here. A simple example of such an action is pressing <code>Space</code> to jump.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/ContentBrowser/#maps","title":"Maps","text":"<p>Here we store different levels that users can visit during their time spent in the application.</p> <p>Levels are independent of each other and are exactly like levels in any video game.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/ContentBrowser/#materials","title":"Materials","text":"<p>This folder should ideally be renamed to <code>Assets</code> instead of <code>Materials</code>, but for now, it remains as is.</p> <p>In short, this folder contains all the meshes, textures, materials, and HDRIs used in the levels.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/ContentBrowser/#materialsbody-merged-full","title":"Materials/Body-Merged-Full","text":"<p>This subfolder contains all the merged body parts such as the heart, bones, and lungs. Additionally, you will also find the <code>Animations</code> folder here, which, as the name suggests, contains all the animations.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/ContentBrowser/#materialsbody-no-materials","title":"Materials/Body-No-Materials","text":"<p>This subfolder contains individual meshes used for selecting specific parts of the body.</p> <p>NOTE: When you change an asset here, it will not be updated inside the View Port and World Explorer.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/ContentBrowser/#python","title":"Python","text":"<p>Plain and simple, here are all of the Python scripts used only inside the engine.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/ContentBrowser/#steredo3d_vitalvolkov","title":"Steredo3D_VitalVolkov","text":"<p>This is from developers before us and contains the ability to see the model in 3D (yes, with 3D glasses) only if your monitor supports it. This feature has not been used so far, so you can experiment with it.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/ContentBrowser/#test","title":"Test","text":"<p>This is pretty self-explanatory.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/ContentBrowser/#ui","title":"UI","text":"<p>Here you can find all of the widget Blueprints. In other words, every UI component, like buttons, menus, main pages, etc., can be found and edited here.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/ContentBrowser/#virtual-anatomy","title":"Virtual anatomy","text":"<p>In this directory is the main source code of the entire application. Here you can find another subdirectory, <code>C++</code>, which contains the actual C++ code.</p> <p>Public</p> <p>Here are all of the header files containing definitions of classes, methods, and macros.</p> <p>Private</p> <p>This directory contains all of the definitions for the header files (.cpp).</p> <p>Some header files (and cpp files) are not visible through the Unreal Editor interface (like <code>CPP_RayCaster</code>, <code>CPP_ObjectSelector</code>), but some are, like <code>CPP_User</code>. This is because the class <code>CPP_RayCaster</code> does not inherit from any of the Engine's classes like <code>UObject</code> or <code>AActor</code>. To see those \"hidden\" files, please open the file in Visual Studio, JetBrains Rider, VSCode, or any other IDE or code editor you prefer.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/FirstSteps/","title":"First glance at the project","text":"<p>When you open this Unreal Engine project for the first time, you will see a lot of things and thus could feel overwhelmed. Let us break it down into smaller pieces so that you can understand what is going on.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/FirstSteps/#content-browser","title":"Content browser","text":"<p>On the very bottom of the Unreal Engine, you should see an icon with a folder; this is called the <code>Content Browser</code>. Here, all the project files, assets, and Blueprints for the Virtual Anatomy application are located.</p> <p>Warning</p> <p>TO BE ADDED: Content browser screenshot</p> <p>For explanation of directories and files in the content browser, please refer to the separate Content browser page.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/FirstSteps/#main-menu-level","title":"Main menu level","text":"<p>The main menu level is the first thing you will see when you <code>Play</code> the project (run and test it directly in the editor). It is a very simple level with UI elements and a few buttons that allow you to navigate to different parts of the project namely, Explorer levels (in simple and hospital environment), Quiz level or Settings menu.</p> <p></p> <p>For deeper explanation of the Main menu level components/logic, please refer to the separate Main menu level page.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/FirstSteps/#explorer-level","title":"Explorer level","text":"<p>The explorer level is a set of levels where you can explore the human body and interact with the different elements. The set consists of Simple environment and Hospital environment. You can access one of them by clicking on the \"Simple environment\" or \"Hospital environment\" buttons in the main menu.</p> <p></p> <p>For deeper explanation of the Explorer level components/logic, please refer to the separate Explorer level (hospital and simple environment) section.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/FirstSteps/#quiz","title":"Quiz","text":"<p>The quiz level is a simple level that allows you to test your knowledge of the human body. You can access the quiz level by clicking on the \"Quiz mode\" button in the main menu.</p> <p></p> <p>For deeper explanation of the Quiz level components/logic, please refer to the separate Quiz section.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/FirstSteps/#localization","title":"Localization","text":"<p>The localization feature allows you to change the language of the project. You can access the localization settings by clicking on the \"Settings\" button in the main menu and then selecting \"Localization\". Currently, the project supports English and Dutch languages.</p> <p>For deeper explanation of the Localization, please refer to the separate Localization page.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Localization/","title":"Localization","text":"<p>The localization feature of the application was done through Unreal Engine's integrated localization. This section provides a step-by-step guide on how to update localization when needed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Localization/#adding-new-text-for-localization","title":"Adding new text for localization","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Localization/#text-within-blueprint","title":"Text within Blueprint","text":"<p>First and foremost, for all (new) text blocks you want to translate, you need to specify if they should be localized. To do this, open your Widget Blueprint and switch to <code>Designer</code> mode [1.] (or any Unreal Engine object, like Data Table, containing a text field). Select any text block that you want to localize [2.]. Then, in the <code>Details</code> panel, click a flag icon [3.] make sure the <code>Localize</code> option is checked [4.].</p> <p></p> <p>Enabling this ensures that the text will be included when gathering content for translation.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Localization/#text-within-c-code","title":"Text within C++ code","text":"<p>For text blocks that are defined in C++ code, you need to use the <code>LOCTEXT</code> or <code>NSLOCTEXT</code> macro. These macro allow you to define a text block that can be localized. Here is an example of how to use <code>NSLOCTEXT</code>:</p> <pre><code>NSLOCTEXT([Namespace], [Key], [Source String]);\ne.g. NSLOCTEXT(\"SomeNamespace\", \"SomeKey\", \"This is the text to be localized\");\n</code></pre> <p>The only difference between <code>NSLOCTEXT</code> and <code>LOCTEXT</code> is that the former allows you to specify a namespace, which might help organize your localization strings better.</p> <p>Warning</p> <p>Make sure not to assign those macros to string variables since that would prevent the Unreal Engine from recognizing them as localizable text. They should be used/reffered in a <code>FText</code> variable.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Localization/#localization-configuration-and-modification","title":"Localization configuration and modification","text":"<p>If you are ready to start localizing your application, you can do so through the <code>Localization Dashboard</code> which can be found in the <code>Tools</code> top menu. This dashboard provides a comprehensive interface for managing localization settings, gathering text, and translating content.</p> <p>The process starts by gathering all the text used throughout the application. To do this, you need to keep the <code>Gather from Packages</code> and <code>Gather from Text Files</code> options enabled [0.1.] and tell the engine where to look for translation content. In case of packages, we used path wildcards to search everything inside the <code>Content</code> folder [0.2.], which holds all the files for the application. In case of Text Files, we applied the wildcard that searches for <code>.cpp</code> and <code>.h</code> files within the whole project (that includes <code>Source</code> directory containing C++ code) [0.3.]. (feel free, of course, to change/add any paths to your specific needs)</p> <p>Next, you can add language(s) you want to support [1.]. Make sure that a 'native' language is English [2.]. Once that is done, click the <code>Gather Text</code> button [3.] to collect all the text for translation.</p> <p>The next step is to actually translate the text we need. For this we open the <code>Translation editor</code> [4.] through the <code>Actions</code> segment of the cultures (First small icon, starting from left, below <code>Actions</code>).</p> <p></p> <p>Later, in the translation editor we simply translate the words we need manually. Watch out on <code>Untranslated</code>/<code>Completed</code> tabs [1.] and do not forget about the <code>Save</code> button [2.] to save your changes.</p> <p></p> <p>Note</p> <p>It is possible to use third party services to translate, using <code>Portable Object</code> files. As these third party services are usually paid we refrained from using them, considering the scale of the application.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Localization/#changing-the-language-in-the-application","title":"Changing the language in the application","text":"<p>The change of the language in the application can be done through interaction with <code>WB_SettingsPage</code> (or simply Settings page).</p> <p>Also, all behaviour and code logic inside <code>WB_SettingsPage</code> is implemented using Blueprints. In order to see the Blueprint functions, you need to go to switch from <code>Design</code> to <code>Graph</code> mode in the Widget Blueprint editor.</p> <p>For switching between languages (English and Dutch), we use dispatchers for the buttons since they are reusable, then we  set the preferred culture using the <code>Set Current Culture</code> node where we specify the culture.</p> <p>(The <code>Set Dot Visible</code> node is for UI purposes and casting to <code>CPP_GameInstance</code> and the <code>SaveCultureSetting</code> function are for saving the application state feature - it is a different topic).</p> <p></p> <p>To make sure we are getting the correct specification of the culture, we can check it by hovering over the cultures in the Localization Dashboard:</p> <p></p> <p>(though by default <code>en</code> is English, <code>nl-NL</code> is Dutch)</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Main-Menu-level/","title":"Main Menu level","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Main-Menu-level/#landing-page","title":"Landing Page","text":"<p>For this part of the documentation, we will provide a brief overview of the design phases of the UI implementation for the Landing Page, as well as choices made along the way and how components function.</p> <p>The design of the application is based upon the figma design which can be seen here.</p> <p>First we set the new landing page to be used by the MainMenuLevel in the MainMenuLevel blueprint.</p> <p></p> <p>Withing the landing page, every element is anchored to the canvas panel. This is done in order to keep the application responsive. By anchoring elements to the canvas, they essentially stick to a certain chosen point on said canvas. In the following example, note that the \"Explorer Button\" is anchored to the center of the canvas (depicted by the flower looking icon).  (images/anchor-elements-example.png)</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Main-Menu-level/#ui-structure-and-resources","title":"UI Structure and Resources","text":"<p>All UI elements besides the Level components are kept in the UI directory.</p> <p>In order to match the Figma design, custom fonts are used which can be found in the \"Fonts\" directory.</p> <p></p> <p>A new directory for assets was created, named \"Assets\". This contains general assets such as design elements, as well as button assets acting as icons.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Main-Menu-level/#reusable-buttons","title":"Reusable Buttons","text":"<p>For the sake of efficiency reusable buttons have been created.</p> <p>RectangleBase</p> <p>The rectangle base consists of three simple elements: overlay, button and text block, in that hierarchical order.</p> <p>To actually make this button reusable, it is necessary to declare the text block as a variable in the Designer tab of the UMG panel.</p> <p>In order to be able to edit the text for the button in the UMG panel, the event has to be pre-constructed. After which, with a simple setter function we get the previously assigned text variable named <code>txtDefault</code> and pass it into the setter function. Finally, we pass the <code>Text</code> variable with type <code>text</code> into the setter function so that we can dynamically chnage it.</p> <p></p> <p>Now that we have a reusable button, we simply navigate to our landing page's widget blueprint and search for our button underneath the <code>Palette</code> tab in UMG. Once we have added our button to the hierarchy, we can change the text to whatever we like from the <code>Details</code> tab.</p> <p>SquareBase</p> <p>The square base is very similar to the rectangle base in its hierarchy, the only change being that the text block is replaced with an image element in this case.</p> <p>In order to dynamically change the icons for our square base buttons, we create a custom event <code>SetButtonIcon</code> with an input of type <code>Texture 2D</code> named \"Icon Texture\". Next, we pass our event into a <code>Set Brush from Texture</code> node whose target is the image, followed by passing our icon texture input into the <code>Set Brush from Texture</code> node's <code>Texture</code>. Again we had to set the placeholder image inside the button as a variable so we can manipulate it. We get the image and pass that into the set brush node' target.</p> <p></p> <p>Now in our landing page, we can just simply drag the button into its hierarchy.</p> <p>In the landing page's blueprint we pre-construct again and call our <code>SetButtonIcon</code> event into which we pass our button as a target. Now we simply select the asset we would like to use once we have actually imported the asset.</p> <p></p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/AddingNewBodyParts/","title":"Adding new body parts","text":"<p>To add a new part of the model, follow these steps. This guide assumes that you have already imported your picker mesh, and skeletal mesh.</p> <ol> <li> <p>Make the Merged Model a Skeletal Mesh:    Refer to the Animation chapter to learn how to create a Skeletal Mesh.</p> </li> <li> <p>Create a New Blueprint:    Name it <code>BP_YourPartOfTheBody</code>.</p> </li> <li> <p>Place the Blueprint in the World:    Drag and drop the blueprint into the world and organize it within the World Explorer window.</p> </li> <li> <p>Open the Blueprint and Navigate to the <code>Viewport</code>:    Inside the blueprint, go to the <code>Viewport</code> tab.</p> </li> <li> <p>Add the Skeletal Mesh to the Scene:    In the <code>Viewport</code>, you should see the <code>SceneRoot</code>. Open the Asset Explorer (<code>Ctrl + Space</code>), find your Skeletal Mesh, and drag and drop it into the <code>SceneRoot</code> component.</p> </li> <li> <p>You Should See Something Like This:</p> <p> Viewport of the new body part </p> </li> <li> <p>Rename the Skeletal Mesh in the Viewport:    Rename the Skeletal Mesh to match the name that will be displayed in the tree view.</p> </li> <li> <p>Assign a Descriptive Tag:    Add a short, descriptive tag (e.g., bones, veins, arteries, heart, liver, stomach, etc.) in the Details panel.</p> </li> <li> <p>Add the Picker Mesh:    Open the Asset Explorer again (<code>Ctrl + Space</code>) and navigate to the folder where your picker mesh is located.</p> </li> <li> <p>Drag and Drop the Picker Mesh into the Skeletal Mesh:     Select all the meshes of the picker model and drag them into the Skeletal Mesh component. This ensures that the picker meshes become children of the Skeletal Mesh.</p> <p>You should now see something like this:</p> <p> Viewport of the new body part and its picker mesh </p> </li> <li> <p>Configure the Picker Mesh:     Select all the picker meshes and perform the following actions:</p> <ul> <li>Change the material to <code>M_MaterialPicker</code>.</li> <li>Set the visibility to Hidden.</li> <li>Set the collision preset to Custom.</li> <li>Set <code>ReverseCulling</code> to true </li> </ul> <p>Your configuration should look like this:</p> <p> Collision presets </p> </li> </ol> <p>Once you have completed these steps, you should be able to select individual parts of the model as well as the entire skeletal mesh from the sidebar of the application.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/ExplorerLevelVsHospitalLevel/","title":"Simple environment vs. Hospital environment","text":"<p>You might be wondering what the difference is between the simple environment and the hospital environment. Let us break it down:</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/ExplorerLevelVsHospitalLevel/#hospital-environment","title":"Hospital Environment","text":"<p>(named ExplorerLevel-HospitalEnvironment as a level inside the Unreal Engine project)</p> <p>The Hospital Level is designed primarily for presenting the application to clients. As such, it includes advanced and resource-intensive features like:</p> <ul> <li>Expensive lighting operations</li> <li>Real-time ray tracing</li> <li>Global illumination</li> <li>Light occlusion</li> <li>Lens flare</li> <li>God rays</li> </ul> <p>While these features make the level visually stunning, they also make it extremely demanding on system resources. For this reason, we strongly discourage working on this level. It is not that we do not want you to have fun \u2014 it is just that this level is a resource-hungry powerhouse best reserved for client presentations.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/ExplorerLevelVsHospitalLevel/#simple-environment","title":"Simple Environment","text":"<p>(named ExplorerLevel-SimpleEnvironment as a level inside the Unreal Engine project)</p> <p>In contrast, the Simple Environment is designed for speed and performance. All new features should be implemented in this level, as performance is critical for this project. It\u2019s optimized to ensure smooth operation and efficiency, making it the ideal environment for development and testing. Once new features are implemented you are free to put and test them to the hospital level. </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/ExplorerLevelVsHospitalLevel/#cinematic-sequences","title":"Cinematic Sequences","text":"<p>You might also be curious about the purpose of the cinematic sequences. As the name suggests, these are used to create the application\u2019s trailer. The master sequencer governs every shot, which is essentially a prerecorded camera movement. These sequences help showcase the application in a dynamic and engaging way.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/Animations/","title":"Animations","text":"<p>So far, all body parts that have been loaded are animated. All animations are stored in the <code>Body-Merged-Full/Animations</code> directory, which contains folders for each body part. These folders include various animation-related files. For example, in the <code>Body</code> folder, you will find the <code>Skeleton</code> for the bones mesh, the <code>Animation Blueprint</code>, and the <code>Level Sequence</code>.</p> <p>We have only rigged and animated the merged meshes that are displayed in the viewport.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/Animations/#how-we-animated","title":"How We Animated","text":"<ol> <li> <p>Importing Merged Meshes:    We imported the merged meshes from Blender. Once imported, we right-clicked on the desired mesh and selected <code>Convert to Skeletal Mesh</code>. Note: If you don't see this option, enable the plugin by going to <code>Plugins -&gt; Skeletal Mesh Editing Tools</code>.</p> </li> <li> <p>Creating the Skeletal Mesh:    This conversion generated the skeletal mesh, which can then be rigged by placing bones and adjusting the weights of the mesh's vertices.    For more information on rigging, please refer to this video.</p> </li> <li> <p>Creating the Animation:    To animate the model, we created a sequencer by right-clicking inside the content browser.    It is important to load the skeleton (not the skeletal mesh) into the sequencer.</p> </li> <li> <p>Baking and Playing the Animation:    Once we were satisfied with the animation, we baked it into an animation asset. </p> </li> <li> <p>Creating Animation Blueprint:    To access animations in C++, we created a C++ class for each animation and then generated an animation blueprint from these classes. The animations are located inside the <code>Animations</code> folder.</p> </li> </ol> <p>Important: Each C++ animation class must inherit from the <code>BaseAnimation</code> class, allowing us to manipulate the animations during the simulation.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/Animations/#naming-conventions-used","title":"Naming Conventions Used","text":"<ul> <li><code>SK_</code> prefix for skeletons.</li> <li><code>CamelCase</code> for baked animation sequences.</li> <li><code>SEQ_</code> prefix for sequencers.</li> <li><code>BPA_</code> prefix for animation blueprints.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/Body-positions/","title":"Body positions","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/Body-positions/#introduction","title":"Introduction","text":"<p>The body positions feature has been being developed to expand the clinical realism of the Virtual Anatomy application and improve the learning experience for nursing students by enabling the 3D human model to be displayed in various medically relevant poses. These include common patient positions such as:</p> <ul> <li>standing, </li> <li>sitting, </li> <li>lying down, </li> <li>lying down with raised limbs. </li> </ul> <p>Incorporating these postures would, as mentioned, enhance the educational value of the application by allowing users  to observe and interact with the human body in contexts that reflect real-world medical scenarios.</p> <p>One of the primary challenges in implementing this feature was to ensure that each body pose could be displayed accurately  without interrupting the continuous breathing animation already integrated into the model. The solution required a method that supported both static positioning  and additive animation blending, maintaining a natural appearance while minimizing performance overhead and animation artifacts.</p> <p>Initial development focused on exploring whether skeletal mesh manipulation could serve as a foundation for pose switching.  However, this approach proved to be inefficient and inflexible. It complicated the animation workflow and introduced difficulties in preserving consistency across poses. </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/Body-positions/#how-poses-are-created","title":"How poses are created?","text":"<p>After some consultation with TU Delft's New Media Center, the focus shifted toward working directly with animations rather than skeletal structures.  The adopted approach centers on creating individual Animation Sequences for each desired pose using the base skeletal mesh. These sequences capture the exact transformations needed to simulate each position.  To preserve the breathing animation while applying new body poses, the Animation Blueprint system in Unreal Engine is used in combination with the \u201cApply Additive\u201d node. This technique allows the base pose animation to remain static while layering the breathing motion additively on top of it.</p> \"Apply Additive\" function application (from one of the desired body poses) <p>This method proved both efficient and flexible. By treating each pose as a separate Animation Sequence and using the Apply Additive function, it became possible to dynamically blend static and dynamic animations.  This approach not only preserves the integrity of the breathing animation but also enables smooth transitions between different body states.</p> <p></p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/Body-positions/#current-status-and-future-plans","title":"Current status and Future plans","text":"<p>After confirming the effectiveness of this setup, several poses were tried to be implemented as individual Animation Sequences and integrated into the Simulation Manager system.  The groundwork was laid for extending this functionality further, with the potential to dynamically switch poses during simulation and adapt other systems - such as blood flow and organs alignment.</p> <p>However, due to time constraints and competing other academic tasks, full implementation of the feature could not be completed within the development timeframe (namely, 2nd semester of 2024/2025).  Nonetheless, the core animation system, including the additive blending of breathing and pose sequences, has been successfully prototyped.  This foundational work could enable future developers (maybe it can be you who is going to fully implement this feature ;) ) to build upon a flexible and extensible system for representing human body positions within the Virtual Anatomy application.</p> <p>To summarize, future plans for this feature and thus future tasks include:</p> <ul> <li>adjusting the behavior of blood flow simulations based on the body\u2019s posture (for example, changes in circulation while lying down or sitting), </li> <li>ensuring anatomical accuracy of internal organs in each position, </li> <li>enabling real-time pose switching via Simulation Manager to reflect many clinical scenarios.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/UCPP_BaseAnimation/","title":"UCPP_BaseAnimation","text":"<p>This class serves as the base class for all potential animations in the game. It is designed to be inherited by other C++ classes, not directly by Blueprints. Its primary purpose is to start or stop animations in response to events fired by the <code>SimulationManager</code> class. This class may also be extended to hold various parameters in the future.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/UCPP_BaseAnimation/#protected-properties","title":"Protected Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/UCPP_BaseAnimation/#tobjectptrucpp_simulationmanager-simulationmanager","title":"<code>TObjectPtr&lt;UCPP_SimulationManager&gt; SimulationManager</code>","text":"<p>Description: </p> <p>An instance of the <code>SimulationManager</code>, allowing the animation to listen for events triggered by it.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/UCPP_BaseAnimation/#tobjectptruanimsequence-animationofhumanbody","title":"<code>TObjectPtr&lt;UAnimSequence&gt; AnimationOfHumanBody</code>","text":"<p>Description: </p> <p>The animation sequence that will play when the simulation starts.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/UCPP_BaseAnimation/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/UCPP_BaseAnimation/#void-onstartsimulation","title":"<code>void OnStartSimulation()</code>","text":"<p>Description: </p> <p>Executed when the simulation start event is triggered by the <code>SimulationManager</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/UCPP_BaseAnimation/#void-onstopsimulation","title":"<code>void OnStopSimulation()</code>","text":"<p>Description: </p> <p>Executed when the simulation end event is triggered by the <code>SimulationManager</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/UCPP_BaseAnimation/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/UCPP_BaseAnimation/#void-nativebeginplay","title":"<code>void NativeBeginPlay()</code>","text":"<p>Description: </p> <p>An overridden method that subscribes the animation instance to events from the <code>SimulationManager</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Animations/UCPP_BaseAnimation/#void-begindestroy","title":"<code>void BeginDestroy()</code>","text":"<p>Description: </p> <p>An overridden method for any cleanup needed when the animation instance is destroyed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/","title":"UCPP_CameraControls","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#class-description","title":"Class Description","text":"<p>This class handles camera movement and positioning in the scene. It uses a spherical coordinate system to calculate the camera\u2019s position and orientation relative to a target point. This class is purely computational and does not represent a physical object in the world. It can only be accessed through the <code>UCPP_User</code> class.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#key-features","title":"Key Features:","text":"<ul> <li>Spherical Coordinate System:   The camera\u2019s position is calculated using polar (<code>Theta</code>), azimuthal (<code>Phi</code>), and radial (<code>R</code>) coordinates.  </li> <li>Theta (Polar): Controls vertical (up/down) movement.  </li> <li>Phi (Azimuth): Controls horizontal (left/right) movement.  </li> <li>Radius (R): Controls the distance from the target point.   The spherical coordinates are converted to Unreal Engine's Cartesian coordinate system for proper positioning.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#definitions","title":"Definitions","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#anatomy_pi","title":"<code>ANATOMY_PI</code>","text":"<p>Description:</p> <p>Defines a custom PI value to replace Unreal Engine\u2019s deprecated PI definition. This ensures more reliable and consistent calculations within the application.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#void-initconst-fvector-lookatpos-const-fvector-startpos-float-maxradius-7000f-float-minradius-10f","title":"<code>void Init(const FVector&amp; LookAtPos, const FVector&amp; StartPos, float MaxRadius = 700.0f, float MinRadius = 1.0f)</code>","text":"<p>Description: Initializes the orbit camera controls, defining the target point to orbit around and setting the radius limits.  </p> <p>Parameters: - <code>LookAtPos</code>: The position in the world around which the camera should orbit. - <code>StartPos</code>: The initial position of the camera in world coordinates. - <code>maxRadius</code>: The maximum distance the camera can be from the target. Default is <code>700.0f</code>. - <code>minRadius</code>: The minimum distance the camera can be from the target. Default is <code>1.0f</code>.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#void-rotatepolarfloat-by","title":"<code>void RotatePolar(float by)</code>","text":"<p>Description: Rotates the camera around the target vertically (up/down) by adjusting the polar angle (<code>Theta</code>).  </p> <p>Parameters: - <code>by</code>: The rotation amount in radians.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#void-rotateazimuthfloat-by","title":"<code>void RotateAzimuth(float by)</code>","text":"<p>Description: Rotates the camera around the target horizontally (left/right) by adjusting the azimuthal angle (<code>Phi</code>).  </p> <p>Parameters: - <code>by</code>: The rotation amount in radians.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#fvector-getlookatpos","title":"<code>FVector GetLookAtPos()</code>","text":"<p>Description: Retrieves the position of the target point the camera is orbiting.  </p> <p>Returns: A <code>FVector</code> representing the target position in world coordinates.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#void-movehorizontalfloat-by","title":"<code>void MoveHorizontal(float by)</code>","text":"<p>Description: Moves the camera horizontally along the current orientation plane.  </p> <p>Parameters: - <code>by</code>: The amount to move horizontally.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#void-moveverticalfloat-by","title":"<code>void MoveVertical(float by)</code>","text":"<p>Description: Moves the camera vertically along the current orientation plane.  </p> <p>Parameters: - <code>by</code>: The amount to move vertically.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#void-zoomfloat-by","title":"<code>void Zoom(float by)</code>","text":"<p>Description: Adjusts the camera's distance from the target point by modifying the radius.  </p> <p>Parameters: - <code>by</code>: The amount to adjust the radius. Positive values zoom out, and negative values zoom in.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#void-setlookattargetfvector-lookattarget","title":"<code>void SetLookAtTarget(FVector LookAtTarget)</code>","text":"<p>Description: Changes the target point the camera looks at.  </p> <p>Parameters: - <code>LookAtTarget</code>: A new position in world coordinates for the camera to focus on.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#fvector3d-getposition","title":"<code>FVector3d &amp;GetPosition()</code>","text":"<p>Description: Retrieves the current position of the camera in world space.  </p> <p>Returns: A reference to the <code>FVector3d</code> representing the camera\u2019s world position.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#frotator-getrotation","title":"<code>FRotator &amp;GetRotation()</code>","text":"<p>Description: Retrieves the current orientation of the camera.  </p> <p>Returns: A reference to the <code>FRotator</code> representing the camera\u2019s rotation.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#private-methods","title":"Private Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#fvector3d-recalculateposition","title":"<code>FVector3d RecalculatePosition()</code>","text":"<p>Description: Recalculates the camera\u2019s position in Cartesian coordinates based on the spherical coordinates:  </p> <p>x = R * Cos(Phi) * Cos(Theta); \\ y = R * Cos(Phi) * Sin(Theta); \\ z = R * Sin(Phi); </p> <p>Returns: A <code>FVector3d</code> representing the updated camera position in world space.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#void-recalculaterotation","title":"<code>void RecalculateRotation()</code>","text":"<p>Description: Adjusts the camera\u2019s orientation to ensure it follows the target location when moving or rotating.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#void-clamplookatposition","title":"<code>void ClampLookAtPosition();</code>","text":"<p>Description: Ensures the camera\u2019s target position remains within defined thresholds to prevent it from moving too far away.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#private-properties","title":"Private Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#frotator-orientation","title":"<code>FRotator Orientation</code>","text":"<p>Description: Represents the camera\u2019s current orientation (rotation) in world space.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#fvector3d-location","title":"<code>FVector3d Location</code>","text":"<p>Description: Represents the camera\u2019s current location in world space.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#float-radius","title":"<code>float Radius</code>","text":"<p>Description: The current distance from the target point to the camera.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#float-maximumradius","title":"<code>float MaximumRadius</code>","text":"<p>Description: The maximum allowed radius for the camera.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#float-minimumradius","title":"<code>float MinimumRadius</code>","text":"<p>Description: The minimum allowed radius for the camera.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#fvector-lookatposition","title":"<code>FVector LookAtPosition</code>","text":"<p>Description: The position in world space that the camera is currently focusing on.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#const-float-fullcircle","title":"<code>const float FullCircle</code>","text":"<p>Description: Represents a full circle in radians ((2\\pi)). Defined as <code>ANATOMY_PI * 2.F</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#float-minthresholdx","title":"<code>float MinThresholdX</code>","text":"<p>Description: The minimum allowed threshold value for the X-axis. This defines the lower boundary beyond which values are considered out of range.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#float-maxthresholdx","title":"<code>float MaxThresholdX</code>","text":"<p>Description: The maximum allowed threshold value for the X-axis. This defines the upper boundary beyond which values are considered out of range.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#float-minthresholdz","title":"<code>float MinThresholdZ</code>","text":"<p>Description: The minimum allowed threshold value for the Z-axis. This defines the lower boundary beyond which values are considered out of range.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#float-maxthresholdz","title":"<code>float MaxThresholdZ</code>","text":"<p>Description: The maximum allowed threshold value for the Z-axis. This defines the upper boundary beyond which values are considered out of range.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#fsphericalpoint-cameralocationinspherical","title":"<code>FSphericalPoint CameraLocationInSpherical</code>","text":"<p>Description: Represents the camera\u2019s position in spherical coordinates, including polar angle (<code>Theta</code>), azimuthal angle (<code>Phi</code>), and radius (<code>R</code>). This is used for calculating the camera's position relative to the target point.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#notes","title":"Notes","text":"<ul> <li>The spherical coordinate system provides precise control over camera movement, allowing dynamic manipulation of angles and distance.  </li> <li>Ensure angles passed to methods like <code>RotatePolar</code> or <code>RotateAzimuth</code> are in radians for accurate results.  </li> <li>This class is designed to be accessed indirectly and is not meant to be placed directly in the world.  </li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Camera/Camera/#further-reading-and-resources","title":"Further reading and resources","text":"<p>Great article about the orbit camera</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/","title":"ACPP_User","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#class-description","title":"Class description","text":"<p>This class is handling user input and is responsible for moving the camera appropriately.  Camera objects and spring arm components are created here and spawned once the application starts. <code>BP_User</code> is inherited from this class and this allows us to change the parameters in the comfort of UE editor.</p> <p>It is worth mentioning this class inherits from <code>ACharacter</code>, which means that our player (user) is able to control the character and move it in the scene.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#public-fields","title":"Public fields","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#acpp_user_1","title":"<code>ACPP_User()</code>","text":"<p>Constructor of the class. Here we set up the camera together with the spring arm component to aid us with collisions with meshes and the floor.</p> <p>The camera and spring arm are created and added to the root component of the character using the following code:</p> <pre><code>    //for spring arm it is named camera boom as most of the Unreal Engine comunty gives this name to it \n    CameraBoom = CreateDefaultSubobject&lt;USpringArmComponent&gt;(TEXT(\"Camera Boom\"));\n\n    //add to the root of the player \n    CameraBoom-&gt;SetupAttachment(RootComponent);\n</code></pre> <p>The camera is created in similar manner and is added as a child of <code>CameraBoom</code></p> <pre><code>    MainCamera =  CreateDefaultSubobject&lt;UCameraComponent&gt;(TEXT(\"Main camera\"));\n    MainCamera-&gt;SetupAttachment(CameraBoom,USpringArmComponent::SocketName);\n</code></pre> <p>If you visit the <code>BP_User</code> and open the viewport, you can see both the spring arm and camera there.</p> <p>NOTE: To see the viewport of the blueprint, you have to enable the full blueprint editor. It should prompt you to do so once you double-click on the <code>BP_User</code>.</p> <p></p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#aactor-targetactor","title":"<code>AActor* TargetActor</code>","text":"<p><code>UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Target Actor\",meta = (AllowPrivateAccess = \"true\"))</code></p> <p>This is the invisible actor in the scene which specifies the target around which our camera orbits.</p> <p>This actor is moved around the model of the human body based on which part of the body was selected. See MeshSelector for more details.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#uspringarmcomponent-cameraboom","title":"<code>USpringArmComponent* CameraBoom;</code>","text":"<p><code>UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Camera)</code></p> <p>This pointer holds the spring arm component. Through this pointer, you can access it and manipulate it within the class.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#ucameracomponent-maincamera","title":"<code>UCameraComponent* MainCamera;</code>","text":"<p><code>UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Camera)</code></p> <p>This is the pointer to the actual camera that is going to be used for the player (user, in our case).</p> <p>Once you press the play button in the Unreal Editor, you will see what this camera sees. It is really that simple.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#ucpp_cameracontrols-getcameracontrols","title":"<code>UCPP_CameraControls* GetCameraControls()</code>","text":"<p>Function that returns the camera controls component.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#void-movehorizontalconst-finputactionvalue-value","title":"<code>void MoveHorizontal(const FInputActionValue&amp; Value)</code>","text":"<p>Function that moves the user (and the camera component simultaneously) horizontally.</p> <p>Parameters:</p> <p><code>Value</code> - value that determines how much the camera should move</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#void-moveverticalconst-finputactionvalue-value","title":"<code>void MoveVertical(const FInputActionValue&amp; Value)</code>","text":"<p>Function that moves the user (and the camera component simultaneously) vertically.</p> <p>Parameters:</p> <p><code>Value</code> - value that determines how much the camera should move</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#aplayercontroller-getuserplayercontroller","title":"<code>APlayerController* GetUserPlayerController()</code>","text":"<p>Function that returns the player controller component</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#uquizuimanager-quizuimanagerref","title":"<code>UQuizUIManager* QuizUIManagerRef</code>","text":"<p>This is a pointer to the <code>UQuizUIManager</code> class, which is used to manage the quiz UI. It is used to display the quiz to the user.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#void-zoomconst-finputactionvalue-value","title":"<code>void Zoom(const FInputActionValue&amp; Value)</code>","text":"<p>Parameters:</p> <p><code>float FInputActionValue&amp; Value:</code> - reference to how much user has value passed by the enhanced input system</p> <p>This action gets executed once the user zooms in. The <code>FInputActionValue</code> is a reference to the amount that the user adjusted. This is handled through the Enhanced Input system of Unreal Engine.</p> <p>In other words, this function zooms the player either in or out in the scene based on how much they spun the mouse wheel or moved their fingers on the touchpad.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#void-tickfloat-deltatime","title":"<code>void Tick(float DeltaTime);</code>","text":"<p>Parameters:</p> <ul> <li><code>float DeltaTime:</code> - time between ticks, this parameter is provided by the Unreal Engine</li> </ul> <p>This is a function that is executed every <code>tick</code>. The tick frequency is usually every frame.</p> <p>The parameter <code>float DeltaTime</code> is the time in milliseconds between two tick functions.</p> <p>We use this function to store the delta time in order to make user movement frame rate independent.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#protected-fields","title":"Protected fields","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#void-beginplay","title":"<code>void BeginPlay()</code>","text":"<p>This is a function that is inherited from the <code>ACharacter</code>. It is overridden so that we can put anything we want to happen once you press the play button in the controller.</p> <p>For example, if you want the user to start spinning once the game starts, you would put it there.</p> <p>Here we set up our default <code>TargetActor</code> and <code>RayCaster</code>, since both of them require access to the <code>World</code>, and the <code>World</code> is not accessible during construction time (e.g., in the constructor).</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#void-lookconst-finputactionvalue-value","title":"<code>void Look(const FInputActionValue&amp; Value)</code>","text":"<p>Parameters:</p> <p><code>float FInputActionValue&amp; Value:</code> - reference to how much user has value passed by the enhanced input system</p> <p>This function gets executed once the user turns around using their mouse, touchpad, or touch screen.</p> <p>To calculate the rotation of the actor, the function takes the position of the actor that we want to look at.</p> <p>It subtracts the player (user) position from the position of the <code>Target Actor</code> to get the direction pointing towards that target actor.</p> <p>We then normalize this direction to be of length 1.</p> <p>Next, we calculate how much the character (user) should rotate around this actor using <code>RotationDelta</code>. Once this is calculated, we construct a rotation matrix to perform the actual rotation.</p> <p>We apply this matrix to the calculated direction to get the new direction that the player is looking at.</p> <p>Lastly, we calculate the new position of the player (user) using this newly calculated direction.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#void-clickconst-finputactionvalue-value","title":"<code>void Click(const FInputActionValue&amp; Value);</code>","text":"<p>This function is executed once per click.</p> <p>This function performs a ray cast (See FRayCaster for more details about it) to determine if the user clicked on the actor (or in the context of virtual anatomy: human organ) and when yes, which one exactly. It also sets the new position of the target actor to update where the camera should look, and highlights the selected mesh.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#void-setupplayerinputcomponentclass-uinputcomponent-playerinputcomponent","title":"<code>void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent)</code>","text":"<p>Parameters:</p> <p><code>UInputComponent* PlayerInputComponent</code> - The input component to configure. This component holds the mappings of input actions and axes to function calls.</p> <p>This member function is inherited from the <code>ACharacter</code> class, and its main purpose is to tell Unreal Engine what functions should be executed once the user executes inputs specified by the Enhanced Input system.</p> <p>In other words, this function specifies that once the user moves the mouse in an arbitrary direction, the function <code>Look</code> will be executed. Similarly, when the user presses the right mouse button, the function <code>Click</code> will be executed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#protected-member-fields","title":"Protected member fields","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#uinputmappingcontext-inputmapping","title":"<code>UInputMappingContext* InputMapping;</code>","text":"<p><code>UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = \"EnhancedInput\", meta = (AllowPrivateAccess = \"true\"))</code></p> <p>This is a variable that is configured in <code>BP_User</code> (inherited from <code>CPP_User</code>) and specifies what input mappings are going to be used for our user.</p> <p>This means it maps the keys that the user presses to the actions that are going to be executed. Refer to this video for more details.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#uinputaction-ia_rotate-ia_zoom-ia_click-ia_movehorizontal-ia_movevertical","title":"<code>UInputAction* IA_Rotate, IA_Zoom, IA_Click, IA_MoveHorizontal, IA_MoveVertical</code>","text":"<p><code>UPROPERTY(EditAnywhere, BlueprintReadOnly, Category= \"EnhancedInput\")</code></p> <p>These are the input actions that allow us to specify what actions our character can execute. Those fields are also configured inside the <code>BP_User</code> blueprint.</p> <p>The video linked above explains everything about the topic of the Unreal Engine enhanced input system.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#float-cameraspeed","title":"<code>float CameraSpeed</code>","text":"<p><code>UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Camera</code></p> <p>This is a simple float variable that defines the speed of the camera. This can also be changed inside the Unreal Editor.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#float-zoomspeed","title":"<code>float ZoomSpeed</code>","text":"<p><code>UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Camera</code></p> <p>This is a simple float variable that defines the speed at which the user zooms to the currently set target.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#private-members","title":"Private members","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#float-internaldeltatime","title":"<code>float InternalDeltaTime</code>","text":"<p>This variable represents the time before different ticks, used to achieve frame rate independent movement.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#tuniqueptrfraycaster-userraycaster","title":"<code>TUniquePtr&lt;fRayCaster&gt; UserRayCaster</code>","text":"<p>This is a unique pointer for the ray caster class. The ray caster is used to determine which objects the user has clicked on.</p> <p>We have chosen to go with ray casting instead of pixel picking, as pixel picking requires another scene pass, which can be quite expensive given the complexity of the model.</p> <p>We use a unique pointer to enforce ownership and prevent memory leaks. See this blog post.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#ucpp_cameracontrols-cameracontrols","title":"<code>UCPP_CameraControls* CameraControls</code>","text":"<p>This is a pointer to the camera controls class, which is used to control the camera movement and zooming. It is used to set the camera position and rotation based on the user input.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/CPP_User/#tuniqueptrmeshselector-meshselector","title":"<code>TUniquePtr&lt;MeshSelector&gt; MeshSelector</code>","text":"<p>It holds unique pointer to the <code>Mesh Selector</code> class</p> <p>The main purpose of this class is to highlight the objects that user has clicked on. See MeshSelector</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Character/Character/","title":"Character","text":"<p>Here, we will cover the basics, like how you can walk around the scene without actually seeing the camera, or how it is possible that you can rotate without finding the <code>OnUserClick</code> event.</p> <p>Since this is not a video game, we have named our character <code>User</code>.</p> <p>The character is what you would expect it to be: to walk around and interact with Explorer level.</p> <p>The character is spawned at the player start location, which can be seen in the <code>World Explorer</code> menu on the right side of the Unreal Engine.</p> <p></p> <p>To specify which character is going to be spawned inside the level, we can open the <code>CPP_GameMode.cpp</code> file, and inside the constructor, you can find this piece of code:</p> <pre><code>static ConstructorHelpers::FClassFinder&lt;APawn&gt; PlayerPawnBP(TEXT(\"/Game/Blueprints/UserControls/BP_User\"));\n\n    if(PlayerPawnBP.Class != NULL)\n    {\n        DefaultPawnClass =  PlayerPawnBP.Class;\n        UE_LOG(LogTemp, Warning, TEXT(\"UserBP was set as default pawn class\"));\n    }else{\n        UE_LOG(LogTemp, Error, TEXT(\"UserBP was not found\"));\n    }\n</code></pre> <p>This code grabs the Blueprint of our user and assigns it to the Game Mode so that the Unreal Engine knows what character to spawn and which character will be \"possessed\" by the player. In other words, with this, we tell Unreal Engine that our character is going to be controlled by the user behind the computer.</p> <p>However, you might ask why we have <code>BP_User</code> blueprint if we are using only C++?</p> <p>Well, this is for the ease of development. If you visit the path specified inside <code>FClassFinder</code>, you can see that the parent class of this <code>BP_User</code> is the <code>CPP_User</code>.</p> <p>With this approach, we can simply modify various parameters as we see fit without the additional hassle of C++.</p> <p>Since <code>BP_User</code> is inherited from <code>CPP_User</code>, it contains all the information and actions as what is written in <code>CPP_User</code>.</p> <p>Now you might be wondering how you can see without any camera.</p> <p>This is covered inside the ACPP_User page, in <code>ACPP_User()</code> explanation.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Isolator/MeshIsolator/","title":"UCPP_IsolateMesh (Mesh Isolator)","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Isolator/MeshIsolator/#class-description","title":"Class Description","text":"<p>This class is responsible for isolating a selected part of a 3D model by repositioning both the camera's focus point and the chosen mesh to another plane within the explorer level. The selection is handled via the <code>MeshSelector</code> class.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Isolator/MeshIsolator/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Isolator/MeshIsolator/#ucpp_isolatemesh","title":"<code>UCPP_IsolateMesh()</code>","text":"<p>Description: Constructor that sets default values for the class.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Isolator/MeshIsolator/#void-inituworld-world","title":"<code>void Init(UWorld* World)</code>","text":"<p>Description: Initializes an instance of this class within the given world. - Parameters:   - <code>World</code>: A pointer to the <code>UWorld</code> instance where the class is initialized.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Isolator/MeshIsolator/#void-movecenterpoint","title":"<code>void MoveCenterPoint()</code>","text":"<p>Description: Handles the transformation of the camera's target focus point and the selected mesh. This function is triggered upon user interaction by clicking a button.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Isolator/MeshIsolator/#public-properties","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Isolator/MeshIsolator/#tobjectptracpp_user-m_userref","title":"<code>TObjectPtr&lt;ACPP_User&gt; m_userRef</code>","text":"<p>Description: A reference to an <code>ACPP_User</code> object, primarily used to retrieve the <code>TargetActor</code>, which is the focus point of the camera. - Category: MeshIsolator - Attributes: <code>BlueprintReadWrite</code>, <code>EditAnywhere</code></p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Isolator/MeshIsolator/#private-properties","title":"Private Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Isolator/MeshIsolator/#tobjectptruworld-m_world","title":"<code>TObjectPtr&lt;UWorld&gt; m_world</code>","text":"<p>Description: A pointer to the <code>UWorld</code> instance associated with this class. This is used for accessing the game world and its components.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Isolator/MeshIsolator/#tobjectptrucpp_cameracontrols-m_camera","title":"<code>TObjectPtr&lt;UCPP_CameraControls&gt; m_camera</code>","text":"<p>Description: A reference to the <code>UCPP_CameraControls</code> instance. This is utilized for methods that manipulate the camera's focus point.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Isolator/MeshIsolator/#tobjectptrumeshselector-m_selector","title":"<code>TObjectPtr&lt;UMeshSelector&gt; m_selector</code>","text":"<p>Description: A pointer to the <code>MeshSelector</code> class, which provides access to the currently selected mesh by the user.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Isolator/MeshIsolator/#bool-hascenterpointmoved","title":"<code>bool HasCenterPointMoved</code>","text":"<p>Description: A boolean property that tracks whether the center point (camera focus) has been adjusted. - Attributes: <code>UPROPERTY()</code></p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Isolator/MeshIsolator/#fvector-targetactorlocation","title":"<code>FVector targetActorLocation</code>","text":"<p>Description: Stores the initial location of the <code>TargetActor</code>, representing the default camera focus point before any transformations.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Isolator/MeshIsolator/#fvector-meshoriginallocation","title":"<code>FVector meshOriginalLocation</code>","text":"<p>Description: Holds the original position of the selected mesh before being relocated.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/How-is-highlighting-done/","title":"Mesh Selector and highlighting","text":"<p>When the user clicks on a mesh, it gets highlighted. The Mesh Selector is responsible for determining which actor should be highlighted and which should not.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/How-is-highlighting-done/#how-is-highlighting-done","title":"How is Highlighting Done?","text":"<p>Highlighting different elements is achieved using a post-processing volume that spans the entire scene.</p> <p>This post-processing volume uses the <code>HighLightMat</code> material, which can be found in <code>Content\\Materials/</code>. To understand the process better, refer to this video.</p> <p>Every actor that has the <code>RenderCustomDepth</code> field set to <code>True</code> will be highlighted. By default, this field is set to <code>False</code>. We use this to our advantage by setting the <code>RenderCustomDepth</code> field to <code>True</code> whenever the user clicks on a mesh. This causes the clicked actor to be highlighted.</p> <p>To improve performance, we have merged larger parts of the model (like bones, arteries and parts of hearth) in Blender, allowing us to render them all at once. You can find these in the <code>Body-Merged-Full</code> folder in the context menu. This helped us load all necessary textures without the hassle of exporting FBX files properly. As a result, Blender scripts used by previous developers are no longer needed.</p> <p>To allow users to click on different parts of the model, we exported each body mesh as it is in the Blender file, but with fewer triangles using Blender's Decimate modifier.</p> <p>Then, we hid these meshes, so they're loaded into Unreal Engine's Bounding Volume Hierarchy but not drawn. These hidden meshes (static mesh actors) are named <code>Body-Full-Picker</code>. This lets us detect clicks on different parts of the model without rendering them, which gave us a huge performance boost.</p> <p>By default, the actors in Picker-Mesh are hidden and only become visible if the user selects them (clicks on them).</p> <p>While this approach may cause more work for developers, it significantly improves the user experience.</p> <p>To better organize the scene and the entire development environment, each major component is encapsulated within a blueprint class. For instance, bones are represented in the <code>BP_Bones</code> blueprint. This blueprint inherits from the <code>Actor</code> class, making it easy to retrieve later. Within this actor, you will find a Skeletal Mesh, which represents the combined structure of the human body. The Skeletal Mesh serves as the parent for all the <code>StaticMeshes</code>, which represent individual parts of the body for picking (e.g., bones, joints, etc.). Refer to the figure below for a visual understanding of this structure.</p> Bones and its picker meshes <p>With this approach you are able to retrieve the picker mesh in code or inside the blueprints by querying the all children of the skeletal mesh component.</p> <p>Warning</p> <p>Each merged part MUST BE A SKELETAL MESH, and each picker model MUST BE A STATIC MESH AND CHILD OF THE SKELETAL MESH (MERGED BODY PART). This design choice was made to work within the constraints of the Unreal Engine\u2019s class structure. Specifically, it is not possible to directly retrieve a <code>Static Mesh Component</code> (as opposed to static mesh actors) from a parent element.</p> <p>As a result, you cannot do something like this in code:</p> <pre><code>//pseudo code \n//===============\n\nAActor* actor = GetAllActorsWithTag(\"bones\"); // get BP_Bones actor\n\nTMeshComponent mergedMesh = actor-&gt;GetAllComponets&lt;UMeshComponent&gt;()  // get top level components of type MeshComponent\n</code></pre> <p>You might assume that the action will retrieve all top-level components that are of type or subclass of <code>UMeshComponent</code>, but this is not the case. Instead, it retrieves all components from the <code>BP_Bones</code> actor, including both Skeletal Mesh Component (for rendering) and Static Mesh components for the picker.</p> <p>If the merged model is not a Skeletal Mesh, this could make it difficult to isolate and retrieve either the picker mesh or the merged mesh directly. For example, you would need to loop through all the components and check manually for tags like <code>isPicker</code> or <code>isMerged</code>.</p> <p>This limitation is why the merged mesh is set as a Skeletal Mesh and the picker mesh as a Static Mesh. By using this approach, it becomes straightforward to identify whether the retrieved component is part of the picker mesh or the merged mesh.</p> <p>This approach is primarily used for user interaction and for organizing the tree view. Since the tree view only displays the merged meshes, we needed a way to organize them effectively. This is the solution we have chosen. However, if you find a better approach, feel free to implement it, but please make sure to update this documentation page accordingly.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/","title":"<code>UMeshSelector</code>","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#class-description","title":"Class Description","text":"<p>This class is responsible for highlighting mesh components that represent anatomical parts selected by the user. Additionally, it interacts with the ClickedOnInfo UI to display details about the selected anatomical part.</p> <p>Clicked on info UI compoonent</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#meshselector","title":"<code>MeshSelector()</code>","text":"<p>Description:</p> <p>The constructor of this class is empty, as no parameters need to be passed during instantiation.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#void-inituworld-world","title":"<code>void Init(UWorld* world)</code>","text":"<p>Description:</p> <p>This method initializes the <code>MeshSelector</code> with the necessary world context, allowing it to interact with world-specific elements.</p> <p>Parameters:</p> <ul> <li><code>UWorld* world</code> - The world context that this selector will operate within.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#void-highlightactoraactor-actor","title":"<code>void HighlightActor(AActor* actor)</code>","text":"<p>Description:</p> <p>Deprecated. This function highlights the specified actor and removes the highlight from any previously highlighted actor. It also stores the previously highlighted actor in <code>m_previouslySelectedActor</code>.</p> <p>Parameters:</p> <ul> <li><code>AActor* actor</code> - The actor to highlight when clicked.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#void-highlightcomponentumeshcomponent-mesh","title":"<code>void HighlightComponent(UMeshComponent* mesh)</code>","text":"<p>Description:</p> <p>Highlights the specified mesh component, adding a visual effect to indicate selection. It de-highlights any previously highlighted mesh component and updates the reference to <code>m_previouslySelectedMesh</code>.</p> <p>Parameters:</p> <ul> <li><code>UMeshComponent* mesh</code> - The mesh component to highlight.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#void-deselectallactors","title":"<code>void DeselectAllActors()</code>","text":"<p>Description:</p> <p>Deprecated. Deselects all highlighted actors, removing any active visual highlights.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#void-deselectallcomponents","title":"<code>void DeselectAllComponents()</code>","text":"<p>Description:</p> <p>Deselects all highlighted mesh components, removing any active visual highlights.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#private-members","title":"Private Members","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#aactor-m_currentlyselectedactor","title":"<code>AActor* m_currentlySelectedActor</code>","text":"<p>Description:</p> <p>A reference to the actor currently highlighted. Defaults to <code>nullptr</code> if no actor is highlighted.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#aactor-m_previouslyselectedactor","title":"<code>AActor* m_previouslySelectedActor</code>","text":"<p>Description:</p> <p>A reference to the previously highlighted actor. Defaults to <code>nullptr</code> if no actor was previously selected.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#umeshcomponent-m_currentlyselectedmesh","title":"<code>UMeshComponent* m_currentlySelectedMesh</code>","text":"<p>Description:</p> <p>Stores a reference to the currently highlighted mesh component. Defaults to <code>nullptr</code> if no mesh is highlighted.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#umeshcomponent-m_previouslyselectedmesh","title":"<code>UMeshComponent* m_previouslySelectedMesh</code>","text":"<p>Description:</p> <p>Stores a reference to the previously highlighted mesh component. Defaults to <code>nullptr</code> if no mesh was previously selected.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#ucpp_clickedoninfo-m_displayedclickonnamewidget","title":"<code>UCPP_ClickedOnInfo* m_displayedClickOnNameWidget</code>","text":"<p>Description:</p> <p>Reference to the ClickedOnInfo widget that displays information about the currently selected anatomical part.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#uworld-m_world","title":"<code>UWorld* m_world</code>","text":"<p>Description:</p> <p>The world context for this selector, used to interact with in-world components.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#private-methods","title":"Private Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#void-setactorhighlightvisibleaactor-actor-bool-ishighlightvisible","title":"<code>void SetActorHighlightVisible(AActor* actor, bool isHighlightVisible)</code>","text":"<p>Description:</p> <p>Deprecated. This helper function adjusts the <code>RenderCustomDepth</code> value for the actor to control the highlight visibility.</p> <p>Parameters:</p> <ul> <li><code>AActor* actor</code> - The actor on which the highlight should be shown or hidden.</li> <li><code>bool isHighlightVisible</code> - Sets whether the highlight is visible (<code>true</code>) or hidden (<code>false</code>).</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Mesh-selector/UMeshSelector/#void-setcomponenthighlightvisibleumeshcomponent-mesh-bool-ishighlightvisible","title":"<code>void SetComponentHighlightVisible(UMeshComponent* mesh, bool isHighlightVisible)</code>","text":"<p>Description:</p> <p>This helper function controls the highlight visibility for the specified mesh component, using <code>RenderCustomDepth</code> to achieve the effect.</p> <p>Parameters:</p> <ul> <li><code>UMeshComponent* mesh</code> - The mesh component for which the highlight should be shown or hidden.</li> <li><code>bool isHighlightVisible</code> - Determines whether the highlight is visible (<code>true</code>) or hidden (<code>false</code>).</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/","title":"<code>FRayCaster</code>","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/#public-mehtods","title":"Public mehtods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/#fraycaster_1","title":"<code>FRayCaster()</code>","text":"<p>Description:</p> <p>Constructor initializing the <code>World</code> and <code>CurrentHitComponent</code> to nullptr.</p> <p><code>World</code> is set initially to <code>nullptr</code> since the \"world\" does not exist during construction time.</p> <p>However, you can construct this class in other places besides constructors.</p> <p>This decision gives you the flexibility to do so.</p> <p>The world is used to receive data from the scene so that we can test for the intersection with the ray.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/#void-addignoredactoraactor-actortoignore","title":"<code>void AddIgnoredActor(AActor* ActorToIgnore);</code>","text":"<p>Description:</p> <p>Ignores the actor provided as the parameter. The parameter accepts a pointer to the actor.</p> <p>Parameters:</p> <ul> <li><code>AActor* ActorToIgnore</code> - pointer to the actor that you want to ignore</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/#void-addignoredactorfstring-nameofactortoignore","title":"<code>void AddIgnoredActor(FString NameOfActorToIgnore);</code>","text":"<p>Description:</p> <p>Ignores the actor provided as the parameter. The parameter accepts the name of the actor. The name of this actor is looked up in the world and ignored. If the actor is not found, a message in the log will inform you about this.</p> <p>Parameters:</p> <ul> <li><code>FString NameOfActorToIgnore</code> - name of the actor that you want to get ignored</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/#void-setworlduworld-worldtoset","title":"<code>void SetWorld(UWorld *WorldToSet)</code>","text":"<p>Parameters:</p> <ul> <li><code>UWorld *WorldToSet</code> - world to be set</li> </ul> <p>Sets the current world that is going to be used during intersection testing. This will overwrite any other stored world inside the <code>World</code> member.</p> <p>This setter was chosen to preserve OOP principles and allow for the construction of this class during the construction time, during which the world is not available.</p> <p>Therefore, before each intersection test, you must ensure that the world is set correctly.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/#bool-tracelinefvector-rayorigin-fvector-raydirection-float-raylength-fvector-outhitpoint-fvector-outhitnormal-int32-outtriangleindex-float-outu-float-outv","title":"<code>bool TraceLine(FVector RayOrigin, FVector RayDirection, float RayLength, FVector&amp; OutHitPoint, FVector&amp; OutHitNormal, int32&amp; OutTriangleIndex, float&amp; OutU, float&amp; OutV)</code>","text":"<p>Description:</p> <p>This function performs a high-precision raycast against static mesh geometry in the world. It first uses Unreal Engine\u2019s built-in line trace to detect if any object is hit along the ray path. If a hit occurs, it retrieves the mesh data of the impacted component and performs a detailed per-triangle intersection test (inside <code>RayTriangleIntersect</code> function) using the M\u00f6ller\u2013Trumbore algorithm to identify the exact triangle hit by the ray.  This is done in parallel to improve performance. If a triangle intersection is found within the ray\u2019s length, it returns the closest hit point and related data. If no precise triangle match is found, it falls back to the default hit information from the line trace.</p> <p>Parameters:</p> <ul> <li><code>RayOrigin</code>- the starting point of the ray</li> <li><code>RayDirection</code>- the direction of the ray</li> <li><code>RayLength</code>- the length of the ray</li> <li><code>OutHitPoint</code>-  stores the location where the ray hits</li> <li><code>OutHitNormal</code>- stores the normal of the hit surface</li> <li><code>OutTriangleIndex</code>- stores the index of the hit triangle (-1 if no triangle was hit)</li> <li><code>OutU, OutV</code>- Barycentric coordinates of the hit point</li> </ul> <p>Returns:</p> <ul> <li><code>True</code> if an intersection is found.</li> <li><code>False</code> otherwise.</li> </ul> <p>All actors that were added via <code>AddIngoredActor</code> method will be ignored.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/#umeshcomponent-getcurrenthitcomponent-const","title":"<code>UMeshComponent* GetCurrentHitComponent() const</code>","text":"<p>Returns the mesh component that was hit by the last ray cast.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/#private-methods","title":"Private methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/#bool-raytriangleintersectconst-fvector-rayorigin-const-fvector-raydirection-const-fvector-vector0-const-fvector-vector1-const-fvector-vector2-float-outdistance-float-outu-float-outv-fvector-outnormal","title":"<code>bool RayTriangleIntersect(const FVector&amp; RayOrigin, const FVector&amp; RayDirection, const FVector&amp; Vector0, const FVector&amp; Vector1, const FVector&amp; Vector2, float&amp; OutDistance, float&amp; OutU, float&amp; OutV, FVector&amp; OutNormal)</code>","text":"<p>Description:</p> <p>Uses the M\u00f6ller-Trumbore algorithm to determine if a ray intersects a specific triangle in a mesh.</p> <p>Parameters:</p> <ul> <li><code>RayOrigin (FVector)</code>-  the starting point of the ray.</li> <li><code>RayDirection (FVector)</code>- the normalized direction vector of the ray.</li> <li><code>Vector0 (FVector)</code>- the first vertex of the triangle.</li> <li><code>Vector1 (FVector)</code>- the second vertex of the triangle.</li> <li><code>Vector2 (FVector)</code>- the third vertex of the triangle.</li> <li><code>OutDistance (float)</code>- the distance from the ray origin to the intersection point (if any).</li> <li><code>OutU (float)</code>- the barycentric coordinate U of the intersection point.</li> <li><code>OutV (float)</code>- the barycentric coordinate V of the intersection point.</li> <li><code>OutNormal (FVector)</code>- the normal of the intersected triangle.</li> </ul> <p>Returns:</p> <ul> <li><code>true</code> if the ray intersects the triangle.</li> <li><code>false</code> otherwise.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/#private-members","title":"Private members","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/#tarrayaactor-ignoredactors","title":"<code>TArray&lt;AActor*&gt; IgnoredActors</code>","text":"<p>Description:</p> <p>Array of the actors that are currently removed</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/#uworld-world","title":"<code>UWorld* World</code>","text":"<p>Description:</p> <p>World in which the ray casting and intersection testing will take place</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/#int32-lasthittriangleindex","title":"<code>int32 LastHitTriangleIndex</code>","text":"<p>Description:</p> <p>Index of the last hit triangle in the static mesh.</p> <p>This is one of debug data for last hit. Those are not used in the current implementation, but can be useful for debugging purposes.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/#fvector-lasthitpoint","title":"<code>FVector LastHitPoint</code>","text":"<p>Description:</p> <p>World-space position of the last successful hit.</p> <p>This is one of debug data for last hit. Those are not used in the current implementation, but can be useful for debugging purposes.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/FRayCaster/#fvector-lasthitnormal","title":"<code>FVector LastHitNormal</code>","text":"<p>Description:</p> <p>Normal of the last successfully hit triangle.</p> <p>This is one of debug data for last hit. Those are not used in the current implementation, but can be useful for debugging purposes.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/How-is-raycasting-done/","title":"Raycasting","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Mesh-Selection/Raycasting/How-is-raycasting-done/#how-is-raycasting-done","title":"How is raycasting done?","text":"<p>Note</p> <p>This class cannot be seen inside the Unreal Editor as it does not inherit any of the classes provided by Unreal Engine. Its main purpose is to abstract away the ray casting logic.</p> <p>As mentioned, we have chosen ray casting as the primary method for selecting which objects the user clicks on.</p> <p>The way it works is that when the user clicks on the screen, we receive coordinates about where the mouse was clicked (in screen space). We then transform this mouse location to world space and calculate the direction from our character to the point where the mouse clicked. This direction is normalized, meaning it has a length of 1. After that, we specify a ray length parameter to determine where the ray should end and then cast the ray from the character\u2019s position towards the calculated endpoint.</p> <p>Previously, the system used basic ray-object collision detection techniques, but we have now implemented the M\u00f6ller-Trumbore algorithm for more precise intersection testing with triangles in the scene. This algorithm allows efficient ray-triangle intersection detection, making it particularly useful for accurate selection of 3D models and surfaces.</p> <p>All of these calculations are performed once the user presses the left mouse button.</p> <p>As you might imagine, all of this is happening in the <code>Click</code> event inside the <code>CPP_User</code> class.</p> <p>The main responsibility of the <code>FRayCaster</code> class is to trace the actual rays through the scene.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodFlowSimulaiton/","title":"Blood flow simulation","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodFlowSimulaiton/#blood-flow-simulation-overview","title":"Blood Flow Simulation Overview","text":"<p>This section describes how the blood flow simulation was developed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodFlowSimulaiton/#mechanism-of-the-blood-flow-simulation","title":"Mechanism of the Blood Flow Simulation","text":"<p>The core mechanism behind the blood flow simulation is that an actor can move smoothly along a predefined path, known as a spline in Unreal Engine. These splines are carefully hand-drawn to trace the most significant veins and arteries within the human body.</p> <p>After creating these splines, we built an actor containing skeletal meshes of arteries and veins. Skeletal meshes allow for animation, which is essential for creating dynamic simulations. To organize the splines, we randomly selected the artery skeletal mesh to serve as the parent for all spline components, resulting in the following structure:</p> <pre><code>CirculatorySystem\n    \u251c\u2500 Veins skeletal mesh \n    \u251c\u2500 Arteries skeletal mesh\n    \u2502   \u251c\u2500 Spline\n    \u2502   \u251c\u2500 Spline\n    \u2502   \u251c\u2500 Spline \n    \u2502   \u2514\u2500 Spline\n</code></pre> <p>This actor inherits from the <code>CPP_BloodFlowSimulation</code> class, allowing it to interact with the simulation manager and respond to simulation events.</p> <p>Following sections are depricated we have decided to use the Niagara particles to visualise the blood, I am keeping it here in case you need to know about this plese, consult new page that explains how niagara is utilised  visit this page</p> <p>To represent individual blood cells, we created a <code>CPP_Cell</code> class. This class includes a static mesh to represent the blood cell, which is why we named it <code>CPP_Cell</code>.</p> <p>Next, we developed a Blueprint that inherits from the <code>CPP_Cell</code> class. For easier maintenance, we implemented the blood cell\u2019s movement along splines within this Blueprint. For more information on this implementation, refer to this video.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodFlowSimulaiton/#spawning-cells","title":"Spawning Cells","text":"<p>In the simulation, the Blueprint version of the cell (<code>BP_Cell</code>) is spawned into the world. If we spawned <code>CPP_Cell</code> instead of <code>BP_Cell</code>, we would need to implement spline movement logic entirely in C++, which would be difficult without the help of Unreal\u2019s timeline feature. </p> <p>To specify the Blueprint version of the blood cell, we added a new member field in <code>CPP_Cell</code> that holds the type of Blueprint to spawn. This Blueprint is assigned in the editor, as the property is set to <code>EditAnywhere</code>.</p> <p>In addition the cells are spawn once during event begin play. If we were to spawn them every time when simulation starts and despawn them when it stops, it would be much more unefficient. </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodFlowSimulaiton/#passing-splines","title":"Passing Splines","text":"<p>The cell itself is unaware of which spline to follow. To specify the spline in <code>CPP_BloodFlowSimulation</code>, we iterate over all the children of the arterial skeletal mesh, as this is where the splines are located. We then retrieve a pointer to the <code>spline componet</code> and pass it the cell via the <code>void SetSpline(TObjectPtr&lt;USplineComponent&gt; spline);</code> function </p> <p>End of depricated section</p> <p>Possible Future Improvement: Currently, splines are created manually using Unreal Engine\u2019s spline creation tool. We trace the paths of arteries and veins, looping them through the heart region to simulate blood flow. While this setup creates a convincing effect, an improvement would be to dynamically generate splines directly from the artery and vein meshes. However, implementing this is challenging, as these meshes are constructed from arrays of vertex positions with no inherent hierarchy. This lack of structure makes it difficult to automatically generate splines that follow the natural flow within these complex anatomical shapes.   We have explored voxelizing the meshes into a sparse voxel octree (SVO) structure. This approach could offer a more structured representation of the arteries and veins, potentially simplifying the process of spline generation by enabling traversal of a hierarchical, voxel-based approximation of the mesh.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/GeneralOverview/","title":"Simulation of Blood Flow","text":"<p>This section explains the architecture of the simulation and the rationale behind creating different C++ classes for inheritance in Blueprints.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/GeneralOverview/#why-simulation","title":"Why Simulation","text":"<p>Nursing students often struggle to visualize how the human body operates. This simulation aims to bring the 3D anatomy model to life, enhancing understanding through interactive learning. By incorporating animations, we will simulate blood behavior and the oxygen transition within the human body, providing a dynamic educational tool. </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/GeneralOverview/#event-driven-design","title":"Event Driven Design","text":"<p>Given that many different components need to interact and transform data, the simplest approach might seem to be directly calling functions across various parts of the simulation. However, this is not feasible in Unreal Engine without obtaining the correct actors and subsequently calling their functions, which can be inefficient.</p> <p>To overcome this issue, we decided to use <code>delegates</code>, which are C++ mechanisms for dispatching events. This will enable us to signal different states of the simulation to various actors, allowing them to respond appropriately.</p> <p>High level overview can be seen in this image:</p> Event graph of simulation <p>The simulation is being triggered from the Simulation button class which is the green button on the top right corner of application. This action is going to drigger Simulation manager's <code>FStartSimulation</code> delegate which will broadcast the event to all of its subscribers. </p> <p>In order to listen to the event in any function we are need to access the <code>SimulationManager</code> class.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/GeneralOverview/#simulation-trigger","title":"Simulation Trigger","text":"<p>The simulation is triggered from the Simulation button class, represented by a green button located in the top right corner of the application. The <code>CPP_StartSimulation</code> button holds all of the logic for the button the <code>WB_SimulationButton</code> is ther to ensure smooth designing experience. When pressed, this button triggers the <code>FStartSimulation</code> or <code>FStopSimulation</code> delegate in the <code>SimulationManager</code> class, which then broadcasts the event to all of its subscribers.</p> <p>To listen to this event in any function, we need to access the <code>SimulationManager</code> class.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/GeneralOverview/#simulation-manager-and-listening-to-the-events","title":"Simulation manager and listening to the events","text":"<p>To access any class instance in Unreal Engine, it typically needs to be placed in the world, and then we must search the world to retrieve the instance we want. This approach, however, can become inefficient over time. To optimize access, the <code>SimulationManager</code> is instantiated directly within the <code>GameMode</code> class. </p> <p>In the file <code>ACPP_GameMode.h</code>, you\u2019ll find a <code>TObjectPtr</code> to the <code>SimulationManager</code> class. Additionally, a helper function in <code>CPP_AnatomyUtils.h</code> was created to retrieve this pointer conveniently.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/GeneralOverview/#example-usage","title":"Example Usage","text":"<pre><code>#include \"CPP_AnatomyUtils.h\"\n\nClass::EventBeginPlay()\n{\n    Super::EventBeginPlay();\n    SimulationManger* simManager = AnatomyUtils::GetSimulationManager(GetWorld());\n}\n</code></pre> <p>CAUTION: this function can only be called in the actors that have access to the World object and ONLY during the <code>EventBeginPlay</code> or <code>NativeConstruct</code>; otherwise, the function will not find the <code>GameMode</code> object, resulting in a segmentation fault and a crash of the editor.</p> <p>Once the simulation manager is retrieved, either in the <code>EventBeginPlay</code> or <code>NativeConstruct</code> event, we can assign functions that will be executed once the simulation manager fires <code>stop/start</code> events.</p> <p>To do this, we have to assign functions to the delegates of the simulation manager class.</p> <pre><code>void Class::BeginPlay(){\n    SimulationManager-&gt;StartSimulationEventDelegate.AddUObject(this, &amp;ACPP_ArteriesBloodFlowSimulation::OnSimulationStart);\n    SimulationManager-&gt;StopSimulationEventDelegate.AddUObject(this, &amp;ACPP_ArteriesBloodFlowSimulation::OnSimulationEnd);\n}\n</code></pre> <p>CAUTION: this can only be done inside the event begin play or native construct otherwise the <code>this</code> is <code>nullptr</code></p> <p>Once the functions are assigned every time the Simulation manger broadcasts the event the functions assigned to it are exectued. </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/GeneralOverview/#deletion-of-added-functions","title":"Deletion of added functions","text":"<p>Due to the reseons unrelevant to explain here unreal engine will cause crash since functions added through <code>AddUObject</code> methods were not deleted. Therefore we have to handle it. To do this you have to overwrite method that is responsible for deleting the acctor. Examples of such methods are <code>void NativeDesctructor()</code> or <code>void EventDestroy()</code>. To remove the function from the delegete you can call this method on the Simulation manger delegate.</p> <pre><code>void Class::NativeDestructor()\n{\n  Super::NativeDestructor();\n    SimulationManager-&gt;StartSimulationEventDelegate.RemoveUObject(this, &amp;ACPP_ArteriesBloodFlowSimulation::OnSimulationStart);\n}\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/GeneralOverview/#starting-the-animations-on-simualtion-button","title":"Starting the animations on simualtion button","text":"<p>Since each individual animation blueprint prefixed with <code>BPA_</code> is inherited from its own C++ class, and each class is further inherited from <code>CPP_BaseAnimation</code>, we can start and stop all animations simultaneously once the simulation manager dispatches the start simulation event. </p> <p>If a specific human body animation requires modifications such as a delay or other adjustments these changes can be made in the base class of that animation blueprint or in the animation blueprint itself. </p> <p>For more details see Animation classs specification</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/","title":"Blood framework","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#blood-particle-system-framework","title":"Blood Particle System Framework","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#overview","title":"Overview","text":"<p>There are multiple actors representing blood in the simulation, such as: - Blood squirting from the body during hypervolemic shock. - Blood particles following specific paths.</p> <p>All these actors are connected to the Simulation Manager and must listen to various events dispatched by it.</p> <p>To enforce the DRY (Don't Repeat Yourself) principle, a small framework was created. This framework uses inheritance to define a base class for all blood-related actors, called <code>ACPP_BloodParticleSystemBase</code>. This base class is then used as the foundation for derived classes, such as:</p> <ul> <li> <p><code>CPP_BloodPathSystem</code></p> </li> <li> <p><code>CPP_RupturedArtery</code></p> </li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#specifications-of-acpp_bloodparticlesystembase","title":"Specifications of <code>ACPP_BloodParticleSystemBase</code>","text":"<p>The base class provides: - A unified interface for handling simulation events related to blood particle systems.</p> <ul> <li> <p>Simplified management of parameters and properties for blood-related actors.</p> </li> <li> <p>Easy integration with the simulation manager for event handling.</p> </li> </ul> <p>Derived classes like <code>CPP_BloodPathSystem</code> and <code>CPP_RupturedArtery</code> inherit the functionalities of the base class, reducing redundancy and promoting clean, maintainable code.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#class-description","title":"Class Description","text":"<p>ACPP_BloodParticleSystemBase: </p> <p>This is a base class designed for handling blood-related particle systems in the Unreal Engine. It provides virtual methods for interaction with the simulation manager, ensuring that inherited classes can seamlessly integrate with simulation functionalities. The class simplifies the management and propagation of blood system parameters, allowing global changes to be reflected across all associated particle systems.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#key-features","title":"Key Features:","text":"<ul> <li>Provides a framework for interacting with the simulation manager.</li> <li>Simplifies parameter updates across multiple blood-related components.</li> <li>Encourages inheritance for custom blood particle system implementations.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#acpp_bloodparticlesystembase","title":"<code>ACPP_BloodParticleSystemBase()</code>","text":"<p>Description: The default constructor that sets initial values for the actor's properties.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#void-initucpp_simulationmanager-simmanager-uniagarasystem-blood","title":"<code>void Init(UCPP_SimulationManager* SimManager, UNiagaraSystem* Blood)</code>","text":"<p>Description: Initializes the blood particle system with a reference to the simulation manager and a Niagara system for blood particles.  </p> <p>Parameters: - <code>SimManager</code>: A pointer to the simulation manager that manages the simulation logic. - <code>Blood</code>: A pointer to the Niagara system representing blood particles.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#ufunctionblueprintcallable-category-simulationbloodflow-void-initucpp_simulationmanager-simmanager","title":"<code>UFUNCTION(BlueprintCallable, Category = \"Simulation|BloodFlow\") void Init(UCPP_SimulationManager* SimManager)</code>","text":"<p>Description: A Blueprint-callable method to initialize the particle system with a reference to the simulation manager.  </p> <p>Parameters: - <code>SimManager</code>: A pointer to the simulation manager.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#virtual-void-tickfloat-deltatime","title":"<code>virtual void Tick(float DeltaTime)</code>","text":"<p>Description: Called every frame to update the actor.  </p> <p>Parameters: - <code>DeltaTime</code>: The time elapsed since the last frame.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#virtual-void-beginplay","title":"<code>virtual void BeginPlay()</code>","text":"<p>Description: Called when the game starts or the actor is spawned.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#virtual-void-handlesimulationstart","title":"<code>virtual void HandleSimulationStart()</code>","text":"<p>Description: Handles logic to execute when the simulation starts. This method is intended to be overridden in derived classes.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#virtual-void-handlesimulationend","title":"<code>virtual void HandleSimulationEnd()</code>","text":"<p>Description: Handles logic to execute when the simulation ends. This method is intended to be overridden in derived classes.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#virtual-void-handlesimulationupdatefsimulationslidebarsparameters-updatedparameters","title":"<code>virtual void HandleSimulationUpdate(FSimulationSlideBarsParameters* UpdatedParameters)</code>","text":"<p>Description: Handles updates to the simulation parameters.  </p> <p>Parameters: - <code>UpdatedParameters</code>: A pointer to the updated simulation parameters.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#virtual-void-handlediagnosischagneucpp_diagnosis-selecteddiagnosis","title":"<code>virtual void HandleDiagnosisChagne(UCPP_Diagnosis&amp; selectedDiagnosis)</code>","text":"<p>Description: Handles changes to the selected diagnosis.  </p> <p>Parameters: - <code>selectedDiagnosis</code>: A reference to the updated diagnosis.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#properties","title":"Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#protected-properties","title":"Protected Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#uscenecomponent-root","title":"<code>USceneComponent* Root</code>","text":"<p>Description: The root scene component for the actor.  </p> <p>Access Modifier: <code>VisibleAnywhere</code> </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#uniagaracomponent-bloodparticlecomponent","title":"<code>UNiagaraComponent* BloodParticleComponent</code>","text":"<p>Description: The Niagara component responsible for handling blood particle effects.  </p> <p>Access Modifier: <code>VisibleAnywhere</code> </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#uniagarasystem-bloodniagarasystem","title":"<code>UNiagaraSystem* BloodNiagaraSystem</code>","text":"<p>Description: The Niagara system used to define the blood particle effects.  </p> <p>Access Modifier: <code>EditAnywhere</code> </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#ucpp_simulationmanager-simulationmanager","title":"<code>UCPP_SimulationManager* SimulationManager</code>","text":"<p>Description: A pointer to the simulation manager that oversees the simulation logic.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#notes","title":"Notes","text":"<ul> <li>Inheritance Requirement:   Classes inheriting from <code>ACPP_BloodParticleSystemBase</code> must include Unreal Engine-specific macros (<code>GENERATED_BODY()</code>, <code>UCLASS</code>, etc.).  </li> <li>This class provides a centralized mechanism for managing particle systems related to blood, making it highly reusable and maintainable.  </li> <li>Ensure proper initialization by calling <code>Init()</code> before using the particle system.  </li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/Blood%20FrameWork/#usage","title":"Usage","text":"<p>To use this class: 1. Inherit from <code>ACPP_BloodParticleSystemBase</code> for any custom blood particle system implementation. 2. Override the virtual methods (<code>HandleSimulationStart</code>, <code>HandleSimulationEnd</code>, etc.) to define specific behaviors. 3. Initialize the system using the <code>Init()</code> method, providing references to the simulation manager and the Niagara system.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/HowBloodSimulationWorks/","title":"Blood Simulation","text":"<p>NOTE: This section assumes you are at least somewhat familiar with the inner workings of the application and the Niagara system.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/HowBloodSimulationWorks/#general-idea","title":"General Idea","text":"<p>This section discusses how the blood simulation is created and designed to account for various parameters and user selections.</p> <p>The idea of blood in this project is straightforward. Blood is defined as a particle system using Niagara. There are countless resources online that demonstrate how to work with it. Essentially, you can define various parameters of the particle system (e.g., speed, velocity, and gravity). By clicking the + button in the visual Niagara editor, you can set these parameters, and Unreal Engine (UE) handles the rest. This results in a working particle simulation that can collide with the environment.</p> <p>The core functionality relies on a circulatory system (defined in <code>BP_CirculatorySystem</code>) that includes: - Picker mesh for veins  - Picker mesh for arteries - A set of splines representing arteries and veins - Rendering mesh for arteries - Rendering mesh for veins </p> <p>For our purposes, the set of splines is of primary interest. To make the particles follow the spline, we retrieve the spline and pass it to the Niagara system so the particles know their path. This is achieved by assigning the Niagara particle system as a child of the spline, as shown below:</p> <pre><code>RootComponent\n -&gt; SplineComponent\n    -&gt; NiagaraSystemComponent\n</code></pre> <p>To make the Niagara system recognize this structure, we set up a User-Defined Parameter of type <code>Spline</code>.</p> User-Defined Parameters in the Niagara System Editor"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/HowBloodSimulationWorks/#user-parameters","title":"User Parameters","text":"<p>With the help of these parameters, we can not only pass splines that the blood should follow but also change the behavior of the Niagara system at runtime. For example, this allows us to modify the speed of the blood particles dynamically.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/HowBloodSimulationWorks/#making-particles-follow-the-spline","title":"Making Particles Follow the Spline","text":"<p>This process is simple. We define that the simulation should be altered using a custom blueprint. This blueprint takes the age of the particle and moves it along the spline based on its age. Age was chosen as it increases consistently, which makes it suitable for driving the particle along the curve.</p> <p>This is illustrated in the figure below:</p> User-Defined Parameters in the Niagara System Editor"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/HowBloodSimulationWorks/#spawning-particles","title":"Spawning Particles","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/HowBloodSimulationWorks/#retrieving-splines","title":"Retrieving Splines","text":"<p>Retrieving splines is not as straightforward as one might expect. To spawn particles, we need to define a spline that can be retrieved from <code>BP_CirculatorySystem</code>. Due to the constraints of Unreal Engine, it is impossible to share components between different actors. For instance, if one actor manages the particle system and another contains the splines, passing the spline directly is problematic.</p> <p>When we pass the spline component as an argument, it becomes <code>null</code> for reasons currently unknown. A new spline is then created from scratch, resulting in a straight line.</p> <p>To address this, we duplicate the spline using C++ and copy the point data from the original spline to the new one. This ensures the splines defined in <code>BP_CirculatorySystem</code> can be used with the Niagara system.</p> <p>The implementation of this solution is shown below:</p> <pre><code>void ACPP_BloodPathSystem::Init(UCPP_SimulationManager* SimManager, USplineComponent* Spline,\n    UNiagaraSystem* Blood)\n{\n    // Call Init of the base class\n    ACPP_BloodParticleSystemBase::Init(SimManager, Blood);\n\n    if (Spline)\n    {\n        // Since components cannot be shared between actors, recreate the component manually\n        TArray&lt;FVector&gt; SplinePoints;\n        for (int i = 0; i &lt; Spline-&gt;GetNumberOfSplinePoints(); i++)\n        {\n            SplinePoints.Push(Spline-&gt;GetSplinePointAt(i, ESplineCoordinateSpace::World).Position);\n        }\n\n        SplineToFollow-&gt;SetSplinePoints(SplinePoints, ESplineCoordinateSpace::World);\n        SetActorScale3D(FVector(2.0f, 2.0f, 2.0f));\n\n        BloodNiagaraSystem = Blood;\n\n        BloodParticleComponent = UNiagaraFunctionLibrary::SpawnSystemAttached(\n            BloodNiagaraSystem, SplineToFollow, NAME_None, FVector(0.f), FRotator(0.f),\n            EAttachLocation::KeepRelativeOffset, true, false\n        );\n    }\n}\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/BloodSimulation/HowBloodSimulationWorks/#spawning-actors","title":"Spawning Actors","text":"<p>The particle system is represented by an actor structured as follows:</p> <pre><code>=====================================================================\n *          ACPP_BloodPathSystem\n *\n * Root # default\n * |_Spline (spline to follow, supplied by BP_CirculatorySystem)\n *   |_ NiagaraSystem (blood visualization)\n *\n=====================================================================\n</code></pre> <p>This actor is not manually placed in the world. Instead, <code>CPP_BloodFlowSimulation</code> iterates over the splines it contains and creates an actor for each spline. All logic for <code>ACPP_BloodPathSystem</code> is encapsulated within the actor itself.</p> <pre><code>// BeginPlay of ACPP_ArteriesBloodFlowSimulation class\n\n// Get all splines from skeletal mesh children\nTArray&lt;USceneComponent*&gt; TempSplines;\nArteriesSkeletalMesh-&gt;GetChildrenComponents(false, TempSplines);\nfor (auto&amp; spline : TempSplines)\n{\n    // Cast the spline from USceneComponent to USplineComponent\n    if (auto s = Cast&lt;USplineComponent&gt;(spline))\n    {\n        // Create an actor representing blood and store it for future reference\n        SpawnedBloodParticles.Add(SpawnBloodParticle(s));\n        UE_LOG(LogTemp, Display, TEXT(\"Spline in the arteries component was found\"));\n    }\n}\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/","title":"\ud83e\udec1 Breathing Dot Indicators","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/#overview","title":"Overview","text":"<p>Breathing Dots are dynamic UI widgets that visually mark diagnosis-specific anatomical points (e.g., a faint wrist pulse during Cardiogenic Shock). They: - Animate with a subtle \"breathing\" pulse. - Follow a 3D socket on the anatomical model. - Display an info panel on hover or click with title, description, and optional image. - Are spawned dynamically based on diagnosis configuration, and removed on diagnosis change.</p> <p>They are implemented via: - A C++ data class: <code>UShockIndicator</code> - A Blueprint widget: <code>UBreathingDotWidget</code> (WBP_BreathingDot) - Spawned/managed by: <code>UCPP_SimulationManager</code></p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/#system-architecture","title":"\ud83e\uddec System Architecture","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/#data-source-ushockindicator","title":"Data Source: <code>UShockIndicator</code>","text":"<p>Each indicator is described by:</p> Field Description <code>SocketName</code> Bone/socket name the indicator should follow (e.g. <code>\"Wrist\"</code>) <code>Title</code> Title text for the info panel <code>Description</code> Tooltip-style detailed description <code>Image</code> Optional image/texture shown in the info panel <p>Each <code>UCPP_Diagnosis</code> has an array: <pre><code>TArray&lt;UShockIndicator*&gt; Indicators;\n</code></pre></p> <p>These are registered during diagnosis building using:</p> <pre><code>.AddIndicator(\"Wrist\", \"Pulse\", \"Faint pulse detected\", IconTexture)\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/#runtime-spawning-logic","title":"Runtime Spawning Logic","text":"<p>Inside <code>UCPP_SimulationManager::ChangeDiagnosis()</code>:</p> <ol> <li>All previously spawned breathing dots are destroyed.</li> <li>The <code>Indicators</code> array from the selected diagnosis is retrieved.</li> <li>For each <code>UShockIndicator</code>, a <code>UBreathingDotWidget</code> is:</li> <li>Created dynamically</li> <li>Anchored to the corresponding bone/socket</li> <li>Initialized via <code>SetDescription()</code> or <code>InitializeFromIndicator()</code> using <code>ProcessEvent</code></li> <li>Tracked in a local <code>TArray&lt;UUserWidget*&gt; SpawnedWidgets</code> for cleanup</li> </ol>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/#widget-ubreathingdotwidget","title":"Widget: <code>UBreathingDotWidget</code>","text":"<p>This UMG Blueprint handles: - 3D following: Converts world position of the socket to screen position. - Visual pulsing: Looping animation to draw user attention. - Info Panel logic:   - Tooltip-style display on hover or click   - Receives title, description, and image from the indicator</p> <p>Functions called from C++: - <code>InitializeFromIndicator()</code> or <code>SetDescription(FString Title, FString Desc, UTexture2D* Image)</code> - Toggle visibility or appearance based on current diagnosis</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/#example-builder-usage","title":"\ud83d\udd01 Example Builder Usage","text":"<p>Here\u2019s how a diagnosis defines its breathing dots:</p> <pre><code>DiagnosisBuilder(this)\n  .SetName(\"Cardiogenic Shock\")\n  .SetDescription(\"Heart failure causing reduced blood circulation\")\n  .AddIndicator(\"Wrist\", \"Weak Pulse\", \"Pulse is faint and irregular\", WristIcon)\n  .AddIndicator(\"Chest\", \"Chest Discoloration\", \"Bluish skin near heart\", ChestIcon)\n  .Build();\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/#integration-map","title":"\ud83c\udfaf Integration Map","text":"Class Responsibility <code>UShockIndicator</code> Stores metadata for one indicator <code>UCPP_Diagnosis</code> Holds multiple indicators <code>UCPP_SimulationManager</code> Spawns/removes widgets based on diagnosis <code>UBreathingDotWidget</code> UMG widget shown on-screen for each dot"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/#debugging-breathing-dots","title":"\ud83e\uddea Debugging Breathing Dots","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/#if-dots-dont-appear","title":"If dots don\u2019t appear:","text":"<ul> <li>\u2705 Check that <code>SocketName</code> exists on the skeletal mesh: <pre><code>SkeletalMesh-&gt;DoesSocketExist(FName(\"Wrist\"))\n</code></pre></li> <li>\u2705 Log dot creation in C++: <pre><code>UE_LOG(LogTemp, Warning, TEXT(\"Spawning indicator for socket %s\"), *SocketName.ToString());\n</code></pre></li> <li>\u2705 Use <code>DrawDebugSphere()</code> to confirm socket world location is valid.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/#if-info-panel-doesnt-show","title":"If info panel doesn\u2019t show:","text":"<ul> <li>\u2705 Confirm that <code>SetDescription()</code> or <code>InitializeFromIndicator()</code> is called.</li> <li>\u2705 Use breakpoints inside the Blueprint widget.</li> <li>\u2705 Ensure image is valid or pass <code>nullptr</code>.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/#advanced-features-customization","title":"\ud83d\udd25 Advanced Features &amp; Customization","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/#add-conditional-visibility","title":"Add Conditional Visibility","text":"<p>Inside <code>UBreathingDotWidget</code>, use Blueprint logic: - Only show info panel when hovered. - Auto-hide based on diagnosis-specific rules. - Support alternate states (e.g., blinking, fading).</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/#override-appearance-per-dot","title":"Override Appearance Per Dot","text":"<p>Each indicator could eventually have: - A custom color theme - A different pulse rate or animation - Even contextual behavior depending on vital stats (BPM, blood volume)</p> <p>Just extend <code>UShockIndicator</code> with new properties like:</p> <pre><code>FLinearColor DotColor;\nfloat PulseRateOverride;\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Keep socket names consistent with the skeletal mesh you're targeting.</li> <li>Group related indicators close together in the builder for easy debugging.</li> <li>Don\u2019t hardcode dot spawn logic \u2014 always use <code>Indicators</code> array.</li> <li>Use <code>nullptr</code> in <code>AddIndicator()</code> for optional image to avoid crashing.</li> <li>Remove or destroy all dot widgets when diagnosis changes.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Breathing-Dots/#example-use-case-cardiogenic-shock","title":"\ud83e\uddf1 Example Use Case: Cardiogenic Shock","text":"<pre><code>// In DiagnosisRegistery.cpp\nDiagnosisBuilder(this)\n  .SetName(\"Cardiogenic Shock\")\n  .AddIndicator(\"Wrist\", \"Pulse\", \"Faint wrist pulse detected\", WristIcon)\n  .AddIndicator(\"Face\", \"Pale Skin\", \"Skin tone loss near eyes\", nullptr)\n  .SetBehavior(NewObject&lt;UCardiogenicShockBehavior&gt;(this))\n  .Build();\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/","title":"\ud83e\uddea Debugging &amp; Extension Tips","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/#overview","title":"Overview","text":"<p>This section provides practical guidance on how to debug and expand the Shock Simulation system safely and effectively \u2014 whether you're working in C++, Blueprints, or both.</p> <p>The architecture is modular and scalable but also layered. This means debugging requires you to understand where data flows and where it breaks. Extension must respect ownership, lifecycles, and modular separation of logic.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/#general-debugging-workflow","title":"\ud83d\udd0d General Debugging Workflow","text":"<p>When something doesn\u2019t work (e.g. dots don\u2019t show up, FX doesn\u2019t spawn, diagnosis logic fails), try this top-down approach:</p> <ol> <li>Is the right diagnosis being triggered?</li> <li>Check <code>SimulationManager::ChangeDiagnosis()</code></li> <li> <p>Use <code>UE_LOG()</code> to confirm <code>SelectedDiagnosis-&gt;GetName()</code></p> </li> <li> <p>Does the diagnosis have the right components?</p> </li> <li> <p>Use breakpoints/logs to confirm:</p> <ul> <li><code>Indicators</code> array populated</li> <li><code>RuntimeBehavior</code> is not null</li> <li><code>FX</code> list is not empty</li> </ul> </li> <li> <p>Is the component being spawned?</p> </li> <li>Breathing Dots: <code>UBreathingDotWidget</code></li> <li>Niagara FX: via socket positions</li> <li> <p>Temp Labels: <code>AFloatingTemperatureLabel</code></p> </li> <li> <p>If it's a UI issue:</p> </li> <li>Use Blueprint breakpoints in the widget</li> <li>Confirm <code>SetDescription()</code> is called</li> <li> <p>Log Widget creation (<code>UE_LOG()</code> or use <code>PrintString()</code>)</p> </li> <li> <p>If it\u2019s a 3D issue:</p> </li> <li>Use <code>DrawDebugSphere()</code> or <code>DrawDebugString()</code> to visualize positions</li> </ol>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/#logging-debugging-utilities","title":"\ud83e\udde0 Logging &amp; Debugging Utilities","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/#c-logging","title":"C++ Logging","text":"<pre><code>UE_LOG(LogTemp, Warning, TEXT(\"FX Spawned at: %s\"), *SpawnLocation.ToString());\nUE_LOG(LogTemp, Display, TEXT(\"Diagnosis: %s\"), *Selected-&gt;GetName());\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/#blueprint-debugging","title":"Blueprint Debugging","text":"<p>Use: - <code>PrintString</code> nodes - Breakpoints in:   - <code>UBreathingDotWidget</code>   - <code>WBP_TemperatureDisplay</code>   - <code>UCPP_DiagnosisDropDownMenu</code></p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/#tips-for-common-problems","title":"\ud83c\udfaf Tips for Common Problems","text":"\ud83e\uddea Problem \u2705 Solution Indicators not showing Socket name typo? Mesh doesn't contain it? Use <code>DoesSocketExist()</code> FX not appearing Niagara System valid? Socket exists? FX destroyed too early? Widget not displaying Widget created? Anchor within screen bounds? Temp label not visible Is display enabled? Core/skin sockets defined? OnEnter() not called Is <code>SetBehavior()</code> actually set in the builder? Crash on change diagnosis Null pointer? FX or indicator called before fully built?"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/#extension-tips","title":"\ud83d\udee0 Extension Tips","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/#adding-new-behavior-logic","title":"\ud83d\udd01 Adding New Behavior Logic","text":"<p>Create a new subclass of <code>UShockBehavior</code>, then plug it into your diagnosis:</p> <pre><code>class UMyCustomShockBehavior : public UShockBehavior {\n  virtual void OnEnter() override { ... }\n  virtual void Tick(float DeltaTime) override { ... }\n  virtual void OnExit() override { ... }\n};\n</code></pre> <pre><code>DiagnosisBuilder(this)\n  .SetBehavior(NewObject&lt;UMyCustomShockBehavior&gt;(this))\n  .Build();\n</code></pre> <p>This allows per-frame logic unique to that diagnosis.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/#add-custom-niagara-fx","title":"\ud83c\udf2c\ufe0f Add Custom Niagara FX","text":"<ol> <li>Create Niagara FX in Content Browser.</li> <li>Add to the builder:</li> </ol> <pre><code>.AddEffect(NS_PulseFX, true, FName(\"spine_03\"))\n</code></pre> <ol> <li>FX will automatically:</li> <li>Spawn on diagnosis enter</li> <li>Be destroyed on diagnosis change</li> </ol> <p>Use <code>FDiagnosisEffect</code> to customize:</p> <pre><code>FDiagnosisEffect(NS_SweatFX, true, \"Forehead\");\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/#add-new-indicator-type","title":"\ud83d\udccc Add New Indicator Type","text":"<p>If you want to make a new type of UI indicator (e.g. icon overlay, status chip):</p> <ol> <li>Create a new UMG widget (e.g. <code>WBP_AlertIcon</code>)</li> <li>Make a new data class (e.g. <code>UCustomShockIndicator</code>)</li> <li>Extend spawn logic in <code>SimulationManager</code>:</li> <li>Use <code>WidgetComponent-&gt;SetWidgetClass()</code></li> <li>Set data via Blueprint function call (<code>SetData()</code>)</li> </ol>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/#advanced-debugging-runtime-visuals","title":"\ud83e\udde0 Advanced Debugging (Runtime Visuals)","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/#debug-niagara-locations","title":"Debug Niagara Locations","text":"<pre><code>DrawDebugSphere(GetWorld(), Mesh-&gt;GetSocketLocation(SocketName), 10.0f, 12, FColor::Red, false, 5.0f);\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/#trace-tick-lifecycle","title":"Trace Tick Lifecycle","text":"<p>If <code>Tick()</code> in <code>UShockBehavior</code> isn\u2019t being called: - Check <code>PrimaryComponentTick.bCanEverTick = true</code> - Ensure you're calling <code>RegisterComponent()</code> on it - Confirm <code>SimulationManager</code> isn\u2019t manually skipping it</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/#tools-shortcuts","title":"\ud83e\uddea Tools &amp; Shortcuts","text":"Tool Use Case <code>UE_LOG()</code> General C++ debug output <code>DrawDebugSphere</code> Visualize positions for FX and UI Blueprint Logs Test data passed to widgets Live Blueprint Debugger Step through widget lifecycle Output Log Trace startup and runtime events"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Debugging-Extension-Tips/#dev-recommendations","title":"\ud83e\uddf1 Dev Recommendations","text":"<ul> <li>Centralize all changes inside DiagnosisBuilder to avoid logic leaks.</li> <li>Prefer data-driven spawning over hardcoded <code>if (DiagnosisType == X)</code> checks.</li> <li>When extending UI, keep logic in widgets and only inject data from C++.</li> <li>Clean up all spawned actors and widgets in <code>ChangeDiagnosis()</code> to avoid state leaks.</li> <li>Add yourself to the top of each diagnosis file (e.g., <code>// Modified by Kristers G. on 2025-06-17</code>)</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Fx-and-Materials/","title":"\ud83d\udca5 FX and Materials","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Fx-and-Materials/#overview","title":"Overview","text":"<p>The FX system handles all visual feedback for shock symptoms \u2014 such as: - Sweating - Pale or discolored skin - Pulse bursts - Heat wave distortions - Blood particle suppression or restart</p> <p>Each FX component is spawned dynamically based on the selected diagnosis, and cleared automatically when the diagnosis changes. FX can be easily extended, reused, and targeted to specific anatomical regions using sockets.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Fx-and-Materials/#system-architecture","title":"\ud83e\uddf1 System Architecture","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Fx-and-Materials/#fx-are-defined-in-fdiagnosiseffect","title":"FX are defined in <code>FDiagnosisEffect</code>","text":"<p>Each diagnosis can contain multiple effects:</p> <pre><code>TArray&lt;FDiagnosisEffect&gt; Effects;\n</code></pre> <p>Each <code>FDiagnosisEffect</code> holds: - <code>UNiagaraSystem* NiagaraEffect</code> \u2014 The FX to spawn - <code>bool bAutoDestroy</code> \u2014 Should it clean up automatically - <code>FName TargetSocket</code> \u2014 Where on the mesh it attaches</p> <p>These effects are added using the diagnosis builder:</p> <pre><code>.AddEffect(NS_SweatFX, true, FName(\"Forehead\"))\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Fx-and-Materials/#niagara-fx-spawn-logic","title":"Niagara FX Spawn Logic","text":"<p>All effects are spawned inside:</p> <pre><code>UCPP_SimulationManager::ChangeDiagnosis()\n</code></pre> <ol> <li>Previous Niagara FX actors are destroyed.</li> <li>New FX are retrieved from the <code>Effects</code> array of the diagnosis.</li> <li>For each FX:</li> <li>The mesh socket location is calculated.</li> <li>A <code>UNiagaraComponent</code> is spawned at that location.</li> <li>The Niagara system is assigned and activated.</li> </ol> <p>Stored components are cached for cleanup:</p> <pre><code>TArray&lt;UNiagaraComponent*&gt; SpawnedFX;\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Fx-and-Materials/#custom-materials-for-symptoms","title":"\ud83c\udfa8 Custom Materials for Symptoms","text":"<p>Some shock types use material parameter collections or dynamic material instances to drive visual feedback, such as: - Skin pallor or flushing - Temperature shimmer - Dehydration effects</p> <p>To use: 1. Create a Material Parameter Collection (MPC) in Unreal. 2. Set it via C++ using: <pre><code>UMaterialParameterCollectionInstance* MPC = GetWorld()-&gt;GetParameterCollectionInstance(MyCollection);\nMPC-&gt;SetScalarParameterValue(FName(\"SkinPaleness\"), 0.6f);\n</code></pre></p> <ol> <li>Connect that parameter to your material nodes (e.g. <code>Base Color</code>, <code>Opacity</code>).</li> </ol> <p>Optional: Blend two skin materials using a parameter curve or diagnosis duration.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Fx-and-Materials/#example-setup-in-diagnosisbuilder","title":"\ud83d\udd27 Example Setup in DiagnosisBuilder","text":"<pre><code>DiagnosisBuilder(this)\n  .SetName(\"Distributive Shock\")\n  .AddEffect(NS_SweatFX, true, FName(\"Forehead\"))\n  .AddEffect(NS_PulseFX, true, FName(\"Wrist\"))\n  .Build();\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Fx-and-Materials/#debugging-fx","title":"\ud83e\uddea Debugging FX","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Fx-and-Materials/#verify-spawned-locations","title":"Verify Spawned Locations","text":"<p>Use debug helpers to confirm socket positions:</p> <pre><code>DrawDebugSphere(GetWorld(), SkeletalMesh-&gt;GetSocketLocation(SocketName), 10.0f, 12, FColor::Blue, false, 5.0f);\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Fx-and-Materials/#check-fx-reference","title":"Check FX Reference","text":"<ul> <li>Is the <code>UNiagaraSystem*</code> asset valid in the builder?</li> <li>Has it been deleted or renamed?</li> <li>Try logging FX names:</li> </ul> <pre><code>UE_LOG(LogTemp, Warning, TEXT(\"Spawning FX: %s\"), *FX.NiagaraEffect-&gt;GetName());\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Fx-and-Materials/#confirm-niagara-activation","title":"Confirm Niagara Activation","text":"<ul> <li>Check that <code>NiagaraComponent-&gt;Activate(true)</code> is being called</li> <li>Set looping duration inside the Niagara System if needed</li> <li>Add Niagara debug components to your level (optional)</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Fx-and-Materials/#performance-considerations","title":"\ud83d\udcc8 Performance Considerations","text":"Concern Strategy Too many FX spawning Pool Niagara components instead of respawning each time FX doesn\u2019t clean up Use <code>bAutoDestroy = true</code> OR manually call <code>DestroyComponent()</code> Material blending slow Use shader LODs or pre-baked materials for critical systems"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Fx-and-Materials/#tips-for-adding-new-effects","title":"\ud83d\udee0 Tips for Adding New Effects","text":"<ol> <li>Design your Niagara effect in the Content Browser</li> <li>Add it to a diagnosis with: <pre><code>.AddEffect(NS_CustomFX, true, FName(\"spine_03\"))\n</code></pre></li> <li>Confirm socket exists on the anatomical mesh</li> <li>Use short looping FX unless the diagnosis has <code>Tick()</code> logic that modifies it over time</li> </ol> <p>Optional: Wrap logic inside <code>UShockBehavior::OnEnter()</code> or <code>Tick()</code> to enable time-based parameter changes.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Fx-and-Materials/#advanced-fx-ideas","title":"\ud83e\udde9 Advanced FX Ideas","text":"<ul> <li>Sweat FX that becomes heavier based on blood loss</li> <li>Temperature shimmer that increases with fever</li> <li>Pulsing FX synchronized with heart rate</li> <li>Color overlays based on simulated oxygen saturation</li> <li>Localized particle FX only for left arm/right leg/etc.</li> </ul> <p>Combine these with indicator logic or runtime simulation parameters to create layered effects.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/How-Everything-Connects-At-Runtime/","title":"\u2699\ufe0f How Everything Connects at Runtime","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/How-Everything-Connects-At-Runtime/#overview","title":"\ud83e\udde0 Overview","text":"<p>This document explains how all systems \u2014 diagnosis selection, behavior execution, indicator spawning, FX, temperature feedback, and parameter updates \u2014 are coordinated at runtime.</p> <p>The central class is <code>UCPP_SimulationManager</code>. It owns the simulation state and delegates specific responsibilities to modular subsystems: - <code>UCPP_Diagnosis</code> for static diagnosis data - <code>UShockBehavior</code> for diagnosis-specific logic - Niagara FX, breathing dot indicators, and floating temperature displays for visual output</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/How-Everything-Connects-At-Runtime/#initialization-phase","title":"\ud83e\udde9 Initialization Phase","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/How-Everything-Connects-At-Runtime/#1-ucpp_simulationmanagerbeginplay","title":"1. <code>UCPP_SimulationManager::BeginPlay()</code>","text":"<ul> <li>Instantiates <code>UDiagnosisRegistery</code></li> <li>Calls <code>Initialize(this)</code> to ensure correct UObject ownership</li> <li>Diagnosis Registery builds all available diagnoses using <code>DiagnosisBuilder</code></li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/How-Everything-Connects-At-Runtime/#2-udiagnosisregisterybuilddiagnosislist","title":"2. <code>UDiagnosisRegistery::BuildDiagnosisList()</code>","text":"<p>For each diagnosis: - Sets metadata: name, type, description - Sets default simulation values via <code>FSimulationSlideBarsParameters</code> - Registers Niagara FX: <code>.AddEffect()</code> - Registers indicators: <code>.AddIndicator()</code> - Enables temperature feedback: <code>.SetTemperatureDisplay()</code> - Registers behavior logic: <code>.SetBehavior(NewObject&lt;UYourShockBehavior&gt;())</code></p> <p>Example:</p> <pre><code>DiagnosisBuilder(this)\n  .SetName(\"Cardiogenic Shock\")\n  .SetSimulationParameters(Params)\n  .AddEffect(NS_Sweat, true, \"Forehead\")\n  .AddIndicator(\"Wrist\", \"Pulse\", \"Weak pulse\", Icon)\n  .SetBehavior(NewObject&lt;UCardiogenicShockBehavior&gt;(this))\n  .SetTemperatureDisplay(true, 36.5f, 30.0f, \"spine_03\", \"Wrist\")\n  .Build();\n</code></pre> <p>These instances are stored in a <code>TArray&lt;TUniquePtr&lt;UCPP_Diagnosis&gt;&gt; DiagnosisList</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/How-Everything-Connects-At-Runtime/#changing-diagnosis","title":"\ud83d\udd01 Changing Diagnosis","text":"<p>Called by UI or developer logic to switch medical scenarios.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/How-Everything-Connects-At-Runtime/#1-ucpp_simulationmanagerchangediagnosisediagnosistype-newdiagnosis","title":"1. <code>UCPP_SimulationManager::ChangeDiagnosis(EDiagnosisType NewDiagnosis)</code>","text":"<ul> <li>Calls <code>CurrentShockBehavior-&gt;OnExit()</code> to clean up:</li> <li>Destroyed FX components</li> <li>Cleared indicators</li> <li>Removed floating labels</li> <li>Retrieves new <code>UCPP_Diagnosis*</code> from registery</li> <li>Stores it in <code>ActiveDiagnosis</code></li> <li>Assigns its <code>RuntimeBehavior</code> as the new <code>CurrentShockBehavior</code></li> <li>Calls <code>CurrentShockBehavior-&gt;OnEnter(ActiveDiagnosis, this)</code>:</li> <li>FX are spawned based on diagnosis</li> <li>Pulse timers or parameter logic begin</li> <li>Floating temperatures shown if enabled</li> <li>Spawns breathing dot widgets via <code>SpawnIndicators()</code></li> <li>Broadcasts <code>FChangeDiagnosis</code> delegate (for UI updates)</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/How-Everything-Connects-At-Runtime/#updating-simulation","title":"\ud83d\udcca Updating Simulation","text":"<p>Simulation parameters are changed in real-time by UI sliders (Speed, BPM, Thickness, etc.).</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/How-Everything-Connects-At-Runtime/#2-ucpp_simulationmanagerupdatesimulationfsimulationslidebarsparameters-params","title":"2. <code>UCPP_SimulationManager::UpdateSimulation(FSimulationSlideBarsParameters* Params)</code>","text":"<ul> <li>Updates internal <code>SimulationParameters</code></li> <li>Calls <code>CurrentShockBehavior-&gt;OnUpdate(Params)</code></li> <li>May change pulse timing, FX intensity, label data, etc.</li> <li>Broadcasts <code>FUpdateSimulation</code> delegate</li> </ul> <p>Example from Cardiogenic Shock:</p> <pre><code>void UCardiogenicShockBehavior::OnUpdate(FSimulationSlideBarsParameters* Params) {\n  float Interval = GetPulseInterval(Params-&gt;BeatsPerMinute);\n  StartPulseTimer(Interval); // Controls Niagara pulse FX\n}\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/How-Everything-Connects-At-Runtime/#stopping-simulation","title":"\ud83d\uded1 Stopping Simulation","text":"<p>Called when user exits, resets, or changes context.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/How-Everything-Connects-At-Runtime/#3-ucpp_simulationmanagerstopsimulation","title":"3. <code>UCPP_SimulationManager::StopSimulation()</code>","text":"<ul> <li>Calls <code>CurrentShockBehavior-&gt;OnExit()</code></li> <li>Clears all FX, indicators, and temperature widgets</li> <li>Broadcasts <code>FStopSimulation</code></li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/How-Everything-Connects-At-Runtime/#runtime-behavior-summary","title":"\ud83d\udd04 Runtime Behavior Summary","text":"<ol> <li>BeginPlay<ul> <li><code>DiagnosisRegistery -&gt; BuildDiagnosisList</code></li> </ul> </li> <li>Each Diagnosis Configured</li> <li>Ready to Simulate</li> </ol> <ol> <li>ChangeDiagnosis(Type)<ul> <li>Clear previous behavior and FX</li> <li>Load new diagnosis</li> <li>Assign <code>RuntimeBehavior</code></li> <li>Call <code>OnEnter()</code></li> <li>Spawn:<ul> <li>FX</li> <li>Indicators</li> <li>Temperature Labels</li> </ul> </li> <li>Broadcast change event</li> </ul> </li> </ol> <ol> <li>UpdateSimulation()<ul> <li>Calls <code>OnUpdate()</code> on active behavior</li> <li>Modifies timers and FX</li> <li>Continues looping runtime behavior</li> </ul> </li> </ol> <ol> <li>StopSimulation()<ul> <li>Cleanup</li> <li>Broadcast stop event</li> </ul> </li> </ol>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/How-Everything-Connects-At-Runtime/#key-class-responsibilities","title":"\ud83d\udca1 Key Class Responsibilities","text":"Class Role <code>UCPP_SimulationManager</code> Orchestrates full simulation lifecycle <code>UCPP_Diagnosis</code> Stores static diagnosis data <code>UShockBehavior</code> Executes runtime logic like timers, FX, and state changes <code>UDiagnosisRegistery</code> Owns and builds all diagnosis entries <code>UShockIndicator</code> Represents each breathing dot data <code>UBreathingDotWidget</code> Visual UI representation of an indicator <code>FloatingTemperatureLabel</code> Displays core and skin temp near anatomy"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/How-Everything-Connects-At-Runtime/#tips-for-developers","title":"\u2705 Tips for Developers","text":"<ul> <li>Encapsulation: Avoid placing diagnosis logic in <code>SimulationManager</code>. Always delegate via <code>UShockBehavior</code>.</li> <li>Extendability: Create new <code>UShockBehavior</code> subclasses for every new diagnosis.</li> <li>Cleanup: Always implement <code>OnExit()</code> properly to avoid ghost widgets or FX leaks.</li> <li>Testing: Toggle between diagnosis types rapidly to validate correct cleanup and re-entry behavior.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Overview/","title":"\ud83e\udde0 Shock System Overview","text":"<p>Welcome to the Shock System documentation for the Virtual Anatomy project. This system is the core engine responsible for simulating medical diagnoses and triggering all associated visuals, logic, and interactions.</p> <p>At its core, the Shock System:</p> <ul> <li>Activates and manages specific medical diagnoses (e.g., Cardiogenic Shock)</li> <li>Updates simulation parameters in real-time (e.g., BPM, blood speed)</li> <li>Spawns breathing dot indicators and floating temperature labels</li> <li>Triggers Niagara FX based on diagnosis-specific behavior</li> <li>Delegates runtime logic to modular shock behavior classes</li> </ul> <p>It is designed for modularity, data-driven configuration, and runtime extensibility, making it easy to add new diagnosis types or behaviors.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Overview/#core-architecture","title":"\ud83e\udde9 Core Architecture","text":"<p>The system is composed of the following major classes:</p> Class Purpose <code>UCPP_SimulationManager</code> Central coordinator. Manages the active diagnosis, simulation parameters, FX, and UI. <code>UDiagnosisRegistery</code> Holds and constructs all available <code>UCPP_Diagnosis</code> objects using the <code>DiagnosisBuilder</code>. <code>UCPP_Diagnosis</code> Represents a specific diagnosis (e.g., Cardiogenic Shock). Stores all relevant settings. <code>UShockBehavior</code> Runtime logic executor. Each diagnosis has its own subclass to handle behavior (e.g., FX). <code>DiagnosisBuilder</code> Fluent API for constructing complete diagnoses, indicators, effects, and behavior. <code>UShockIndicator</code> Data structure defining a breathing dot\u2019s socket, title, description, and icon. <code>UBreathingDotWidget</code> Widget used to visually represent indicators in the 3D space. <code>AFloatingTemperatureLabel</code> Actor that renders dynamic core and skin temperature data in the scene."},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Overview/#capabilities","title":"\ud83d\ude80 Capabilities","text":"<ul> <li>Dynamic Diagnosis Switching</li> <li>Switch between diagnosis types at runtime</li> <li>Cleans up previous state and enters new behavior</li> <li>Real-Time Simulation Updates</li> <li>BPM, blood speed, and viscosity are adjustable during runtime</li> <li>Fully Visualized System</li> <li>Breathing Dots: UI elements bound to anatomical sockets</li> <li>Niagara FX: Sweat, pulse, shock visuals, etc.</li> <li>Temperature Labels: 3D feedback for skin and core temps</li> <li>Extensible Runtime Logic</li> <li>Every diagnosis can have its own <code>UShockBehavior</code></li> <li>Runtime effects and timing are modular per behavior class</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Overview/#docs-overview","title":"\ud83d\udd0d Docs Overview","text":"Section Description Key Classes Breathing Dots Shows how UI indicators are defined in C++ and rendered in 3D. <code>UShockIndicator</code>, <code>UBreathingDotWidget</code> FX and Materials Describes how Niagara effects are assigned and controlled. <code>FDiagnosisEffect</code>, <code>UNiagaraSystem</code> How Everything Connects at Runtime Step-by-step runtime execution of diagnosis switching and updates. <code>UCPP_SimulationManager</code>, <code>UShockBehavior</code>, <code>UDiagnosisRegistery</code>, <code>UCPP_Diagnosis</code> Debugging &amp; Extension Tips Practical advice for adding features, fixing bugs, and scaling the system. (Applies to all subsystems)"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Overview/#summary","title":"\u2705 Summary","text":"<p>The Shock System is the foundational layer that unifies diagnosis data, runtime behavior, visuals, and UI indicators. Thanks to its data-driven structure and behavior-oriented logic, adding new features or diagnoses requires minimal changes to core code.</p> <p>This documentation suite will walk you through each part of the system. Start with Diagnosis System to understand how everything begins.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/","title":"\ud83e\uddec Diagnosis System","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#overview","title":"Overview","text":"<p>NOTE: This system uses advanced C++ principles. It assumes you're familiar with:</p> <ul> <li>Smart Pointers (<code>TUniquePtr</code> and move semantics)</li> <li>Const References (ensuring safe and immutable data access)</li> </ul> <p>This system powers the disease and shock simulation in the Virtual Anatomy project. It defines diagnosis metadata (e.g., symptoms, parameters, FX, logic) that gets used in simulation runtime.</p> <p>Currently supported diagnoses include: - HyperVolumetric Shock - Cardiogenic Shock - Obstructive Shock - Distributive Shock - Death (as a diagnosis)</p> <p>It is designed to be extensible, so more diagnoses can be added with minimal effort.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#core-design-principles","title":"\ud83e\udde0 Core Design Principles","text":"<ul> <li>All diagnoses are created and owned by <code>UDiagnosisRegistery</code>.</li> <li>They are stored as <code>TUniquePtr&lt;UCPP_Diagnosis&gt;</code> \u2014 enforcing single ownership.</li> <li>Only const references are returned to external systems (e.g. SimulationManager).</li> <li>Construction of each diagnosis is handled via a <code>DiagnosisBuilder</code>, using fluent method chaining.</li> </ul> <p>\u26a0\ufe0f Never manually copy a <code>UCPP_Diagnosis</code> or break ownership with raw pointers.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#components","title":"\ud83d\udce6 Components","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#udiagnosisregistery","title":"<code>UDiagnosisRegistery</code>","text":"<ul> <li>Owns all <code>UCPP_Diagnosis</code> instances.</li> <li>Provides public <code>GetDiagnosisByType()</code> access.</li> <li>Initializes all diagnoses in <code>BuildDiagnosisList()</code>.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#ucpp_diagnosis","title":"<code>UCPP_Diagnosis</code>","text":"<ul> <li>Encapsulates all diagnosis-related data:</li> <li>Simulation parameters (<code>FSimulationSlideBarsParameters</code>)</li> <li>Title + description</li> <li>Enum type (<code>EDiagnosisType</code>)</li> <li>FX (<code>TArray&lt;FDiagnosisEffect&gt;</code>)</li> <li>UI Indicators (<code>TArray&lt;UShockIndicator*&gt;</code>)</li> <li>Runtime logic class (<code>UShockBehavior*</code>)</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#diagnosisbuilder","title":"<code>DiagnosisBuilder</code>","text":"<ul> <li>Used to create each diagnosis instance with a fluent interface.</li> <li>Enforces construction rules and prevents misuse.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#diagnosis-type-enum","title":"\ud83e\uddfe Diagnosis Type Enum","text":"<p>The simulation system uses the <code>EDiagnosisType</code> enum to identify each diagnosis uniquely.</p> <pre><code>UENUM(BlueprintType)\nenum class EDiagnosisType : uint8\n{\n    Healthy = 0,\n    HyperVolumetricShock,\n    CardiogenicShock,\n    ObstructiveShock,\n    DistributiveShock,\n    Death\n};\n</code></pre> <p>This enum is used in dropdown selection, simulation flow, and builder logic.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#how-to-add-a-new-diagnosis","title":"\ud83d\udccb How to Add a New Diagnosis","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#1-extend-the-enum","title":"1. Extend the Enum","text":"<p>In <code>Types/DiagnosisTypes.h</code>: <pre><code>enum class EDiagnosisType : uint8\n{\n    Healthy = 0,\n    HyperVolumetricShock,\n    // ...\n    AnaphylacticShock // new\n};\n</code></pre></p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#2-add-to-ui-dropdown","title":"2. Add to UI Dropdown","text":"<p>In <code>UCPP_DiagnosisDropDownMenu::NativePreConstruct()</code>: <pre><code>DiseaseOptions.Add(\"Anaphylactic Shock\", EDiagnosisType::AnaphylacticShock);\n</code></pre></p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#3-build-it-in-the-registery","title":"3. Build It in the Registery","text":"<p>In <code>UDiagnosisRegistery::BuildDiagnosisList()</code>:</p> <pre><code>FSimulationSlideBarsParameters anaParams;\nanaParams.Speed = 0.7f;\nanaParams.BloodThickness = 200;\nanaParams.BeatsPerMinute = 180;\n\nauto newDiagnosis =\n    DiagnosisBuilder(this)\n        .SetName(\"Anaphylactic Shock\")\n        .SetDescription(\"Severe allergic reaction leading to shock\")\n        .SetDiagnosisType(EDiagnosisType::AnaphylacticShock)\n        .SetSimulationParameters(anaParams)\n        .AddIndicator(\"Neck\", \"Swelling\", \"Severe neck swelling\", nullptr)\n        .AddEffect(AllergyFX, true, \"Head\")\n        .SetBehavior(NewObject&lt;UAnaphylacticShockBehavior&gt;(this))\n        .Build();\n\nDiagnosisList.Add(MoveTemp(newDiagnosis));\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#runtime-flow","title":"\ud83d\udd01 Runtime Flow","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#diagnosis-switching","title":"Diagnosis Switching","text":"<p>When the user selects a diagnosis:</p> <ol> <li><code>UCPP_SimulationManager::ChangeDiagnosis()</code> is called.</li> <li>Active FX and widgets are cleared.</li> <li>New diagnosis is fetched from <code>UDiagnosisRegistery</code>.</li> <li>All relevant indicators, FX, temp displays are spawned.</li> <li>The <code>UShockBehavior</code> (if present) has <code>OnEnter()</code> called.</li> <li>Changes are propagated via <code>FChangeDiagnosis</code> delegate.</li> </ol>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#example-listener","title":"Example Listener","text":"<pre><code>void ACPP_BloodPathSystem::HandleDiagnosisChange(UCPP_Diagnosis&amp; selectedDiagnosis)\n{\n    HandleSimulationUpdate(selectedDiagnosis.GetSimulationParameters());\n    BloodParticleComponent-&gt;ReinitializeSystem();\n}\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#optional-extensions-per-diagnosis","title":"\ud83d\udd2c Optional Extensions per Diagnosis","text":"Feature Class UI Dots <code>UShockIndicator</code> Niagara FX <code>FDiagnosisEffect</code> Runtime Logic <code>UShockBehavior</code> subclass 3D Temp Displays <code>AFloatingTemperatureLabel</code> <p>These components are optional. The builder allows you to skip any of them.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#class-summary","title":"\ud83d\uddc2 Class Summary","text":"Class Role <code>UCPP_Diagnosis</code> Holds one diagnosis's data <code>UDiagnosisRegistery</code> Owns all diagnoses <code>DiagnosisBuilder</code> Fluent builder for diagnosis setup <code>UShockIndicator</code> UI breathing dot anchor/socket <code>FDiagnosisEffect</code> Niagara FX setup per diagnosis <code>UShockBehavior</code> Runtime logic (tickable) <code>AFloatingTemperatureLabel</code> Floating 3D widget with temp values"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Simulation/ShockSystem/Diagnosis/DiagnosisSystem/#developer-reminders","title":"\ud83e\udde0 Developer Reminders","text":"<ul> <li>\u2705 Always use <code>DiagnosisBuilder</code> to create a diagnosis.</li> <li>\u2705 Use <code>MoveTemp()</code> when adding to the list.</li> <li>\u2705 Runtime logic should go into your <code>UShockBehavior</code> subclass.</li> <li>\u26a0\ufe0f Never copy or leak <code>UCPP_Diagnosis</code> pointers.</li> <li>\u26a0\ufe0f Socket names must match skeleton socket bones.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/","title":"ACPP_Slicer","text":"<p>This class is responsible for controlling and visualizing a slicing plane in the application. It manages the position, rotation, and visibility of the slicer, synchronizing these properties with a material parameter collection used for mesh slicing.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#public-methods","title":"Public methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#acpp_slicer_1","title":"<code>ACPP_Slicer()</code>","text":"<p>Description: Constructor for the <code>ACPP_Slicer</code> class.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#virtual-void-tickfloat-deltatime","title":"<code>virtual void Tick(float DeltaTime)</code>","text":"<p>Description: Called every frame. Currently unused, but available for runtime behavior changes.</p> <p>Parameters: - <code>DeltaTime</code>: Time elapsed since the last frame.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#virtual-void-setupplayerinputcomponentuinputcomponent-playerinputcomponent","title":"<code>virtual void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)</code>","text":"<p>Description: Binds input actions to the pawn. Not used in this slicer as control is typically handled via UI.</p> <p>Parameters: - <code>PlayerInputComponent</code>: The input component used for binding controls.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#void-setrotationconst-frotator-rotation","title":"<code>void SetRotation(const FRotator&amp; Rotation)</code>","text":"<p>Description: Sets the rotation of the slicer by rotating the attached <code>SpringArmComponent</code>.</p> <p>Parameters: - <code>Rotation</code>: New world-space rotation to apply to the slicer arm.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#frotator-getrotation","title":"<code>FRotator GetRotation()</code>","text":"<p>Description: Retrieves the last stored rotation of the slicer. This value reflects the initial rotation, not live updates from the component.</p> <p>Returns: - <code>FRotator</code>: Last known slicer rotation.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#void-setspringarmlengthfloat-length","title":"<code>void SetSpringArmLength(float Length)</code>","text":"<p>Description: Changes the length of the spring arm to move the slicer plane further or closer to the origin. Updates the material parameters on the next tick.</p> <p>Parameters: - <code>Length</code>: The new distance (in cm) from the pivot point.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#ustaticmeshcomponent-getslicerplane","title":"<code>UStaticMeshComponent* GetSlicerPlane()</code>","text":"<p>Description: Returns the static mesh component used as the slicer plane.</p> <p>Returns: - <code>UStaticMeshComponent*</code>: The slicing plane component.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#void-toggleslicerfloat-newvalue-const","title":"<code>void ToggleSlicer(float NewValue) const</code>","text":"<p>Description: Toggles the slicer's visibility or activity by setting a scalar value in the material collection (where 1 is off, 0 = on !!!).</p> <p>Parameters: - <code>NewValue</code>: Float value used to toggle state. <code>0.0</code> = on, <code>1.0</code> = off.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#void-updateslicerproperties-const","title":"<code>void UpdateSlicerProperties() const</code>","text":"<p>Description: Updates the slicer's location and orientation in the associated material parameter collection and thus updates its 'slice' visualization in the scene.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#protected-methods","title":"Protected methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#virtual-void-beginplay","title":"<code>virtual void BeginPlay()</code>","text":"<p>Description: Initializes references to components, retrieves stored slicer values from the game instance, and prepares the slicer's visual effect.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#virtual-void-endplayconst-eendplayreasontype-endplayreason","title":"<code>virtual void EndPlay(const EEndPlayReason::Type EndPlayReason)</code>","text":"<p>Description: Saves current slicer values (position, rotation, active state) into the game instance when the actor is removed from the world.</p> <p>Parameters: - <code>EndPlayReason</code>: Enum value describing why the actor is ending play.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#protected-properties","title":"Protected properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#ustaticmeshcomponent-planecomponent","title":"<code>UStaticMeshComponent* PlaneComponent</code>","text":"<p>Description: The visible slicing plane. Used for both visualization and defining the slicing region in materials.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#uspringarmcomponent-springarmcomponent","title":"<code>USpringArmComponent* SpringArmComponent</code>","text":"<p>Description: Controls the distance and rotation of the slicer relative to the slicer's origin. Enables intuitive adjustments to the slicer position.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#umaterialparametercollectioninstance-mpc_instance","title":"<code>UMaterialParameterCollectionInstance* MPC_Instance</code>","text":"<p>Description: Represents the runtime instance of the material parameter collection. Used to dynamically set slicer-related parameters (<code>Position</code>, <code>Direction</code>, <code>isSlicerOff</code>).</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#frotator-rotation","title":"<code>FRotator Rotation</code>","text":"<p>Description: Stores the last known rotation of the slicer. Used to maintain state across frames and ensure consistent behavior.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#ucpp_gameinstance-gameinstance","title":"<code>UCPP_GameInstance* GameInstance</code>","text":"<p>Description: Reference to the custom game instance used for storing and retrieving slicer state across sessions.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/ACPP_Slicer/#notes","title":"Notes","text":"<ul> <li>If <code>PlaneComponent</code> or/and <code>SpringArmComponent</code> are missing, the slicer destroys itself, preventing further functionality and possible crashes.</li> <li>If the material parameter collection or its instance cannot be found, the slicer will also destroy itself to avoid the possible crashes.</li> <li>Uses <code>GetWorld()-&gt;GetTimerManager().SetTimerForNextTick(...)</code> to ensure material properties update correctly after changing length.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Slicer-functionality/Slicer/","title":"Slicer","text":"<p>The slicer is a tool within the Virtual Anatomy that is designed to reveal cross-sections of 3D anatomical models by cutting through them visually.  It helps explore internal structures by adjusting the slicing plane\u2019s position and orientation.  The slicing effect is achieved through a material setup that uses real-time parameters such as the plane\u2019s location, direction, and activation state.</p> <p>To support this functionality, the class ACPP_Slicer provides the logic that drives the slicer.  It handles updates to the slicing plane\u2019s transform, communicates with the material system through a Material Parameter Collection (MPC),  and saves or restores slicer settings like position, rotation, and enabled state via UCPP_GameInstance.</p> <p>This code logic is applied through the Blueprint <code>BP_Slicer</code>, which is placed in explorer levels where slicing functionality is required.  <code>BP_Slicer</code> already includes the necessary Plane and SpringArm components preconfigured for use and those are not created inside the code.</p> <p>Warning</p> <p>If BP_Slicer is not present in one of the Explorer levels or <code>ACPP_Slicer</code> throws any error, the slicer functionality will be disabled and unavailable.  This means slicing-related controls in the UI will disappear, and materials relying on slicer parameters will not display any slicing behavior.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/GeneralApproach/","title":"General approach","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/GeneralApproach/#how-the-ui-is-done","title":"How the UI is Done","text":"<p>In this section, we will discuss and explain how we created the UI.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/GeneralApproach/#general-approach_1","title":"General Approach","text":"<p>The overall approach was to create a <code>C++</code> class to represent the logic of each UI element. These classes inherit from the <code>UUserWidget</code> class provided by the Unreal Engine. All the widget-related classes are stored inside the <code>Widgets</code> folder within the <code>Source</code> directory.</p> <p>Once the widget class is created, we generate a <code>Widget Blueprint</code> that inherits from the desired C++ class.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/GeneralApproach/#example-creating-a-button","title":"Example: Creating a Button","text":"<p>Let's say we want to create a button named <code>UCPP_FooButton</code>. Here's the process we would follow:</p> <ol> <li> <p>Create the C++ Class    First, we create a <code>C++</code> class and make it inherit from <code>UUserWidget</code>. </p> </li> <li> <p>Organize the Folder Structure    We either specify a new folder inside the <code>Widgets</code> folder or use an already existing one. This helps keep things organized.</p> </li> <li> <p>Create the Widget Blueprint    After the class is created, we navigate to the <code>UI/Widgets</code> folder where we create a <code>Widget Blueprint</code>. This blueprint will have the C++ class (<code>UCPP_FooButton</code>) as its parent.</p> </li> </ol>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/GeneralApproach/#why-this-approach","title":"Why This Approach?","text":"<p>We chose this method to write clean and clear code in <code>C++</code> while allowing easy access to functions via blueprints. Additionally, it lets us design various UI components using the Unreal Engine's UI editor, combining the flexibility of C++ logic with the simplicity of the visual UI editor.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/GeneralApproach/#bindings","title":"Bindings","text":"<p>In some of the header files of user widgets, you might see code similar to this one </p> <p><pre><code>        UPROPERTY(BlueprintReadWrite, meta = (BindWidget))\n        TObjectPtr&lt;UHorizontalBox&gt; HorizontalFlexBox;\n\n        UPROPERTY(BlueprintReadWrite, meta = (BindWidget))\n        TObjectPtr&lt;UBorder&gt; Background;\n</code></pre> This simply defines that the UI created based on this class will include these components. If you look inside the widget blueprint for this class, you might see these two components listed in the Binding tab of the UMG editor.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/GeneralApproach/#simple-example","title":"Simple example","text":"<ul> <li>Create the Widget: Open the UMG editor and create a new widget named MyCustomWidget.</li> <li>Add Components: Drag a Button and a TextBlock onto the canvas.</li> <li>Match Names: Rename the Button to MyButton and the TextBlock to MyTextBlock to match the names defined in your class.</li> </ul> <p>IMPORTANT: Names of the class property and widget in the UMG editor MUST match otherwise you will get compile errors </p> <p>By following these steps, the UMG editor will automatically bind these components to the properties in your class, allowing you to manipulate them in your Blueprint or C++ code.</p> <p>This approach was chosen to enable us to change the properties of specific UI elements directly from the C++ class without any issues.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/ReusableSliders/","title":"General overview","text":"<p>This section explains how the framework for sliders in the application was developed, how it works, and how you can extend it.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/ReusableSliders/#types-of-sliders","title":"Types of Sliders","text":"<p>Currently, there are three types of sliders in the application:  </p> <ol> <li> <p>Simulation Sliders:     In <code>CPP_SimulationSlideBar.h/.cpp</code>.  </p> <p>Controls simulation-related parameters. 2. Slicer Sliders:    In <code>CPP_SimulationSlideBar.h/.cpp</code>.</p> </li> </ol> <p>Controls slicer-related parameters.</p> <ol> <li> <p>Settings Sliders:     Located in <code>UCPP_SettingsSlider.h/.cpp</code>.  </p> <p>Currently not used on the settings page to adjust various application settings.</p> </li> </ol> <p>This approach ensures visually coherent sliders with different functionalities based on the application's context. We aimed to make this framework as user-friendly as possible, meaning you only need to define a few variables to create a new slider that controls a unique part of the application.  </p> <p>Before explaining how to implement this, let\u2019s cover the general structure of these reusable sliders.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/ReusableSliders/#structure","title":"Structure","text":"<p><code>UCPP_SimulationSlideBar</code>, <code>UCPP_SlicerSideBar</code>, and <code>UCPP_SettingsSlider</code> inherit from <code>UUserWidget</code>, allowing for easy styling in the editor. Each slider serves as a parent class to the corresponding <code>WidgetBlueprint</code> located in <code>Content/UI/Components/Sliders</code>. The prefix <code>WB_</code> distinguishes widget blueprints from regular blueprint classes.  </p> <p>In the editor, you can adjust the appearance of sliders and related components such as headers, maximum, and minimum markers.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/ReusableSliders/#reusability","title":"Reusability","text":"<p>The most important aspect of the framework is its reusability. Since sliders can affect various parameters in the simulation or application settings, these parameters can be configured directly in the editor during the design process. Image below ilustrates one of the sliders displayed on settings page and its corresponding <code>enum</code> that is specifying which fields to change.</p> <p>Note: If you find this approach overly complex, feel free to adjust it, but be sure to update this documentation accordingly.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/ReusableSliders/#data-storage","title":"Data Storage","text":"<p>The actual values that are modified by the sliders are stored in a <code>Struct</code> defined in <code>Types/SlideBarsParameters.h</code>. This struct holds all the relevant slider parameters used throughout the application.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/ReusableSliders/#settings-slider","title":"Settings Slider","text":"<pre><code>USTRUCT()\nstruct FCameraSensitivitySettings\n{\n    GENERATED_BODY()\n\n\n    /**\n     * These are default values, they are changed by multiplying settings slider value based on the specified enum\n     * The settings slider is in the range 1 - 2 meaning that when slider is 1 the defaults value is applied otherwise\n     * (value * sliderValue) applies. If slider value is 2 than Sensitivity is multiplied by 2\n     */\n    float CameraMovementSensitivity{1000.0f};\n    float CameraZoomSensitivity{1600.0f};\n\n\n\n    /**\n     * Slider values so that we can save the state of the slider through the game, slider is from range\n     * 1 to 2 so MAKE SURE THAT THIS CONDITION IS MET\n     */\n    float SliderValueForCameraMovement{1.0f};\n    float SliderValueForCameraZoom{1.0f};\n}\n</code></pre> <p>The settings slider adjusts application-related parameters such as camera zoom and movement sensitivity(code listing above). It works by retrieving specific fields from the struct and updating them when the slider's UI element triggers the <code>OnMouseCaptureEnd</code> event.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/ReusableSliders/#data-retrieval-process","title":"Data Retrieval Process","text":"<p>Since the settings slider is expected to be used primarily on the settings page, data retrieval should occur during the <code>OnBeginPlay</code> event of different levels. This is because when a user leaves the current level (e.g., to access the settings), that level gets unloaded. When the user returns, the level is reloaded, triggering the <code>OnBeginPlay</code> event again, where data can be fetched and applied.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/ReusableSliders/#considerations","title":"Considerations","text":"<p>If the level is not refreshed, you need to manually trigger an event that updates parameters like camera rotation sensitivity and zoom sensitivity. This ensures that changes made in the settings are applied in real-time without requiring a level reload.</p> <p>The struct for the settings slider that holds data of different parameters looks like the code listing below. In case you want to have another settings here just simply add the new field to hold the value to change. You must not forget to also add the field that is going to hold the slider state, that is the value of the slider. </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/ReusableSliders/#enum-based-value-selection","title":"Enum-Based Value Selection","text":"<p>Another crucial component of the slider architecture is the use of an <code>enum</code>, which specifies which values inside the struct should be modified.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/ReusableSliders/#why-use-enums","title":"Why Use Enums?","text":"<p>Since direct access to struct values in the Unreal Engine editor is not possible, we use <code>enums</code> to bridge this gap. Enums allow us to create dropdown combo boxes within the editor, making it easy to select which struct fields should be affected by a specific slider.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/ReusableSliders/#how-it-works","title":"How It Works","text":"<ul> <li>Enum Definition:   The <code>enum</code> defines all possible parameters that a slider can modify. <pre><code>UENUM(BlueprintType)\nenum class ESensitivityOf :uint8\n{\n    // access FCameraSensitivitySettings.CameraMovementSensitivity\n    CAMERA_MOVEMENT UMETA(DisplayName = \"Camera movement sensitivity\"),\n    // access FCameraSensitivitySettings.CameraZoomSensitivity\n    CAMERA_ZOOM UMETA(DisplayName = \"Camera zoom sensitivity\"),\n};\n</code></pre></li> <li>Editor Integration:   The editor displays the <code>enum</code> as a dropdown list, allowing developers to choose which struct field the slider should control.  </li> <li>Data Binding:   When a slider event fires (e.g., <code>OnMouseCaptureEnd</code>), the framework checks the selected <code>enum</code> value and retrieves the reference to the field inside the Struct that holds the data which can be changed like this . </li> </ul> <pre><code>//UCPP_SimulationSlideBar.cpp\n\nvoid UCPP_SettingsSlider::OnSliderMouseReleaseHandle()\n{\n    auto CurentSettingsValue = Cast&lt;UCPP_GameInstance&gt;(GetWorld()-&gt;GetGameInstance()) // cast game instance to our game instance\n    // sensitivy of is the value selected from editor\n        -&gt;GetCameraSensitivitySettings().GetSensitivityOf(SensitivityOf); // retrieve the ref to setting parameter\n\n    // update the field \n    GameInstanceRef-&gt;GetCameraSensitivitySettings().GetSliderValueFor(SensitivityOf) = MainSlider-&gt;GetValue();\n\n    CurentSettingsValue = CurentSettingsValue * MainSlider-&gt;GetValue();\n}\n</code></pre> <p>This setup keeps the architecture flexible and user-friendly, enabling parameter binding directly from the editor.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/ReusableSliders/#example-camera-sensitivity-settings","title":"Example: Camera Sensitivity Settings","text":"<p>For instance, the <code>FCameraSensitivitySettings</code> struct includes a function that uses the provided <code>enum</code> value to return a reference to the appropriate field within the struct. This allows the slider to modify the correct parameter dynamically.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/ReusableSliders/#how-it-works_1","title":"How It Works","text":"<p>Enum Selection:     In the editor, the developer selects an <code>enum</code> value corresponding to a specific field in the struct.  </p> Simulation settings and correcponidng enum in the code  <p>Field Retrieval Method: The selected <code>enum</code> is passed to a method within the struct. The method returns a reference to the relevant field based on the <code>enum</code> value. </p> <pre><code>Cast&lt;UCPP_GameInstance&gt;(GetWorld()-&gt;GetGameInstance()) // cast game instance to our game instance\n    // sensitivity of is filled in the UI \n    -&gt;GetCameraSensitivitySettings().GetSensitivityOf(SensitivityOf);\n</code></pre> <p>Value Update: When the slider fires its value change event, the retrieved struct field is updated accordingly.  </p> <pre><code>GameInstanceRef-&gt;GetCameraSensitivitySettings().GetSliderValueFor(SensitivityOf) = MainSlider-&gt;GetValue();\n</code></pre> <p>Both structs are instantiaded inside the <code>CPP_GameInstance.cpp</code> file in the constructor through initialization list. With this approach values of the  struct stay presistant through the entire runtime of the application. Note that this applies onli for the Settigns structs.</p> Simulation settings and correcponidng enum in the code"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/ReusableSliders/#simulation-sliders","title":"Simulation Sliders","text":"<p>Conceptually, simulation sliders work exactly like settings sliders. The primary differences lie in how data is updated and how corresponding structs are instantiated.  </p> <p>The <code>FSimulationSlideBarsParameters</code> struct is initialized in the <code>UCPP_SimulationSettings</code> constructor using <code>new</code> key word, this is risky but due to the unreal engine strucutre it has to be done (its is deleted in destrucutor so it should be safe). This approach is used because the <code>SimulationManager</code> class is only valid within the <code>Explorer Level</code>. It is also assumed that all simulation-related sliders are visible only within this level.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/ReusableSliders/#handling-update-of-the-simulation-parameters","title":"Handling Update of the Simulation Parameters","text":"<p>The parent class of <code>WB_SimulationSlideBar</code> holds a pointer to the <code>SimulationManager</code>. This class contains a delegate that is triggered whenever the slider\u2019s value changes. Other classes can listen to this delegate as long as they maintain a reference to the <code>SimulationManager</code> class.  </p> <p>This setup ensures that updates to simulation parameters occur seamlessly, keeping the system modular and easy to extend.</p> <p>Example code:</p> <pre><code>// assign what function should get exectued once simulation parameters update\nSimulationmanager-&gt;UpdateSimulationEventDelegate.AddUObject(this, &amp;ACPP_Cell::UpdateBloodFlowSimulation);\n</code></pre> <p>IMPORTANT: The delegate in the simulation manager will pass the pointer to the updated <code>FSimulationSlideBarsParameters</code> structure which should be accessed only inside the update function. Valid signature of the function that can be triggered once simulation updates can look like this</p> <pre><code>void UpdateBloodFlowSimulation(FSimulationSlideBarsParameters* updatedSimulationParameters);\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/","title":"SlideBarsParameters.h","text":"<p>Warning</p> <p>This class </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/#overview","title":"Overview","text":"<p>This file defines the structures and enumerations used for controlling global simulation parameters and camera sensitivity settings via sliders. It includes functions for manipulating the simulation speed and scale, as well as adjusting camera movement and zoom sensitivities.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/#enumerations","title":"Enumerations","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/#esimulationparamtochange","title":"ESimulationParamToChange","text":"<p>An enumeration for the parameters that can be changed via sliders in the simulation.</p> <ul> <li>Speed: Represents the speed of the simulation.</li> <li>ScaleFactor: Represents the scaling factor that affects the speed of the simulation.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/#eslicerparamtochange","title":"ESlicerParamToChange","text":"<p>An enumeration for the parameters that can be changed via sliders in the slicer functionality.</p> <ul> <li>Distance: Represents the distance of the slicer from the object.</li> <li>Rotation: Represents the rotation of the slicer.</li> <li>isSlicerOff: Indicates whether the slicer is turned off.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/#esensitivityof","title":"ESensitivityOf","text":"<p>An enumeration for different types of camera sensitivity settings.</p> <ul> <li>CAMERA_MOVEMENT: Represents the sensitivity of camera movement.</li> <li>CAMERA_ZOOM: Represents the sensitivity of camera zoom.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/#structs","title":"Structs","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/#fsimulationslidebarsparameters","title":"FSimulationSlideBarsParameters","text":"<p>Represents the global parameters of the simulation that are controlled by sliders.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/#members","title":"Members:","text":"<ul> <li>float Speed: The speed of the simulation, determining how long it takes the cell to complete one full cycle.</li> <li>float ScaleFactor: A scaling factor applied to adjust the simulation speed, controlled by a slider.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/#functions","title":"Functions:","text":"<ul> <li> <p>float GetSimulationSpeed() const: Returns the actual speed of the simulation, calculated as <code>Speed * ScaleFactor</code>.</p> </li> <li> <p>float&amp; GetFieldToChangeBySlider(ESimulationParamToChange paramToChange): Returns a reference to the field of the struct that the slider should change. The parameter <code>paramToChange</code> determines whether the slider will adjust <code>Speed</code> or <code>ScaleFactor</code>.</p> </li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/#fslicerslidebarsparameters","title":"FSlicerSlideBarsParameters","text":"<p>Represents the global parameters for the slicer functionality that can be controlled via sliders.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/#members_1","title":"Members:","text":"<ul> <li>float Distance: The distance of the slicer from the object.</li> <li>float Rotation: The rotation of the slicer.</li> <li>bool isSlicerOff: Indicates whether the slicer is turned off.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/#fcamerasensitivitysettings","title":"FCameraSensitivitySettings","text":"<p>Represents the sensitivity settings for the camera, including movement and zoom sensitivity.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/#members_2","title":"Members:","text":"<ul> <li>float CameraMovementSensitivity: Default value for camera movement sensitivity (default: 1000.0f).</li> <li>float CameraZoomSensitivity: Default value for camera zoom sensitivity (default: 1600.0f).</li> <li>float SliderValueForCameraMovement: Slider value for camera movement sensitivity (default: 1.0f).</li> <li>float SliderValueForCameraZoom: Slider value for camera zoom sensitivity (default: 1.0f).</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/#functions_1","title":"Functions:","text":"<ul> <li> <p>float&amp; GetSensitivityOf(ESensitivityOf sensitivityOf): Returns a reference to the specified sensitivity setting. The <code>sensitivityOf</code> parameter can be <code>CAMERA_MOVEMENT</code> or <code>CAMERA_ZOOM</code>.</p> </li> <li> <p>float&amp; GetSliderValueFor(ESensitivityOf sensitivityOf): Returns a reference to the slider value for the specified sensitivity setting. The <code>sensitivityOf</code> parameter can be <code>CAMERA_MOVEMENT</code> or <code>CAMERA_ZOOM</code>.</p> </li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Reusable-sliders/SlideBarParmaters/#error-handling","title":"Error Handling","text":"<ul> <li>In <code>GetFieldToChangeBySlider</code> and <code>GetSensitivityOf</code>, if an invalid parameter is passed (i.e., an unknown enum value), an error message is logged using <code>UE_LOG</code>.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/ExplorerSideBar/","title":"Explorer sidebar","text":"<p>As you can see, most of the actions in the explorer level are performed by the user using the sidebar element.</p> <p>This component is located at <code>Content/UI/SideBar</code>.</p> <p>The sidebar consists of multiple components, including buttons that are always displayed on the left side. These buttons come in two types: a square button with rounded corners, which represents actions within the sidebar.</p> <p>Lastly the sidebar you can hide and show at will is implement inside the <code>WB_SideBarContent</code></p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/ExplorerSideBar/#sidebar-buttons","title":"Sidebar Buttons","text":"<p>To simplify development, the <code>CPP_SideBarButton</code> class was created in the <code>Source/Widgets/Buttons</code> folder. The main purpose of this class is to implement reusable button logic, allowing each button to be customized with different icons and border colors.</p> <p>A Blueprint based on the <code>UCPP_SideBarButton</code> class was created inside the <code>UI/ReusableButtons</code> folder. Named <code>WB_SideBarButton</code>, this Blueprint provides a reusable button design.</p> <p>Here are the steps to use this reusable button:</p> <ol> <li> <p>In the User Widget Blueprint editor of your choice, place the <code>WB_SideBarButton</code> component. By default, it includes a placeholder icon with a black border.</p> </li> <li> <p>In the Details tab, specify the icon and, optionally, the border color for this button.</p> </li> <li> <p>Once placed, set the button as a variable, allowing you to implement its on-click event within the User Widget component's Blueprint editor.</p> </li> </ol> Fields where button can be customised <p>If you're unsure about these steps, refer to the <code>WB_ExplorerSideBar</code> Blueprint for example implementation.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/SlicerSideBar/","title":"Slicer Side Bar","text":"<p>The slicer and slicer sidebar in the Virtual Anatomy project work together to provide users with an intuitive way to interact with and manipulate a slicing plane within the 3D anatomy environment. The slicer itself is an in-world actor responsible for rendering and managing the slicing of anatomical models along a customizable plane. This plane can be moved and rotated in real time, enabling users to explore cross-sections of the body from different angles and depths.</p> <p>The slicer sidebar is a user interface widget built with UMG that gives users control over the slicer\u2019s behavior. When the sidebar becomes visible, it triggers the slicer to display its slicing plane in the 3D space. Conversely, when the sidebar is hidden, the slicer plane is also hidden to keep the interface clean and focused.</p> <p>The sidebar provides a checkbox to enable or disable the slicer entirely, sliders to fine-tune the position and rotation of the slicer plane, and several buttons that allow for quick application of predefined distance and rotation values. These controls send commands to the slicer actor in the scene, updating its transform parameters accordingly.</p> <p>During initialization, the sidebar checks for the presence of the slicer actor and associated widgets. If any required component is missing, it sets an internal error state, which can be queried to diagnose configuration issues. Additionally, the sidebar loads any previously saved slicer parameters from the game instance so that the interface reflects the last-used values, offering a consistent user experience across sessions.</p> <p>Overall, the slicer and its sidebar work in tandem to give users precise and flexible control over anatomical visualization, blending interactive 3D manipulation with a clean and accessible interface.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/UCPP_SlicerSideBar/","title":"<code>UCPP_SlicerSideBar</code>","text":"<p>A user interface widget class for controlling the slicer in the Virtual Anatomy Unreal Engine project.</p> <p>This class is responsible for:</p> <ul> <li>Displaying/hiding the slicer plane</li> <li>Handling checkbox interaction for enabling/disabling the slicer</li> <li>Modifying distance and rotation of the slicer plane</li> <li>Providing buttons for quick access to predefined values</li> <li>Managing error states when slicer components are not found</li> <li>Interacting with the slicer actor in the 3D world</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/UCPP_SlicerSideBar/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/UCPP_SlicerSideBar/#void-setsliceractoracpp_slicer-insliceractor","title":"<code>void SetSlicerActor(ACPP_Slicer* InSlicerActor)</code>","text":"<p>Description:</p> <p>Sets the slicer actor.</p> <p>Parameters:</p> <ul> <li><code>InSlicerActor</code> \u2013 the slicer actor to associate with the sidebar.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/UCPP_SlicerSideBar/#void-showslicerplane","title":"<code>void ShowSlicerPlane()</code>","text":"<p>Description:</p> <p>Shows the slicer plane. Called when the sidebar is shown.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/UCPP_SlicerSideBar/#void-hideslicerplane","title":"<code>void HideSlicerPlane()</code>","text":"<p>Description:</p> <p>Hides the slicer plane. Called when the sidebar is hidden.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/UCPP_SlicerSideBar/#bool-getslicererrorstate","title":"<code>bool GetSlicerErrorState()</code>","text":"<p>Description:</p> <p>Checks whether the slicer is giving an error.</p> <p>Returns:</p> <ul> <li><code>true</code> if there's an error; <code>false</code> otherwise.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/UCPP_SlicerSideBar/#hangeslicercheckboxbool-bischecked","title":"<code>hangeSlicerCheckbox(bool bIsChecked)</code>","text":"<p>Description:</p> <p>Handles checkbox state change.</p> <p>Parameters:</p> <ul> <li><code>bIsChecked</code> \u2013 <code>true</code> if checked; <code>false</code> otherwise.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/UCPP_SlicerSideBar/#changeslicerdistancefloat-newvalue","title":"<code>ChangeSlicerDistance(float NewValue)</code>","text":"<p>Description:</p> <p>Updates the slicer distance.</p> <p>Parameters:</p> <ul> <li><code>NewValue</code> \u2013 new distance value from slider or button.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/UCPP_SlicerSideBar/#changeslicerrotationfloat-newvalue","title":"<code>ChangeSlicerRotation(float NewValue)</code>","text":"<p>Description:</p> <p>Updates the slicer rotation.</p> <p>Parameters:</p> <ul> <li><code>NewValue</code> \u2013 new rotation value from slider or button.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/UCPP_SlicerSideBar/#protected-properties","title":"Protected Properties","text":"<ul> <li><code>UCPP_GameInstance* GameInstance</code> \u2013 Reference to the game instance to load saved slicer parameters.</li> <li><code>ACPP_Slicer* SlicerActor</code> \u2013 Reference to the slicer actor in the scene.</li> <li><code>bool bIsSlicerGivingError</code> \u2013 Set to <code>true</code> if slicer fails to initialize correctly.</li> <li><code>FSlicerSlideBarsParameters SlicerParameters</code> \u2013 Struct holding the distance and rotation slider values.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/UCPP_SlicerSideBar/#predefined-button-click-handlers","title":"Predefined Button Click Handlers","text":"<p>Functions triggered when clicking buttons with fixed distance or rotation values.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/UCPP_SlicerSideBar/#distance-button-handlers","title":"Distance button handlers","text":"<ul> <li><code>void OnDistance0Click()</code> \u2013 Sets distance to 0</li> <li><code>void OnDistance50Click()</code> \u2013 Sets distance to 50</li> <li><code>void OnDistance100Click()</code> \u2013 Sets distance to 100</li> <li><code>void OnDistance150Click()</code> \u2013 Sets distance to 150</li> <li><code>void OnDistance200Click()</code> \u2013 Sets distance to 200</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/UCPP_SlicerSideBar/#rotation-button-handlers","title":"Rotation button handlers","text":"<ul> <li><code>void OnRotationRearClick()</code> \u2013 Sets rotation to 90\u00b0</li> <li><code>void OnRotationFrontClick()</code> \u2013 Sets rotation to 270\u00b0</li> <li><code>void OnRotationLeftClick()</code> \u2013 Sets rotation to 0\u00b0</li> <li><code>void OnRotationRightClick()</code> \u2013 Sets rotation to 180\u00b0</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/UCPP_SlicerSideBar/#ui-widgets","title":"UI Widgets","text":"<p>Widgets used in the sidebar (bound via UMG):</p> <ul> <li><code>UCPP_SlicerSlideBar* DistanceSlider</code>: Controls distance of the slicer</li> <li><code>UCPP_SlicerSlideBar* RotationSlider</code>: Controls rotation of the slicer</li> <li><code>UCheckBox* SlicerCheckbox</code>: Checkbox for enabling/disabling slicer</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/Sidebars/Slicer-Side-Bar/UCPP_SlicerSideBar/#predefined-buttons-ubutton","title":"Predefined Buttons (UButton*)","text":"<ul> <li>Distance: <code>Distance0</code>, <code>Distance50</code>, <code>Distance100</code>, <code>Distance150</code>, <code>Distance200</code></li> <li>Rotation: <code>RotationRear</code>, <code>RotationFront</code>, <code>RotationLeft</code>, <code>RotationRight</code></li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/TreeView/HowTreeViewIsDone/","title":"How tree view is done","text":"<p>In this section we will talk about how we implemented the tree view that can be seen in the sidebar of hte explorer level </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/TreeView/HowTreeViewIsDone/#data-files","title":"Data files","text":"<p>To implement tree view we need to have data that will be displayed there for this purpose 2 new classes were created. Each of those classes is inhering <code>UObject</code> so that we can later interpret and visualize these data. </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/TreeView/HowTreeViewIsDone/#cpp_treeviewentry","title":"<code>CPP_TreeViewEntry</code>","text":"<p>This is representing the roots of the tree. This is data that the class contains </p> <p><code>FString FolderName</code> - name of the folder that will be displayed</p> <p><code>int Depth</code> - depth inside the tree, this will determine the padding of the folder </p> <p><code>TArray&lt;UCPP_TreeViewEntryChild*&gt; Children</code> - children of the folder component that are visible in the scene and user can interact with</p> <p><code>TArray&lt;UCPP_TreeViewEntry*&gt; SubFolders</code> - other subfolders (not implemented, and you can try to implement sub folders )</p> <p>In addition, methods that are used to populate this class can be found as well. The methods are self-explanatory and documented in code, so they will not be explained here.</p> <p>We have used <code>Builder</code> pattern to aid us with readability since each creational method like <code>SetActor</code> or <code>SetName</code> returns reference to itself meaning we can chain call those functions like following </p> <pre><code>builder-&gt;SetName(\"name\")-&gt;SetActor(actor)-&gt;SetComponent(component)-&gt;Create()\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/TreeView/HowTreeViewIsDone/#cpp_treeviewchildentry","title":"<code>CPP_TreeViewChildEntry</code>","text":"<p>Since we have two distinct visual components that display different information to the user, we needed to create a separate data class purely for the child components of the tree view.</p> <p>This class bridges the gap between the user interface and world interaction by referencing the actual components in the scene.</p> <p>The class contains the following properties:</p> <ul> <li><code>UCPP_TreeViewEntry* Parent</code>: The parent of this child entry.</li> <li><code>AActor* BodyPart</code>: A general reference to the body part. This is a pointer to the Blueprint that holds the skeletal mesh for rendering and the static mesh for the picker. For more details, see the Adding New Parts to the Model section.</li> <li><code>UMeshComponent* BodyPartComponent</code>: The mesh component it references. This could be either a skeletal or a static mesh component. We've chosen to allow you to pick either type, in case you want to add a picker mesh later.</li> <li><code>FString Name</code>: The name of the component.</li> <li><code>int Depth</code>: The depth value, used to calculate the padding of the children in the tree view.</li> </ul> <p>This class also contains helper functions that are self-explanatory and return a reference to the class itself for method chaining.</p> <p>These classes are primarily used for holding the data and for the creation of the tree view itself.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/TreeView/HowTreeViewIsDone/#tree-view-widget","title":"Tree View Widget","text":"<p>This widget lacks comprehensive documentation, but it shows great potential for displaying deeply nested data structures. We have only scratched the surface of what this widget is capable of, and we recommend exploring it further if you want to leverage its full potential.</p> <p>The tree view widget is represented in C++ by the <code>CPP_TreeView</code> class, which inherits from the <code>UUserWidget</code> class. It contains a pointer to the <code>TreeViewComponent</code>, which must be bound to work properly.</p> <p>In this class, we do the following: - Populate the data structure described above. - Push the populated data structure to the tree view.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/TreeView/HowTreeViewIsDone/#simple-example","title":"Simple Example","text":"<p>Let\u2019s suppose you want to add muscles. We'll assume you\u2019ve already followed the steps in the Adding New Parts to the Model chapter. To add a new entry to the tree, you need to go to the <code>NativePreconstruct</code> function and use the provided helper function to push the new entry to the array of tree entries.</p> <pre><code>    TreeViewEntries.Push(CreateTreeViewEntry(\"Muscles\", FName(\"Muscles\")));\n</code></pre> <p>The <code>CreateTreeViewEntry</code> function accepts two main parameters:</p> <ul> <li>The name of the folder to be displayed in the tree view.</li> <li>The tag associated with the Blueprint (or Actor) that holds:        Skeletal mesh as the merged body part.        Static meshes as its children (picker meshes).</li> </ul> <p>This function works by retrieving all actors that match the provided tag. It then iterates over their child components and creates a <code>CPP_TreeViewEntryChild</code> for each <code>SkeletalMeshComponent</code> associated with the retrieved Blueprint (or Actor). </p> <p>This process highlights one of the main reasons it's crucial to follow the standards we've established. If you decide to change these standards, you'll need to update the relevant classes accordingly. Otherwise, the tree view won't function as intended.</p> <p>If all operations are successful (check the console for any warnings or errors), the new folder will appear in the tree view component. If any child components were found, they will appear under the folder as well.</p> <p>During the <code>NativeConstruct</code> event, we iterate over all root-level items and execute the <code>AddItem</code> function on the <code>UTreeView</code> component. This populates Unreal Engine's internal data structure and additionally triggers the <code>NativeOnListItemObjectSet</code> function of the <code>IUserObjectListEntry</code> interface.</p> <p>The importance of <code>NativeOnListItemObjectSet</code> will be discussed further below.</p> <p>To specify the <code>UUserWidgetBluerpint</code> that is going to be displayed as an item of the tree view we have configured the <code>ListEntires</code> of the <code>TreeViewComponet</code> to be <code>WBP_TreeViewItem</code></p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/TreeView/HowTreeViewIsDone/#tree-view-entry-widget","title":"Tree view entry widget","text":"<p><code>Associated</code> classes <code>CPP_TreeViewEntry</code>, <code>CPP_TreeViewEntryWidget</code>,<code>WBP_TreeViewEntryWidget</code></p> <p>To style the folder entries in the tree view, we created a new class called <code>CPP_TreeViewEntryWidget</code>. This class inherits from <code>UUserWidget</code> and implements the <code>IUserObjectListEntry</code> interface. Additionally, we created a Blueprint class based on <code>CPP_TreeViewEntryWidget</code> to customize the appearance of the entries.</p> <p>Within <code>CPP_TreeViewEntryWidget</code>, you\u2019ll find bindings to components that are populated with data defined earlier. For instance, consider the folder label text. How does Unreal Engine know what text to display there? Suppose we are adding a folder named \"Muscles\" \u2014 how do we assign this label to the text field?</p> <p>To accomplish this, we implement the <code>IUserObjectListEntry</code> interface, which includes an event triggered each time <code>AddItem</code> is called. This event receives item data as a <code>UObject</code> parameter, which we can then cast to the appropriate type, in this case, <code>CPP_TreeViewEntry</code>. By casting the data, we gain access to the child properties previously documented.</p> <p>Since we\u2019ve set up bindings to the text box, we can easily control the text that displays. In practice, this setup is straightforward and works as follows:</p> <p><pre><code>// CPP_TreeViewEntryWidget.cpp\n\nvoid UCPP_TreeViewEntryWidget::NativeOnListItemObjectSet(UObject* ListItemObject)\n{\n    IUserObjectListEntry::NativeOnListItemObjectSet(ListItemObject);\n\n    auto TreeViewEntryData = Cast&lt;UCPP_TreeViewEntry&gt;(ListItemObject);\n\n    FolderName-&gt;SetText(FText::FromString(TreeViewEntryData-&gt;GetFolderName()));\n\n    for (auto &amp;Child : TreeViewEntryData-&gt;GetChildren())\n    {\n        Children-&gt;AddItem(Child);\n    }\n}\n</code></pre> We were not able to figure out how to use tree view to its full extent, but you can. This means that to display children of the <code>CPP_TreeViewEntry</code> we have used another build in widget called <code>ListView</code> this widget works similarly to the <code>TreeView</code> in a sense that it can display <code>N</code> components that have the same styling and that we can choose styling that we want thanks to the <code>UMG</code> </p> <p>What this means in practise is that the parent (<code>UCPP_TreeViewEntryWidget</code>) holds a bindable pointer to the <code>ListView</code> which we can populate with children passed to it during creation process  </p> Tree view item holds list view where each child that represents the skeletal mesh is located"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/TreeView/HowTreeViewIsDone/#tree-view-child-entry-widget","title":"Tree view child entry widget","text":"<p>Associated Classes: <code>CPP_TreeViewEntryChild</code>, <code>CPP_TreeViewEntryChildWidget</code>, <code>WBP_TreeViewEntryChildWidget</code>, <code>MeshSelector</code></p> <p>As mentioned earlier, each TreeView entry contains a list view, representing the skeletal meshes that can be interacted with. To populate this list view, we created the <code>CPP_TreeViewEntryChild</code> class, which manages both the data and visual appearance of items within the <code>ListView</code>.</p> <p>This process follows the same approach used for tree view items. The only difference is that we now iterate through the <code>Children</code> field of the <code>CPP_TreeViewEntry</code> class and execute <code>AddItem</code> on the bound pointer of the <code>ListView</code>.</p> <pre><code>void UCPP_TreeViewChildEntryWidget::NativeOnListItemObjectSet(UObject* ListItemObject)\n{\n    IUserObjectListEntry::NativeOnListItemObjectSet(ListItemObject);\n    if(ListItemObject)\n    {\n        // cast from UObject to *CPP_TreeViewEntryChild to get the right data \n        auto TreeViewChildEntry = Cast&lt;UCPP_TreeViewEntryChild&gt;(ListItemObject);\n        ActorName-&gt;SetText(FText::FromString(TreeViewChildEntry-&gt;GetName()));\n        ReferencingActor = TreeViewChildEntry-&gt;GetActor();\n        ReferencingComponent = TreeViewChildEntry-&gt;GetComponent();\n    }\n}\n</code></pre> <p>As seen in the implementation, both the referencing actor and the specific component are stored, allowing efficient access to both the Blueprint that contains the picker and merged meshes, as well as the pointer to the individual merged body part. This design is more efficient than repeatedly retrieving all children and helps reduce memory bandwidth usage.</p> <p>The logic for hiding child elements is straightforward. A key detail is that when we hide the skeletal mesh, we also disable the collision on all its child components (picker meshes) to ensure they are truly perceived as hidden. This is implemented inside the <code>HideAll</code> and <code>ShowAll</code> functions in <code>C++</code> and they are called from the Blueprint for better organizations and maintainability. </p> <p>Highlighting is managed through the <code>MeshSelector</code> class, which we retrieve as a pointer using the <code>AnatomyUtils</code> helper namespace. Additionally, we pass the component (the skeletal mesh) referenced by the child element as a parameter to the highlight function.</p> <pre><code>void UCPP_TreeViewChildEntryWidget::Highlight()\n{\n    AnatomyUtils::GetMeshSelector(GetWorld())-&gt;HighlightComponent(ReferencingComponent);\n}\n</code></pre>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/ClickedOnInfo/","title":"<code>UCPP_ClickedOnInfo</code>","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/ClickedOnInfo/#class-description","title":"Class Description","text":"<p>UCPP_ClickedOnInfo: </p> <p>This widget is designed to display a small pop-up so that the user can see the name of the mesh they have selected as well as preform varius operations on the selected mesh. This popup is being managed by the <code>MeshSelector</code> class.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/ClickedOnInfo/#public-properties","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/ClickedOnInfo/#tobjectptrutextblock-selectedpartofanatomy","title":"<code>TObjectPtr&lt;UTextBlock&gt; SelectedPartOfAnatomy</code>","text":"<p>Description: </p> <p>A text block that displays the name of the selected mesh part of the anatomy. This property is bindable to the widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/ClickedOnInfo/#tobjectptruhorizontalbox-horizontalflexbox","title":"<code>TObjectPtr&lt;UHorizontalBox&gt; HorizontalFlexBox</code>","text":"<p>Description: </p> <p>A horizontal box that allows for flexible arrangement of child widgets. This property is bindable to the widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/ClickedOnInfo/#tobjectptruborder-background","title":"<code>TObjectPtr&lt;UBorder&gt; Background</code>","text":"<p>Description: </p> <p>A border that serves as the background for the pop-up, helping to visually distinguish the information displayed. This property is bindable to the widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SettingsSlider/","title":"<code>UCPP_SettingsSlider</code>","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SettingsSlider/#class-description","title":"Class Description","text":"<p>UCPP_SettingsSlider: </p> <p>This class represents a slider in the settings page of the application. Unlike traditional sliders that allow for a full range of values, this slider provides predefined steps for the user to choose from. This design is intended to prevent excessive steps that may confuse the user and streamline the process of adjusting settings. The slider is used to modify specific settings related to the user interface and controls, such as camera sensitivity.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SettingsSlider/#public-properties","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SettingsSlider/#tobjectptruslider-mainslider","title":"<code>TObjectPtr&lt;USlider&gt; MainSlider</code>","text":"<p>Description: </p> <p>The main slider widget that allows the user to adjust a setting. The user can select from predefined steps instead of freely adjusting the value within a continuous range.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SettingsSlider/#esensitivityof-sensitivityof","title":"<code>ESensitivityOf SensitivityOf</code>","text":"<p>Description: </p> <p>This enum specifies which aspect of sensitivity the slider controls (e.g., camera movement sensitivity or zoom sensitivity). It helps define the specific setting that the slider will modify.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SettingsSlider/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SettingsSlider/#void-onslidermousereleasehandle","title":"<code>void OnSliderMouseReleaseHandle()</code>","text":"<p>Description: </p> <p>This function handles the event when the user releases the mouse after adjusting the slider. It is used to update the setting based on the selected value.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SettingsSlider/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SettingsSlider/#virtual-void-nativeconstruct-override","title":"<code>virtual void NativeConstruct() override</code>","text":"<p>Description: </p> <p>Called after the widget is constructed. This function is used to perform any further setup after the widget is initialized and ready to be displayed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SettingsSlider/#virtual-void-nativepreconstruct-override","title":"<code>virtual void NativePreConstruct() override</code>","text":"<p>Description: </p> <p>Called before the widget is constructed. This function can be used for any setup that needs to occur before the widget is fully created and displayed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SettingsSlider/#private-members","title":"Private Members","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SettingsSlider/#ucpp_gameinstance-gameinstanceref","title":"<code>UCPP_GameInstance* GameInstanceRef</code>","text":"<p>Description: </p> <p>A reference to the <code>UCPP_GameInstance</code> class, which manages global game settings. This is used to retrieve or modify the settings that the slider controls.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationButton/","title":"<code>UCPP_SimulationButton</code>","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationButton/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationButton/#void-onsimulationbuttonclick","title":"<code>void OnSimulationButtonClick()</code>","text":"<p>Function that is called when the user presses the button to toggle the simulation.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationButton/#bool-getissimulationrunning","title":"<code>bool GetIsSimulationRunning()</code>","text":"<p>Returns:</p> <ul> <li><code>bool</code> - <code>true</code> if the simulation is running; <code>false</code> otherwise.</li> </ul> <p>Gets the current state of the simulation. This is mainly for checks done by widgets instantiating this class.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationButton/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationButton/#void-nativepreconstruct","title":"<code>void NativePreConstruct()</code>","text":"<p>Overrides the base class method to implement pre-construction logic for the widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationButton/#void-synchronizeproperties","title":"<code>void SynchronizeProperties()</code>","text":"<p>Overrides the base class method to synchronize properties before the widget is displayed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationButton/#void-nativeconstruct","title":"<code>void NativeConstruct()</code>","text":"<p>Overrides the base class method to implement logic that runs when the widget is constructed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationButton/#void-nativedestruct","title":"<code>void NativeDestruct()</code>","text":"<p>Overrides the base class method to implement cleanup logic when the widget is destroyed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationButton/#private-methods","title":"Private Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationButton/#fslatebrush-getcorrectbuttonimagestylebool-simulationstate","title":"<code>FSlateBrush GetCorrectButtonImageStyle(bool simulationState)</code>","text":"<p>Parameters:</p> <ul> <li><code>bool simulationState</code> - The current state of the simulation. <code>true</code> if the simulation is running, <code>false</code> otherwise.</li> </ul> <p>Configures the style of the button based on the state of the simulation.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationButton/#fbuttonstyle-getcorrectbuttonstylebool-simulationstate","title":"<code>FButtonStyle GetCorrectButtonStyle(bool simulationState)</code>","text":"<p>Parameters:</p> <ul> <li><code>bool simulationState</code> - The current state of the simulation. <code>true</code> if the simulation is running, <code>false</code> otherwise.</li> </ul> <p>Configures the icon of the button based on the simulation state and returns a brush representing the action that can be taken.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationButton/#void-setbuttonstylingsbool-simulationstate","title":"<code>void SetButtonStylings(bool simulationState)</code>","text":"<p>Parameters:</p> <ul> <li><code>bool simulationState</code> - The current state of the simulation. <code>true</code> if the simulation is running, <code>false</code> otherwise.</li> </ul> <p>Sets the color and texture of the button along with the desired image size. This method calls <code>GetCorrectButtonStyle</code> and <code>GetCorrectButtonImageStyle</code> to apply the appropriate styles.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationIsland/","title":"<code>UCPP_SimulationIsland</code>","text":"<p>UCPP_SimulationIsland: </p> <p>Simulation island that displays details about the ongoing simulation.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationIsland/#public-properties","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationIsland/#tobjectptrucpp_simulationbutton-simulationstartbutton","title":"<code>TObjectPtr&lt;UCPP_SimulationButton&gt; SimulationStartButton</code>","text":"<p>Description: </p> <p>A button that starts the simulation. This property is bindable to the widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationIsland/#tobjectptruwidgetanimation-simulationislandanimation","title":"<code>TObjectPtr&lt;UWidgetAnimation&gt; SimulationIslandAnimation</code>","text":"<p>Description: </p> <p>A widget animation used to hide or show the simulation island. This property is bindable to the widget and is marked as transient.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationIsland/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationIsland/#void-onstartsimulation","title":"<code>void OnStartSimulation()</code>","text":"<p>C++ implementation of the function that is executed when the user presses the start simulation button.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationIsland/#void-onstopsimulation","title":"<code>void OnStopSimulation()</code>","text":"<p>C++ implementation of the function that is executed when the user presses the stop simulation button.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationIsland/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationIsland/#void-nativeconstruct","title":"<code>void NativeConstruct()</code>","text":"<p>Overrides the base class method to implement logic that runs when the widget is constructed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationIsland/#void-nativedestruct","title":"<code>void NativeDestruct()</code>","text":"<p>Overrides the base class method to implement cleanup logic when the widget is destroyed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationIsland/#private-properties","title":"Private Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationIsland/#tobjectptrucpp_simulationmanager-m_simulationmanager","title":"<code>TObjectPtr&lt;UCPP_SimulationManager&gt; M_SimulationManager</code>","text":"<p>Description: </p> <p>An instance of the simulation manager class, used to manage the simulation's state.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/","title":"<code>UCPP_SimulationSlideBar</code>","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#class-description","title":"Class Description","text":"<p>UCPP_SimulationSlideBar: </p> <p>This widget is responsible for creating and managing sliders that allow the user to control simulation parameters, such as speed and other user-defined properties. The slider adjusts global simulation parameters and sends updates to the simulation flow. It provides a user-friendly interface to control the flow of the simulation in real-time.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#public-properties","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#tobjectptrutextblock-sliderheader","title":"<code>TObjectPtr&lt;UTextBlock&gt; SliderHeader</code>","text":"<p>Description: </p> <p>A text block that displays the header for the slider, typically showing what parameter the slider controls.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#fstring-sliderheadervalue","title":"<code>FString SliderHeaderValue</code>","text":"<p>Description: </p> <p>The value of the header text. This is a bindable property to allow dynamic changes to the header text.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#tobjectptrutextblock-maxvaluetextblock","title":"<code>TObjectPtr&lt;UTextBlock&gt; MaxValueTextBlock</code>","text":"<p>Description: </p> <p>A text block that displays the maximum value for the slider. It is used to give the user context about the range of values the slider can take.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#fstring-maxvalue","title":"<code>FString MaxValue</code>","text":"<p>Description: </p> <p>A string that represents the maximum value the slider can have. This value is used to display the maximum limit to the user.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#tobjectptrutextblock-minvaluetextblock","title":"<code>TObjectPtr&lt;UTextBlock&gt; MinValueTextBlock</code>","text":"<p>Description: </p> <p>A text block that displays the minimum value for the slider. It is used to give the user context about the range of values the slider can take.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#fstring-minvalue","title":"<code>FString MinValue</code>","text":"<p>Description: </p> <p>A string that represents the minimum value the slider can have. This value is used to display the minimum limit to the user.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#tobjectptruslider-mainslider","title":"<code>TObjectPtr&lt;USlider&gt; MainSlider</code>","text":"<p>Description: </p> <p>The main slider widget that allows the user to interact with the parameter values. It is used to adjust the value of the specified parameter.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#tobjectptruimage-tooltipimage","title":"<code>TObjectPtr&lt;UImage&gt; TooltipImage</code>","text":"<p>Description: </p> <p>An image widget that provides a tooltip or visual indication for the slider. It helps the user understand what the slider controls.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#fstring-tooltipvalue","title":"<code>FString ToolTipValue</code>","text":"<p>Description: </p> <p>A string that represents the tooltip text associated with the slider. This is displayed to help guide the user about the function of the slider.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#esimulationparamtochange-parametertochange","title":"<code>ESimulationParamToChange ParameterToChange</code>","text":"<p>Description: </p> <p>This enum specifies what parameter inside the <code>FSimulationSlideBarsParameters</code> struct will be changed by this slider. It allows the slider to affect different properties, such as speed or scale factor, depending on the enum selection.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#virtual-void-nativepreconstruct-override","title":"<code>virtual void NativePreConstruct() override</code>","text":"<p>Description: </p> <p>Called before the widget is constructed. This function can be used for any initial setup before the widget is displayed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#virtual-void-nativeconstruct-override","title":"<code>virtual void NativeConstruct() override</code>","text":"<p>Description: </p> <p>Called after the widget has been constructed. This function is typically used for further setup or initialization that requires the widget to be fully created.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#ufunction-void-handlesliderrelease","title":"<code>UFUNCTION() void HandleSliderRelease()</code>","text":"<p>Description: </p> <p>Handles the slider's value release event. It is triggered when the user releases the slider after adjusting its value.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#private-members","title":"Private Members","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SimulationSlideBar/#tobjectptrucpp_simulationmanager-simulationmanager","title":"<code>TObjectPtr&lt;UCPP_SimulationManager&gt; SimulationManager</code>","text":"<p>Description: </p> <p>A pointer to the <code>UCPP_SimulationManager</code> that manages the simulation. It is used to update the simulation parameters based on the slider's value.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/","title":"<code>UCPP_SlicerSlideBar</code>","text":"<p>This is a custom UMG widget designed to serve as a parameter control component in the slicer sidebar interface. It displays a labeled slider with configurable minimum and maximum values, a default value, a tooltip, and a visual range. The widget is tightly integrated with the <code>UCPP_SlicerSideBar</code> class and serves to control either the slicer's distance or rotation, depending on its assigned purpose.</p> <p>This component automatically updates its visual text fields (like min/max values and header) based on editable <code>UPROPERTY</code> values and reacts to user input in real-time. Whenever the slider value changes, it invokes a delegate-style callback which is handled externally - typically by the sidebar UI - to propagate the new value to the slicer actor.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#public-properties","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#tobjectptruslider-mainslider","title":"<code>TObjectPtr&lt;USlider&gt; MainSlider</code>","text":"<p>Description:</p> <p>The primary slider widget for user interaction.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#tobjectptrutextblock-sliderheader","title":"<code>TObjectPtr&lt;UTextBlock&gt; SliderHeader</code>","text":"<p>Description:</p> <p>Displays the label/title of the slider.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#tobjectptrutextblock-maxvaluetextblock","title":"<code>TObjectPtr&lt;UTextBlock&gt; MaxValueTextBlock</code>","text":"<p>Description:</p> <p>Displays the textual representation of the maximum value.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#tobjectptrutextblock-minvaluetextblock","title":"<code>TObjectPtr&lt;UTextBlock&gt; MinValueTextBlock</code>","text":"<p>Description:</p> <p>Displays the textual representation of the minimum value.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#ftext-sliderheadervalue","title":"<code>FText SliderHeaderValue</code>","text":"<p>Description:</p> <p>Default label value for the slider header (set in Editor).</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#fstring-maxvalue","title":"<code>FString MaxValue</code>","text":"<p>Description:</p> <p>Maximum value label shown next to the slider.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#fstring-minvalue","title":"<code>FString MinValue</code>","text":"<p>Description:</p> <p>Minimum value label shown next to the slider.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#float-maxvalueforslider","title":"<code>float MaxValueForSlider</code>","text":"<p>Description:</p> <p>The maximum numeric value the slider can reach.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#float-minvalueforslider","title":"<code>float MinValueForSlider</code>","text":"<p>Description:</p> <p>The minimum numeric value the slider can reach.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#float-stepsize","title":"<code>float StepSize</code>","text":"<p>Description:</p> <p>Incremental step the slider moves in.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#float-defaultvalue","title":"<code>float DefaultValue</code>","text":"<p>Description:</p> <p>Default value the slider starts at when constructed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#ftext-tooltipvalue","title":"<code>FText ToolTipValue</code>","text":"<p>Description:</p> <p>Tooltip text shown when hovering over the slider.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#eslicerparamtochange-parametertochange","title":"<code>ESlicerParamToChange ParameterToChange</code>","text":"<p>Description:</p> <p>Enum defining which parameter this slider controls (e.g., distance or rotation).</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#tfunctionvoidfloat-onslidervaluechangedcallback","title":"<code>TFunction&lt;void(float)&gt; OnSliderValueChangedCallback</code>","text":"<p>Description:</p> <p>A delegate-style function pointer. Called when the slider value changes. Set externally by <code>UCPP_SlicerSideBar</code>.z</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#void-onslidervaluechangedfloat-newvalue","title":"<code>void OnSliderValueChanged(float NewValue)</code>","text":"<p>Description:</p> <p>Callback function bound to the slider. Called internally when the user changes the slider value. It triggers the <code>OnSliderValueChangedCallback</code> to notify external components like the slicer sidebar.</p> <p>Parameters: - <code>float NewValue</code>: The new value of the slider after user interaction.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/SlicerSlideBar/#usage","title":"Usage","text":"<p><code>UCPP_SlicerSlideBar</code> is typically used within <code>UCPP_SlicerSideBar</code> to allow user control over slicer parameters. When a user adjusts the slider, the class emits the new value via the bound callback, and this value is applied to the slicing logic in the <code>ACPP_Slicer</code> actor.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/TreeView/","title":"<code>UCPP_TreeView.h</code>","text":"<p>The <code>UCPP_TreeView</code> class defines the tree view widget displayed in the sidebar, allowing users to interact with various components and hierarchical folders. This class manages the data structures needed to populate the tree view and provides helper methods for creating folders and assigning actors.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/TreeView/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/TreeView/#void-nativepreconstruct","title":"<code>void NativePreConstruct()</code>","text":"<p>This Unreal Engine override is used for setup tasks before the widget is fully constructed. Any necessary initializations for the widget\u2019s design and data binding can be set here.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/TreeView/#void-nativeconstruct","title":"<code>void NativeConstruct()</code>","text":"<p>This Unreal Engine override handles initialization after the widget is constructed. The tree view\u2019s data structures are populated, and event bindings are initialized at this stage.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/TreeView/#protected-members","title":"Protected Members","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/TreeView/#tobjectptrutreeview-tree","title":"<code>TObjectPtr&lt;UTreeView&gt; Tree</code>","text":"<p>The primary tree view component that displays the hierarchy in the sidebar. It is bindable and accessible within Blueprints, enabling a flexible and interactive UI for hierarchical data visualization.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/TreeView/#private-members","title":"Private Members","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/TreeView/#tarrayucpp_treeviewentry-treeviewentries","title":"<code>TArray&lt;UCPP_TreeViewEntry*&gt; TreeViewEntries</code>","text":"<p>An array storing root-level entries in the tree view. Each <code>UCPP_TreeViewEntry</code> represents a folder or component within the sidebar tree structure.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/TreeView/#private-methods","title":"Private Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/TreeView/#ucpp_treeviewentry-createtreeviewentryfstring-foldername-fname-tag","title":"<code>UCPP_TreeViewEntry* CreateTreeViewEntry(FString folderName, FName tag)</code>","text":"<p>Parameters:</p> <ul> <li><code>FString folderName</code> - The name of the folder to be displayed in the tree view.</li> <li><code>FName tag</code> - The tag associated with the folder, used to filter components.</li> </ul> <p>Returns:</p> <ul> <li><code>UCPP_TreeViewEntry*</code> - A pointer to the newly created folder entry.</li> </ul> <p>This method creates a folder entry in the sidebar\u2019s tree view based on the specified folder name and tag. It populates the entry\u2019s data and appearance and returns the new entry, which can be further modified or populated with child components.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/UI/UIClasses/TreeView/#void-assignchildrenucpp_treeviewentry-parent-fname-tagname","title":"<code>void AssignChildren(UCPP_TreeViewEntry* parent, FName tagName)</code>","text":"<p>Parameters:</p> <ul> <li><code>UCPP_TreeViewEntry* parent</code> - The parent folder entry to which child actors will be assigned.</li> <li><code>FName tagName</code> - The tag used to identify actors or components to be assigned as children.</li> </ul> <p>This method performs a world search to find all actors associated with the specified tag and assigns them to the given parent folder entry. If the tag is set on components within an actor, the function will continue searching within that actor's components for matching items. This function helps populate the tree view with nested items and subcomponents dynamically based on the world context.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/","title":"AnatomyUtils","text":"<p>A namespace containing utility functions for operations related to anatomy exploration in the context of a game or simulation. These functions are specifically designed to work reliably at the explorer level. While most functions are robust, some may return <code>nullptr</code> under specific conditions, which requires caution during use.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#aactor-getactorbynamefstring-actorname-uworld-world","title":"<code>AActor* GetActorByName(FString&amp; ActorName, UWorld* World)</code>","text":"<p>Description: Retrieves an actor from the world by its name.  </p> <p>Parameters: - <code>ActorName</code>: The name of the actor to search for. - <code>World</code>: A pointer to the world where the search should occur.  </p> <p>Returns: A pointer to the found actor. If the actor is not found, the function returns <code>nullptr</code>. Exercise caution when handling <code>nullptr</code> results.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#aactor-getrandomactoruworld-world","title":"<code>AActor* GetRandomActor(UWorld* World)</code>","text":"<p>Description: Selects and retrieves a random actor from the scene.  </p> <p>Parameters: - <code>World</code>: A pointer to the world from which the actor will be retrieved.  </p> <p>Returns: A pointer to a random actor. If the scene is empty, the function returns <code>nullptr</code>.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#tobjectptrucpp_simulationmanager-getsimulationmanageruworld-world","title":"<code>TObjectPtr&lt;UCPP_SimulationManager&gt; GetSimulationManager(UWorld* World)</code>","text":"<p>Description: Retrieves an instance of the simulation manager from the GameMode associated with the provided world.  </p> <p>Parameters: - <code>World</code>: The world in which the GameMode contains the simulation manager instance.  </p> <p>Returns: A <code>TObjectPtr&lt;UCPP_SimulationManager&gt;</code> pointing to the simulation manager. If the simulation manager is not present in the GameMode, the function returns <code>nullptr</code>.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#tobjectptrucpp_isolatemesh-getisolatemeshinstanceuworld-world","title":"<code>TObjectPtr&lt;UCPP_IsolateMesh&gt; GetIsolateMeshInstance(UWorld* World)</code>","text":"<p>Description: Obtains an instance of the mesh isolator class from the GameMode.  </p> <p>Parameters: - <code>World</code>: The world in which the GameMode contains the mesh isolator instance.  </p> <p>Returns: A <code>TObjectPtr&lt;UCPP_IsolateMesh&gt;</code> pointing to the mesh isolator class. If the instance is not present in the GameMode, the function returns <code>nullptr</code>.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#tobjectptrumeshselector-getmeshselectoruworld-world","title":"<code>TObjectPtr&lt;UMeshSelector&gt; GetMeshSelector(UWorld* World)</code>","text":"<p>Description: Retrieves the mesh selector instance from the user character in the specified world.  </p> <p>Parameters: - <code>World</code>: The world containing the user character (instance of <code>UCPP_User</code>).  </p> <p>Returns: A <code>TObjectPtr&lt;UMeshSelector&gt;</code> pointing to the mesh selector instance. If the world does not contain an instance of <code>UCPP_User</code>, the function returns <code>nullptr</code>.  </p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#float-degto-anatomyutils","title":"`float DegTo# AnatomyUtils","text":"<p>A namespace containing utility functions for operations related to anatomy exploration in the context of a game or simulation. These functions are specifically designed to work reliably at the explorer level. While most functions are robust, some may return <code>nullptr</code> under specific conditions, which requires caution during use.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#public-methods_1","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#aactor-getactorbynamefstring-actorname-uworld-world_1","title":"<code>AActor* GetActorByName(FString&amp; ActorName, UWorld* World)</code>","text":"<p>Description: Retrieves an actor from the world by its name.</p> <p>Parameters: - <code>ActorName</code>: The name of the actor to search for. - <code>World</code>: A pointer to the world where the search should occur.</p> <p>Returns: A pointer to the found actor. If the actor is not found, the function returns <code>nullptr</code>. Exercise caution when handling <code>nullptr</code> results.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#aactor-getrandomactoruworld-world_1","title":"<code>AActor* GetRandomActor(UWorld* World)</code>","text":"<p>Description: Selects and retrieves a random actor from the scene.</p> <p>Parameters: - <code>World</code>: A pointer to the world from which the actor will be retrieved.</p> <p>Returns: A pointer to a random actor. If the scene is empty, the function returns <code>nullptr</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#tobjectptrucpp_simulationmanager-getsimulationmanageruworld-world_1","title":"<code>TObjectPtr&lt;UCPP_SimulationManager&gt; GetSimulationManager(UWorld* World)</code>","text":"<p>Description: Retrieves an instance of the simulation manager from the GameMode associated with the provided world.</p> <p>Parameters: - <code>World</code>: The world in which the GameMode contains the simulation manager instance.</p> <p>Returns: A <code>TObjectPtr&lt;UCPP_SimulationManager&gt;</code> pointing to the simulation manager. If the simulation manager is not present in the GameMode, the function returns <code>nullptr</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#tobjectptrucpp_isolatemesh-getisolatemeshinstanceuworld-world_1","title":"<code>TObjectPtr&lt;UCPP_IsolateMesh&gt; GetIsolateMeshInstance(UWorld* World)</code>","text":"<p>Description: Obtains an instance of the mesh isolator class from the GameMode.</p> <p>Parameters: - <code>World</code>: The world in which the GameMode contains the mesh isolator instance.</p> <p>Returns: A <code>TObjectPtr&lt;UCPP_IsolateMesh&gt;</code> pointing to the mesh isolator class. If the instance is not present in the GameMode, the function returns <code>nullptr</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#tobjectptrumeshselector-getmeshselectoruworld-world_1","title":"<code>TObjectPtr&lt;UMeshSelector&gt; GetMeshSelector(UWorld* World)</code>","text":"<p>Description: Retrieves the mesh selector instance from the user character in the specified world.</p> <p>Parameters: - <code>World</code>: The world containing the user character (instance of <code>UCPP_User</code>).</p> <p>Returns: A <code>TObjectPtr&lt;UMeshSelector&gt;</code> pointing to the mesh selector instance. If the world does not contain an instance of <code>UCPP_User</code>, the function returns <code>nullptr</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#float-convertbeatsperminutetobeatspersecondconst-float-beatsperminute-float-maxpossiblebps-5","title":"<code>float ConvertBeatsPerMinuteToBeatsPerSecond(const float &amp;BeatsPerMinute, float MaxPossibleBPS = 5)</code>;","text":"<p>Description: Calculates beats per minute to the beats per second</p> <p>Parameters: - <code>BeatsPerMinute</code>: beats per minute of the heart - <code>MaxPossibleBPS</code>: maximum beats per seconds given in the Types/SlideBarParameter.h, we have to suply this number to properly scale how often \"hearth releases new particles\" default value is 5 since max possible BPM is 300 and 300 BPM / 60 sec = 5 BPS</p> <p>Returns: How often should CPP_BloodParticleSystem tick, use this value to configure tick frequency.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#float-convertdegreestoradiansfloat-angle","title":"<code>float ConvertDegreesToRadians(float Angle)</code>","text":"<p>Description: Converts an angle from degrees to radians.</p> <p>Parameters: - <code>Angle</code>: The angle in degrees.</p> <p>Returns: The angle converted to radians.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Explorer-level%20%28hospital%20and%20simple%20environment%29/Utilities/AnatomyHelpers/#notes","title":"Notes","text":"<ul> <li>Ensure the validity of pointers returned by these functions before usage to avoid null pointer dereferencing.  </li> <li>These utilities are intended for operations within the explorer level, and their reliability assumes the context is set up correctly.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_And_Group_Data/","title":"FMeshCatalogEntryUE &amp; FOrganGroupUE","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Quiz/MeshAndGroupData.h</code></li> <li>Purpose: These structs are used by <code>UMeshKnowledgeBaseDataAsset</code> to store metadata about 3D anatomical meshes and their groupings, facilitating local lookups for \"select organ\" quiz questions.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_And_Group_Data/#fmeshcatalogentryue","title":"FMeshCatalogEntryUE","text":"<p>Purpose: Represents a single entry in the mesh catalog, mapping a mesh's name to its database ID and associated groups.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_And_Group_Data/#public-properties","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_And_Group_Data/#fstring-databaseid","title":"<code>FString DatabaseID</code>","text":"<p>Type: <code>FString</code></p> <p>The <code>_id</code> from MongoDB for this mesh entry.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_And_Group_Data/#fstring-meshname","title":"<code>FString MeshName</code>","text":"<p>Type: <code>FString</code></p> <p>The unique meshName identifier (e.g., \"bones_Fourth_Rib_L\").</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_And_Group_Data/#fstring-displayname","title":"<code>FString DisplayName</code>","text":"<p>Type: <code>FString</code></p> <p>The name displayed in the UI (e.g., \"Fourth Rib (L)\"). This name conversion is handled by the API.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_And_Group_Data/#tarrayfstring-organgroupdatabaseids","title":"<code>TArray&lt;FString&gt; OrganGroupDatabaseIDs</code>","text":"<p>Type: <code>TArray&lt;FString&gt;</code></p> <p>An array of MongoDB <code>_id</code> strings for groups this mesh belongs to.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_And_Group_Data/#int32-defaultstudyyear","title":"<code>int32 DefaultStudyYear</code>","text":"<p>Type: <code>int32</code></p> <p>Optional default study year for this mesh.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_And_Group_Data/#forgangroupue","title":"FOrganGroupUE","text":"<p>Purpose: Represents a single entry for an organ group.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_And_Group_Data/#public-properties_1","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_And_Group_Data/#fstring-databaseid_1","title":"<code>FString DatabaseID</code>","text":"<p>Type: <code>FString</code></p> <p>The <code>_id</code> from MongoDB for the organ group.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_And_Group_Data/#fstring-groupname","title":"<code>FString GroupName</code>","text":"<p>Type: <code>FString</code></p> <p>The unique name of the organ group (e.g., \"Leg\").</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_And_Group_Data/#int32-defaultstudyyear_1","title":"<code>int32 DefaultStudyYear</code>","text":"<p>Type: <code>int32</code></p> <p>Optional default study year for this group.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_Knowledge_Base_Data_Asset/","title":"UMeshKnowledgeBaseDataAsset","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Quiz/MeshAndGroupData.h</code> &amp; <code>VirtualAnatomy/Private/Quiz/MeshAndGroupData.cpp</code></li> <li>Purpose: A Data Asset that acts as a local database for anatomical meshes and their associated groups. This is crucial for validating answers in \"select organ\" questions without needing a backend call for each click.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_Knowledge_Base_Data_Asset/#public-properties","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_Knowledge_Base_Data_Asset/#tmapfstring-fmeshcatalogentryue-meshcatalogbymeshname","title":"<code>TMap&lt;FString, FMeshCatalogEntryUE&gt; MeshCatalogByMeshName</code>","text":"<p>Type: <code>TMap&lt;FString, FMeshCatalogEntryUE&gt;</code></p> <p>Stores mesh catalog entries mapped by their unique <code>MeshName</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_Knowledge_Base_Data_Asset/#tmapfstring-forgangroupue-organgroupsbydatabaseid","title":"<code>TMap&lt;FString, FOrganGroupUE&gt; OrganGroupsByDatabaseID</code>","text":"<p>Type: <code>TMap&lt;FString, FOrganGroupUE&gt;</code></p> <p>Stores organ groups mapped by their <code>DatabaseID</code> (MongoDB <code>_id</code>).</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_Knowledge_Base_Data_Asset/#public-methods","title":"Public Methods","text":"<p>The below methods are helper functions that were used to populate the <code>DA_MeshKnowledgeBase</code> Data Asset. Will be useful if you want to add more meshes to the model &amp; database, otherwise not used anywhere</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_Knowledge_Base_Data_Asset/#const-fmeshcatalogentryue-getmeshentrybydatabaseidconst-fstring-indatabaseid-const","title":"<code>const FMeshCatalogEntryUE* GetMeshEntryByDatabaseID(const FString&amp; InDatabaseID) const</code>","text":"<p>Parameters:</p> <ul> <li><code>const FString&amp; InDatabaseID</code> - The database ID of the mesh to retrieve.</li> </ul> <p>Helper function to get a mesh entry by its database ID.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_Knowledge_Base_Data_Asset/#void-clearallknowledgebasedata","title":"<code>void ClearAllKnowledgeBaseData()</code>","text":"<p>Clears all stored mesh catalog and organ group data within the asset.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_Knowledge_Base_Data_Asset/#void-addorgangroupentryconst-fstring-databaseid-const-fstring-groupname-int32-defaultstudyyear","title":"<code>void AddOrganGroupEntry(const FString&amp; DatabaseID, const FString&amp; GroupName, int32 DefaultStudyYear)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FString&amp; DatabaseID</code> - The MongoDB <code>_id</code> for the organ group.</li> <li><code>const FString&amp; GroupName</code> - The unique name of the organ group.</li> <li><code>int32 DefaultStudyYear</code> - The default study year for this group.</li> </ul> <p>Adds a new organ group entry to the knowledge base.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Mesh_Knowledge_Base_Data_Asset/#void-addmeshcatalogentryconst-fstring-meshnamekey-const-fstring-entrydatabaseid-const-fstring-entrymeshname-const-fstring-entrydisplayname-const-tarrayfstring-entryorgangroupdatabaseids-int32-entrydefaultstudyyear","title":"<code>void AddMeshCatalogEntry(const FString&amp; MeshNameKey, const FString&amp; EntryDatabaseID, const FString&amp; EntryMeshName, const FString&amp; EntryDisplayName, const TArray&lt;FString&gt;&amp; EntryOrganGroupDatabaseIDs, int32 EntryDefaultStudyYear)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FString&amp; MeshNameKey</code> - The key for the <code>MeshCatalogByMeshName</code> TMap.</li> <li><code>const FString&amp; EntryDatabaseID</code> - The <code>_id</code> from MongoDB for this mesh entry.</li> <li><code>const FString&amp; EntryMeshName</code> - The meshName field for the struct.</li> <li><code>const FString&amp; EntryDisplayName</code> - The name displayed in the UI.</li> <li><code>const TArray&lt;FString&gt;&amp; EntryOrganGroupDatabaseIDs</code> - Array of MongoDB <code>_id</code> strings of groups this mesh belongs to.</li> <li><code>int32 EntryDefaultStudyYear</code> - The default study year for this mesh entry.</li> </ul> <p>Adds a new mesh catalog entry to the knowledge base.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Answer/","title":"FQuizAnswer","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Quiz/QuizAnswer.h</code> &amp; <code>VirtualAnatomy/Private/Quiz/QuizAnswer.cpp</code></li> <li>Purpose: Represents a possible answer for a multiple-choice or true/false question.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Answer/#public-properties","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Answer/#fstring-id","title":"<code>FString Id</code>","text":"<p>Type: <code>FString</code></p> <p>Unique identifier for the answer, can be used to match with submitted answers.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Answer/#fstring-text","title":"<code>FString Text</code>","text":"<p>Type: <code>FString</code></p> <p>The text content of the answer.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Answer/#bool-biscorrect","title":"<code>bool bIsCorrect</code>","text":"<p>Type: <code>bool</code></p> <p>Indicates whether this answer is the correct one.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Data/","title":"FQuizData","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Quiz/QuizData.h</code> &amp; <code>VirtualAnatomy/Private/Quiz/QuizData.cpp</code></li> <li>Purpose: Represents a complete quiz.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Data/#public-properties","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Data/#fstring-id","title":"<code>FString Id</code>","text":"<p>Type: <code>FString</code></p> <p>The unique identifier of the quiz (MongoDB <code>_id</code>).</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Data/#fstring-title","title":"<code>FString Title</code>","text":"<p>Type: <code>FString</code></p> <p>The title of the quiz.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Data/#int32-quizdesignatedstudyyear","title":"<code>int32 QuizDesignatedStudyYear</code>","text":"<p>Type: <code>int32</code></p> <p>The designated study year for the quiz (e.g., 1st, 2nd, etc.).</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Data/#tarrayfquizquestion-questions","title":"<code>TArray&lt;FQuizQuestion&gt; Questions</code>","text":"<p>Type: <code>TArray&lt;FQuizQuestion&gt;</code></p> <p>An array containing all the questions in the quiz.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Data/#fstring-scheduledat","title":"<code>FString ScheduledAt</code>","text":"<p>Type: <code>FString</code></p> <p>The scheduled date and time for the quiz, in ISO 8601 format.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Manager/","title":"UQuizManager","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Quiz/QuizManager.h</code> &amp; <code>VirtualAnatomy/Private/Quiz/QuizManager.cpp</code></li> <li>Purpose: Manages asynchronous HTTP requests to fetch quizzes and handles the parsing of JSON responses.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Manager/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Manager/#void-fetchquizzesint32-studyyear","title":"<code>void FetchQuizzes(int32 StudyYear)</code>","text":"<p>Parameters:</p> <ul> <li><code>int32 StudyYear</code> - The academic study year for which quizzes should be fetched.</li> </ul> <p>Initiates a GET request to the quiz API endpoint, optionally filtered by <code>StudyYear</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Manager/#public-properties","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Manager/#fonquizzesfetched-onquizzesfetched","title":"<code>FOnQuizzesFetched OnQuizzesFetched</code>","text":"<p>Type: <code>FOnQuizzesFetched</code> (Delegate)</p> <p>Broadcasts a <code>TArray&lt;FQuizData&gt;</code> when quizzes are successfully fetched and parsed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Manager/#uquizmanager-quizmanager","title":"<code>UQuizManager* QuizManager</code>","text":"<p>Type: <code>UQuizManager*</code></p> <p>A self-referential pointer to a <code>UQuizManager</code> instance. Its specific use case beyond referencing itself within the class might be for a manager of managers, but in this context, it appears as a direct member.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Manager/#private-methods","title":"Private Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Manager/#void-onresponsereceivedfhttprequestptr-request-fhttpresponseptr-response-bool-bwassuccessful","title":"<code>void OnResponseReceived(FHttpRequestPtr Request, FHttpResponsePtr Response, bool bWasSuccessful)</code>","text":"<p>Parameters:</p> <ul> <li><code>FHttpRequestPtr Request</code> - A pointer to the HTTP request that was completed.</li> <li><code>FHttpResponsePtr Response</code> - A pointer to the HTTP response received from the server.</li> <li><code>bool bWasSuccessful</code> - A boolean indicating if the HTTP request was successful.</li> </ul> <p>This is a callback function for HTTP request completion. It deserializes the JSON response into an array of <code>FQuizData</code> structs and broadcasts them.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Question/","title":"FQuizQuestion","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Quiz/QuizQuestion.h</code> &amp; <code>VirtualAnatomy/Private/Quiz/QuizQuestion.cpp</code></li> <li>Purpose: Represents a single question within a quiz.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Question/#public-properties","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Question/#fstring-id","title":"<code>FString Id</code>","text":"<p>Type: <code>FString</code></p> <p>The unique identifier for the question (MongoDB <code>_id</code>).</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Question/#fstring-question","title":"<code>FString Question</code>","text":"<p>Type: <code>FString</code></p> <p>The text of the question.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Question/#fstring-type","title":"<code>FString Type</code>","text":"<p>Type: <code>FString</code></p> <p>The type of the question (e.g., \"multiple-choice\", \"true-false\", \"select-organ\", \"short-answer\").</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Question/#tarrayfquizanswer-answers","title":"<code>TArray&lt;FQuizAnswer&gt; Answers</code>","text":"<p>Type: <code>TArray&lt;FQuizAnswer&gt;</code></p> <p>An array of possible answers for this question (relevant for multiple-choice and true/false).</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Question/#fstring-currentexpectedtargettype","title":"<code>FString CurrentExpectedTargetType</code>","text":"<p>Type: <code>FString</code></p> <p>For \"select-organ\" questions, specifies whether the expected target is a \"mesh\" or a \"group\".</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Question/#fstring-currentexpectedtargetid","title":"<code>FString CurrentExpectedTargetID</code>","text":"<p>Type: <code>FString</code></p> <p>For \"select-organ\" questions, the MongoDB <code>_id</code> of the expected target (e.g., an organ or group).</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/","title":"QuizSubmissionPayload","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/#fquizsubmittedanswerpayload","title":"FQuizSubmittedAnswerPayload","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Quiz/QuizSubmissionPayload.h</code></li> <li>Purpose: Stores a single user's answer to a question in a format ready for API submission. Only one of the <code>SelectedAnswerId_Index</code>, <code>ResponseText_ClickedMesh_ID</code>, or <code>ResponseText_ShortAnswer</code> fields is typically populated per answer.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/#public-properties","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/#fstring-question_id","title":"<code>FString Question_ID</code>","text":"<p>Type: <code>FString</code></p> <p>The MongoDB <code>_id</code> string of the question.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/#int32-selectedanswerid_index","title":"<code>int32 SelectedAnswerId_Index</code>","text":"<p>Type: <code>int32</code> Default Value: <code>-1</code></p> <p>For multiple-choice or true/false questions, this is the index of the selected answer. Defaults to -1 if not used.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/#fstring-responsetext_clickedmesh_id","title":"<code>FString ResponseText_ClickedMesh_ID</code>","text":"<p>Type: <code>FString</code></p> <p>For \"select-organ\" questions, this is the MongoDB <code>_id</code> string of the clicked mesh.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/#fstring-responsetext_shortanswer","title":"<code>FString ResponseText_ShortAnswer</code>","text":"<p>Type: <code>FString</code></p> <p>For short-answer (open-ended) questions, this is the user's text response.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/#fquizsubmittedanswerpayload_1","title":"<code>FQuizSubmittedAnswerPayload()</code>","text":"<p>Constructor that initializes <code>SelectedAnswerId_Index</code> to <code>-1</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/#fquizsubmissionpayload","title":"FQuizSubmissionPayload","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Quiz/QuizSubmissionPayload.h</code></li> <li>Purpose: Encapsulates all data for a complete quiz submission to the backend.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/#public-properties_1","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/#fstring-quiz_id","title":"<code>FString Quiz_ID</code>","text":"<p>Type: <code>FString</code></p> <p>The MongoDB <code>_id</code> string of the quiz.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/#fstring-student_id","title":"<code>FString Student_ID</code>","text":"<p>Type: <code>FString</code></p> <p>An identifier for the student.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/#int32-studyyearatsubmission","title":"<code>int32 StudyYearAtSubmission</code>","text":"<p>Type: <code>int32</code> Default Value: <code>0</code></p> <p>The study year of the student at the time of quiz submission.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/#fstring-submittedat","title":"<code>FString SubmittedAt</code>","text":"<p>Type: <code>FString</code></p> <p>The timestamp of when the quiz was submitted, in ISO 8601 format.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_Submission_Payload/#tarrayfquizsubmittedanswerpayload-answers","title":"<code>TArray&lt;FQuizSubmittedAnswerPayload&gt; Answers</code>","text":"<p>Type: <code>TArray&lt;FQuizSubmittedAnswerPayload&gt;</code></p> <p>An array containing all the submitted answers for each question in the quiz.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/","title":"Quiz System Documentation","text":"<p>The Virtual Anatomy project includes a comprehensive Quiz system designed to test user knowledge of human anatomy. This documentation outlines its architecture, data flow, and key components.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#1-architecture-overview","title":"1. Architecture Overview","text":"<p>The Quiz system is built with a clear separation of concerns, utilizing several C++ classes to manage quiz data, UI flow, and interaction with a backend API.</p> <p>Key architectural components include:</p> <ul> <li><code>UQuizManager</code>: Handles all network communication with the backend API to fetch quizzes and submit results. It acts as the data layer for quizzes.</li> <li><code>UQuizUIManager</code>: Manages the entire user interface flow for the quiz system, from year selection to displaying questions and the end screen. It orchestrates the display of various quiz widgets.</li> <li>Quiz Data Structures: C++ <code>USTRUCT</code>s define the format of quiz content and user submissions.</li> <li>Quiz Widgets: A hierarchy of <code>UUserWidget</code> classes handles the visual presentation and user interaction for different stages and types of quiz questions.</li> <li><code>UMeshKnowledgeBaseDataAsset</code>: A data asset that provides a local lookup for anatomical mesh and group IDs, used by \"select organ\" question types.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#2-quiz-system-data-flow","title":"2. Quiz System Data Flow","text":"<p>The typical flow of a user interacting with the Quiz system is as follows:</p> <ol> <li>Initialization: When the quiz level loads, <code>UQuizUIManager::Initialize</code> is called from the <code>ACPP_GameMode</code>. This loads the <code>UMeshKnowledgeBaseDataAsset</code> and presents the <code>UStudyYearSelectorWidget</code> to the user.</li> <li>Study Year Selection: The user selects a study year via the <code>UStudyYearSelectorWidget</code>. This selection triggers <code>UQuizUIManager::HandleStudyYearSelected</code>.</li> <li>Fetching Quizzes: <code>UQuizUIManager</code> instructs the <code>UQuizManager</code> to <code>FetchQuizzes</code> for the selected study year. The <code>UQuizManager</code> sends an HTTP GET request to the backend.</li> <li>Quiz Overview Display: Upon receiving a successful response, <code>UQuizManager</code> broadcasts the fetched quiz data. <code>UQuizUIManager</code>'s <code>CurrentOverview</code> widget (an <code>UCPP_QuizOverview</code>) listens to this event and populates a list of available quizzes.</li> <li>Quiz Details: The user selects a quiz from the overview. <code>UQuizUIManager::ShowQuizDetails</code> is called, displaying an <code>UCPP_QuizDetailsWidget</code> with more information about the chosen quiz.</li> <li>Starting Quiz: The user clicks \"Start Quiz\" on the details screen. <code>UQuizUIManager::StartQuiz</code> is called, initializing the quiz state (current question index, empty accumulated answers).</li> <li>Displaying Questions: <code>UQuizUIManager::ShowNextQuestion</code> determines the type of the current question (<code>FQuizQuestion::Type</code>) and dynamically creates the appropriate widget (<code>UCPP_MultipleChoiceWidget</code>, <code>UCPP_TrueFalseWidget</code>, <code>UCPP_OpenEndedWidget</code>, or <code>UCPP_SelectOrganWidget</code>). The question text and options are then initialized.</li> <li>Answering Questions: The user interacts with the active question widget (e.g., clicking an answer button, typing text, selecting an organ).<ul> <li>For \"Select Organ\" questions, <code>UCPP_SelectOrganWidget</code> subscribes to <code>UMeshSelector::OnMeshClicked</code> to capture user clicks on 3D anatomical models. It then uses the <code>UMeshKnowledgeBaseDataAsset</code> to validate or retrieve information about the clicked mesh.</li> </ul> </li> <li>Processing Answers: When an answer is submitted on a question widget, its <code>OnQuestionAnswered</code> delegate is broadcast. <code>UQuizUIManager::HandleQuestionAnsweredInternalBinder</code> captures this, extracts the answer data in the correct format (<code>FQuizSubmittedAnswerPayload</code>), and then calls <code>UQuizUIManager::HandleQuestionAnswered</code>.</li> <li>Accumulating Answers: <code>UQuizUIManager::HandleQuestionAnswered</code> adds the <code>FQuizSubmittedAnswerPayload</code> to an internal array of <code>AccumulatedAnswers</code> and increments the <code>CurrentQuestionIndex</code>. It then calls <code>ShowNextQuestion</code> again.</li> <li>Quiz Completion &amp; Submission: When all questions have been answered (<code>CurrentQuestionIndex</code> exceeds total questions), <code>UQuizUIManager::FinalizeAndSubmitQuiz</code> is called. This constructs the <code>FQuizSubmissionPayload</code> with all accumulated answers and a timestamp.</li> <li>Sending Submission: <code>UQuizUIManager::SendQuizSubmissionToAPI</code> serializes the payload to JSON and sends an HTTP POST request to the backend <code>/api/submissions</code> endpoint.</li> <li>Submission Response: <code>UQuizUIManager::OnQuizSubmissionResponseReceived</code> handles the backend's response, logging success or failure. Regardless of the outcome, it displays the <code>UCPP_QuizEndScreenWidget</code>.</li> </ol>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#3-key-components","title":"3. Key Components","text":"<p>This section details the individual C++ classes that form the Quiz System.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#uquizmanager","title":"UQuizManager","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#uquizuimanager","title":"UQuizUIManager","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#umeshknowledgebasedataasset","title":"UMeshKnowledgeBaseDataAsset","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#4-quiz-data-structures","title":"4. Quiz Data Structures","text":"<p>This section details the C++ <code>USTRUCT</code>s that define the data models used throughout the quiz system.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#fquizdata","title":"FQuizData","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#fquizquestion","title":"FQuizQuestion","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#fquizanswer","title":"FQuizAnswer","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#fquizsubmissionpayload","title":"FQuizSubmissionPayload","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#fmeshcatalogentryue-and-forgangroupue","title":"FMeshCatalogEntryUE and FOrganGroupUE","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#5-quiz-widgets","title":"5. Quiz Widgets","text":"<p>This section details the UI components used in the Quiz System.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#ustudyyearselectorwidget","title":"UStudyYearSelectorWidget","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#ucpp_quizoverview","title":"UCPP_QuizOverview","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#ucpp_quizitemwidget","title":"UCPP_QuizItemWidget","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#ucpp_quizdetailswidget","title":"UCPP_QuizDetailsWidget","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#ucpp_quizquestionbase","title":"UCPP_QuizQuestionBase","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#ucpp_multiplechoicewidget","title":"UCPP_MultipleChoiceWidget","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#ucpp_answerbuttonwidget","title":"UCPP_AnswerButtonWidget","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#ucpp_truefalsewidget","title":"UCPP_TrueFalseWidget","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#ucpp_openendedwidget","title":"UCPP_OpenEndedWidget","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#ucpp_selectorganwidget","title":"UCPP_SelectOrganWidget","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_System_Overview/#ucpp_quizendscreenwidget","title":"UCPP_QuizEndScreenWidget","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/","title":"UQuizUIManager","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Quiz/QuizUIManager.h</code> &amp; <code>VirtualAnatomy/Private/Quiz/QuizUIManager.cpp</code></li> <li>Purpose: The central controller for the quiz UI. It handles the display and navigation between different quiz screens, manages the quiz state, and orchestrates answer submission.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#void-initializeaplayercontroller-inplayercontroller","title":"<code>void Initialize(APlayerController* InPlayerController)</code>","text":"<p>Parameters:</p> <ul> <li><code>APlayerController* InPlayerController</code> - The player controller to associate with this UI manager.</li> </ul> <p>Initializes the Quiz UI Manager with the given player controller, setting up UI elements and preparing the manager for use. It also loads the <code>UMeshKnowledgeBaseDataAsset</code> and presents the initial study year selection.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#void-showquizoverview","title":"<code>void ShowQuizOverview()</code>","text":"<p>Displays the quiz overview screen by creating and adding the quiz overview widget to the viewport.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#void-showquizdetailsconst-fquizdata-quiz","title":"<code>void ShowQuizDetails(const FQuizData&amp; Quiz)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FQuizData&amp; Quiz</code> - The quiz data to display in the details widget.</li> </ul> <p>Displays the details of a specific quiz by creating and adding the quiz details widget to the viewport.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#void-startquizconst-fquizdata-quiz","title":"<code>void StartQuiz(const FQuizData&amp; Quiz)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FQuizData&amp; Quiz</code> - The quiz data to start.</li> </ul> <p>Starts the quiz with the provided quiz data, initializing the quiz and displaying the first question.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#void-shownextquestion","title":"<code>void ShowNextQuestion()</code>","text":"<p>Displays the next question in the quiz by creating and adding the appropriate question widget to the viewport. If all questions are answered, it finalizes and submits the quiz.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#void-showquizendscreen","title":"<code>void ShowQuizEndScreen()</code>","text":"<p>Displays the quiz end screen by creating and adding the quiz end screen widget to the viewport.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#void-handlestudyyearselectedconst-int32-studyyear","title":"<code>void HandleStudyYearSelected(const int32 StudyYear)</code>","text":"<p>Parameters:</p> <ul> <li><code>const int32 StudyYear</code> - The selected study year.</li> </ul> <p>Handles the selection of a study year, updates the <code>SelectedStudyYear</code> property, and fetches quizzes for the chosen year.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#void-handlequestionansweredconst-fquizquestion-questiondata-const-fquizsubmittedanswerpayload-answerpayload","title":"<code>void HandleQuestionAnswered(const FQuizQuestion&amp; QuestionData, const FQuizSubmittedAnswerPayload&amp; AnswerPayload)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FQuizQuestion&amp; QuestionData</code> - The <code>FQuizQuestion</code> data for the question that was just answered.</li> <li><code>const FQuizSubmittedAnswerPayload&amp; AnswerPayload</code> - The <code>FQuizSubmittedAnswerPayload</code> containing the student's formatted answer for the question.</li> </ul> <p>Processes a successfully answered question by adding the submitted answer to a list of accumulated answers, incrementing the question index, and then proceeding to display the next question or finalize the quiz.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#uquizuimanager_1","title":"<code>UQuizUIManager()</code>","text":"<p>Constructor for the Quiz UI Manager, which initializes default values and loads Blueprint classes for various quiz widgets.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#public-properties","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#int32-selectedstudyyear","title":"<code>int32 SelectedStudyYear</code>","text":"<p>Type: <code>int32</code> Default Value: <code>0</code></p> <p>The study year currently selected by the user.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#uquizmanager-quizmanagerinstance","title":"<code>UQuizManager* QuizManagerInstance</code>","text":"<p>Type: <code>UQuizManager*</code></p> <p>A pointer to the instance of the <code>UQuizManager</code> used to fetch and manage quizzes.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#tsoftobjectptrumeshknowledgebasedataasset-meshknowledgeassetpath","title":"<code>TSoftObjectPtr&lt;UMeshKnowledgeBaseDataAsset&gt; MeshKnowledgeAssetPath</code>","text":"<p>Type: <code>TSoftObjectPtr&lt;UMeshKnowledgeBaseDataAsset&gt;</code></p> <p>Path to the Data Asset containing the mesh knowledge base, used for \"select organ\" question types.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#umeshknowledgebasedataasset-loadedmeshknowledgeasset","title":"<code>UMeshKnowledgeBaseDataAsset* LoadedMeshKnowledgeAsset</code>","text":"<p>Type: <code>UMeshKnowledgeBaseDataAsset*</code></p> <p>A transient pointer to the loaded <code>UMeshKnowledgeBaseDataAsset</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#protected-properties","title":"Protected Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#aplayercontroller-playercontroller","title":"<code>APlayerController* PlayerController</code>","text":"<p>Type: <code>APlayerController*</code></p> <p>The player controller associated with this UI manager, used for creating and adding widgets to the viewport.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#tsubclassofucpp_quizoverview-quizoverviewclass","title":"<code>TSubclassOf&lt;UCPP_QuizOverview&gt; QuizOverviewClass</code>","text":"<p>Type: <code>TSubclassOf&lt;UCPP_QuizOverview&gt;</code></p> <p>Blueprint class for the quiz overview widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#tsubclassofucpp_quizdetailswidget-quizdetailsclass","title":"<code>TSubclassOf&lt;UCPP_QuizDetailsWidget&gt; QuizDetailsClass</code>","text":"<p>Type: <code>TSubclassOf&lt;UCPP_QuizDetailsWidget&gt;</code></p> <p>Blueprint class for the quiz details widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#tsubclassofucpp_quizquestionbase-multiplechoicewidgetclass","title":"<code>TSubclassOf&lt;UCPP_QuizQuestionBase&gt; MultipleChoiceWidgetClass</code>","text":"<p>Type: <code>TSubclassOf&lt;UCPP_QuizQuestionBase&gt;</code></p> <p>Blueprint class for the multiple-choice question widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#tsubclassofucpp_quizquestionbase-truefalsewidgetclass","title":"<code>TSubclassOf&lt;UCPP_QuizQuestionBase&gt; TrueFalseWidgetClass</code>","text":"<p>Type: <code>TSubclassOf&lt;UCPP_QuizQuestionBase&gt;</code></p> <p>Blueprint class for the true/false question widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#tsubclassofucpp_quizquestionbase-selectorganwidgetclass","title":"<code>TSubclassOf&lt;UCPP_QuizQuestionBase&gt; SelectOrganWidgetClass</code>","text":"<p>Type: <code>TSubclassOf&lt;UCPP_QuizQuestionBase&gt;</code></p> <p>Blueprint class for the \"select organ\" question widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#tsubclassofucpp_quizquestionbase-openendedwidgetclass","title":"<code>TSubclassOf&lt;UCPP_QuizQuestionBase&gt; OpenEndedWidgetClass</code>","text":"<p>Type: <code>TSubclassOf&lt;UCPP_QuizQuestionBase&gt;</code></p> <p>Blueprint class for the open-ended question widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#tsubclassofuuserwidget-quizendscreenclass","title":"<code>TSubclassOf&lt;UUserWidget&gt; QuizEndScreenClass</code>","text":"<p>Type: <code>TSubclassOf&lt;UUserWidget&gt;</code></p> <p>Blueprint class for the quiz end screen widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#ucpp_quizoverview-currentoverview","title":"<code>UCPP_QuizOverview* CurrentOverview</code>","text":"<p>Type: <code>UCPP_QuizOverview*</code></p> <p>A pointer to the currently active quiz overview widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#ucpp_quizdetailswidget-currentdetails","title":"<code>UCPP_QuizDetailsWidget* CurrentDetails</code>","text":"<p>Type: <code>UCPP_QuizDetailsWidget*</code></p> <p>A pointer to the currently active quiz details widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#ucpp_quizquestionbase-activequestionwidget","title":"<code>UCPP_QuizQuestionBase* ActiveQuestionWidget</code>","text":"<p>Type: <code>UCPP_QuizQuestionBase*</code></p> <p>A pointer to the currently active quiz question widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#int32-currentquestionindex","title":"<code>int32 CurrentQuestionIndex</code>","text":"<p>Type: <code>int32</code> Default Value: <code>0</code></p> <p>The index of the current question being displayed within the active quiz.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#fquizdata-currentquiz","title":"<code>FQuizData CurrentQuiz</code>","text":"<p>Type: <code>FQuizData</code></p> <p>The data for the quiz that is currently active or being viewed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#tarrayfquizsubmittedanswerpayload-accumulatedanswers","title":"<code>TArray&lt;FQuizSubmittedAnswerPayload&gt; AccumulatedAnswers</code>","text":"<p>Type: <code>TArray&lt;FQuizSubmittedAnswerPayload&gt;</code></p> <p>A list of all answers submitted by the user for the current quiz.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#private-methods","title":"Private Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#void-handlequestionansweredinternalbinder","title":"<code>void HandleQuestionAnsweredInternalBinder()</code>","text":"<p>This function is connected to the <code>OnQuestionAnswered</code> delegate of the currently active question widget. It determines the type of the active question widget, extracts the student's answer in the appropriate format, and then calls the main <code>HandleQuestionAnswered</code> method.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#void-finalizeandsubmitquiz","title":"<code>void FinalizeAndSubmitQuiz()</code>","text":"<p>This function is called when all questions in the current quiz have been answered. It constructs the <code>FQuizSubmissionPayload</code> and then calls <code>SendQuizSubmissionToAPI</code> to transmit the data.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#void-sendquizsubmissiontoapiconst-fquizsubmissionpayload-submissionpayload","title":"<code>void SendQuizSubmissionToAPI(const FQuizSubmissionPayload&amp; SubmissionPayload)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FQuizSubmissionPayload&amp; SubmissionPayload</code> - The struct containing all information for the quiz submission.</li> </ul> <p>Sends the quiz submission data to the backend API by serializing it into a JSON string and creating an HTTP POST request.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#void-onquizsubmissionresponsereceivedfhttprequestptr-request-fhttpresponseptr-response-bool-bwassuccessful","title":"<code>void OnQuizSubmissionResponseReceived(FHttpRequestPtr Request, FHttpResponsePtr Response, bool bWasSuccessful)</code>","text":"<p>Parameters:</p> <ul> <li><code>FHttpRequestPtr Request</code> - The original HTTP request object.</li> <li><code>FHttpResponsePtr Response</code> - The HTTP response object from the server.</li> <li><code>bool bWasSuccessful</code> - Boolean indicating if the HTTP request itself was successful.</li> </ul> <p>Handles the response received from the backend API after a quiz submission attempt. It logs success or failure, clears accumulated answers, and navigates to the quiz overview.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#private-properties","title":"Private Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#tsubclassofuuserwidget-studyyearselectionwidgetclass","title":"<code>TSubclassOf&lt;UUserWidget&gt; StudyYearSelectionWidgetClass</code>","text":"<p>Type: <code>TSubclassOf&lt;UUserWidget&gt;</code></p> <p>Blueprint class for the study year selection widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#void-showstudyyearselectionwidget","title":"<code>void ShowStudyYearSelectionWidget()</code>","text":"<p>Displays the study year selection widget, removing any other active quiz widgets.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Quiz_UI_Manager/#void-loadmeshknowledgeasset","title":"<code>void LoadMeshKnowledgeAsset()</code>","text":"<p>Loads the <code>UMeshKnowledgeBaseDataAsset</code> asynchronously or synchronously if it's already valid.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Answer_Button_Widget/","title":"UCPP_AnswerButtonWidget","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Widgets/Quiz/Questions/CPP_AnswerButtonWidget.h</code> &amp; <code>VirtualAnatomy/Private/Widgets/Quiz/Questions/CPP_AnswerButtonWidget.cpp</code></li> <li>Purpose: Represents a single answer button within a multiple-choice question.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Answer_Button_Widget/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Answer_Button_Widget/#void-nativeconstruct","title":"<code>void NativeConstruct()</code>","text":"<p>Called when the widget is constructed. It binds the <code>OnClicked</code> event to the <code>AnswerButton</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Answer_Button_Widget/#void-setanswerdataconst-fquizanswer-inanswer","title":"<code>void SetAnswerData(const FQuizAnswer&amp; InAnswer)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FQuizAnswer&amp; InAnswer</code> - The <code>FQuizAnswer</code> data to populate the button with.</li> </ul> <p>Sets the answer data for the widget, updating the displayed text.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Answer_Button_Widget/#fonanswerselected-onanswerselected","title":"<code>FOnAnswerSelected OnAnswerSelected</code>","text":"<p>Type: <code>FOnAnswerSelected</code> (Delegate)</p> <p>Delegate broadcast when this answer button is clicked, passing its <code>FQuizAnswer</code> data.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Answer_Button_Widget/#protected-properties","title":"Protected Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Answer_Button_Widget/#class-ubutton-answerbutton","title":"<code>class UButton* AnswerButton</code>","text":"<p>Type: <code>class UButton*</code></p> <p>The button widget component.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Answer_Button_Widget/#class-utextblock-answertext","title":"<code>class UTextBlock* AnswerText</code>","text":"<p>Type: <code>class UTextBlock*</code></p> <p>The text block widget displaying the answer text.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Answer_Button_Widget/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Answer_Button_Widget/#void-onclicked","title":"<code>void OnClicked()</code>","text":"<p>Handles the click event of the <code>AnswerButton</code>, broadcasting the <code>OnAnswerSelected</code> delegate.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Answer_Button_Widget/#fquizanswer-storedanswer","title":"<code>FQuizAnswer StoredAnswer</code>","text":"<p>Type: <code>FQuizAnswer</code></p> <p>The <code>FQuizAnswer</code> data stored by this widget instance.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Multiple_Choice_Widget/","title":"UCPP_MultipleChoiceWidget","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Widgets/Quiz/Questions/CPP_MultipleChoiceWidget.h</code> &amp; <code>VirtualAnatomy/Private/Widgets/Quiz/Questions/CPP_MultipleChoiceWidget.cpp</code></li> <li>Purpose: Displays multiple-choice questions to the user.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Multiple_Choice_Widget/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Multiple_Choice_Widget/#void-nativeconstruct","title":"<code>void NativeConstruct()</code>","text":"<p>Called when the widget is constructed. It ensures that the <code>AnswerListBox</code> is properly set.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Multiple_Choice_Widget/#void-initializewithquestionconst-fquizquestion-question","title":"<code>void InitializeWithQuestion(const FQuizQuestion&amp; Question)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FQuizQuestion&amp; Question</code> - The quiz question to display in the widget.</li> </ul> <p>Initializes the widget with the provided quiz question, setting up the UI elements and preparing the widget for displaying the question and answers. It also calls <code>GenerateAnswerButtons</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Multiple_Choice_Widget/#int32-lastselectedanswerindex","title":"<code>int32 LastSelectedAnswerIndex</code>","text":"<p>Type: <code>int32</code> Default Value: <code>-1</code></p> <p>The index of the last selected answer button.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Multiple_Choice_Widget/#protected-properties","title":"Protected Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Multiple_Choice_Widget/#utextblock-questiontext","title":"<code>UTextBlock* QuestionText</code>","text":"<p>Type: <code>UTextBlock*</code></p> <p>The text block widget used to display the question text.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Multiple_Choice_Widget/#uverticalbox-answerlistbox","title":"<code>UVerticalBox* AnswerListBox</code>","text":"<p>Type: <code>UVerticalBox*</code></p> <p>The vertical box widget that contains the answer buttons.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Multiple_Choice_Widget/#tsubclassofucpp_answerbuttonwidget-answerbuttonclass","title":"<code>TSubclassOf&lt;UCPP_AnswerButtonWidget&gt; AnswerButtonClass</code>","text":"<p>Type: <code>TSubclassOf&lt;UCPP_AnswerButtonWidget&gt;</code></p> <p>The Blueprint class for individual answer button widgets.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Multiple_Choice_Widget/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Multiple_Choice_Widget/#void-generateanswerbuttons","title":"<code>void GenerateAnswerButtons()</code>","text":"<p>Creates the answer buttons based on the provided question data and adds them to the <code>AnswerListBox</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Multiple_Choice_Widget/#void-handleanswerclickedconst-fquizanswer-selectedanswer","title":"<code>void HandleAnswerClicked(const FQuizAnswer&amp; SelectedAnswer)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FQuizAnswer&amp; SelectedAnswer</code> - The answer that was clicked by the user.</li> </ul> <p>Handles the event when an answer button is clicked, stores the index of the selected answer, and broadcasts the <code>OnQuestionAnswered</code> delegate.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Open_Ended_Widget/","title":"UCPP_OpenEndedWidget","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Widgets/Quiz/Questions/CPP_OpenEndedWidget.h</code> &amp; <code>VirtualAnatomy/Private/Widgets/Quiz/Questions/CPP_OpenEndedWidget.cpp</code></li> <li>Purpose: Displays open-ended questions where the user types a response.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Open_Ended_Widget/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Open_Ended_Widget/#void-nativeconstruct","title":"<code>void NativeConstruct()</code>","text":"<p>Called when the widget is constructed. It binds the <code>OnClicked</code> event to the <code>SubmitButton</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Open_Ended_Widget/#void-initializewithquestionconst-fquizquestion-question","title":"<code>void InitializeWithQuestion(const FQuizQuestion&amp; Question)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FQuizQuestion&amp; Question</code> - The quiz question data to initialize the widget with.</li> </ul> <p>Initializes the widget with the provided quiz question, setting the question text and clearing any previous answer input.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Open_Ended_Widget/#fstring-submittedanswer","title":"<code>FString SubmittedAnswer</code>","text":"<p>Type: <code>FString</code></p> <p>The string containing the user's submitted answer.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Open_Ended_Widget/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Open_Ended_Widget/#void-onsubmitclicked","title":"<code>void OnSubmitClicked()</code>","text":"<p>Handles the click event for the Submit button, capturing the text from the <code>AnswerInput</code> and broadcasting the <code>OnQuestionAnswered</code> delegate.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Open_Ended_Widget/#utextblock-questiontext","title":"<code>UTextBlock* QuestionText</code>","text":"<p>Type: <code>UTextBlock*</code></p> <p>The text block widget used to display the question text.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Open_Ended_Widget/#umultilineeditabletextbox-answerinput","title":"<code>UMultiLineEditableTextBox* AnswerInput</code>","text":"<p>Type: <code>UMultiLineEditableTextBox*</code></p> <p>The multi-line editable text box where the user types their answer.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Open_Ended_Widget/#ubutton-submitbutton","title":"<code>UButton* SubmitButton</code>","text":"<p>Type: <code>UButton*</code></p> <p>The button widget to submit the answer.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Details_Widget/","title":"UCPP_QuizDetailsWidget","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Widgets/Quiz/CPP_QuizDetailsWidget.h</code> &amp; <code>VirtualAnatomy/Private/Widgets/Quiz/CPP_QuizDetailsWidget.cpp</code></li> <li>Purpose: A user widget class that displays detailed information about a quiz. It includes the quiz title, scheduled date, and a list of questions. The widget also provides a button to start the quiz.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Details_Widget/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Details_Widget/#void-nativeconstruct","title":"<code>void NativeConstruct()</code>","text":"<p>Called when the widget is constructed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Details_Widget/#void-initializewithdataconst-fquizdata-quiz","title":"<code>void InitializeWithData(const FQuizData&amp; Quiz)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FQuizData&amp; Quiz</code> - The quiz data to populate the widget with.</li> </ul> <p>Initializes the widget's state and displays the quiz information, including title, scheduled date, and question list.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Details_Widget/#void-setonstartquizcallbacktfunctionvoid-callback","title":"<code>void SetOnStartQuizCallback(TFunction&lt;void()&gt; Callback)</code>","text":"<p>Parameters:</p> <ul> <li><code>TFunction&lt;void()&gt; Callback</code> - The callback function to be called on quiz start.</li> </ul> <p>Sets the callback function to be executed when the quiz is started.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Details_Widget/#fquizdata-getcurrentquiz-const","title":"<code>FQuizData GetCurrentQuiz() const</code>","text":"<p>Returns: <code>FQuizData</code> - The quiz data currently displayed in the widget.</p> <p>Gets the current quiz data stored by this widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Details_Widget/#protected-properties","title":"Protected Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Details_Widget/#utextblock-titletext","title":"<code>UTextBlock* TitleText</code>","text":"<p>Type: <code>UTextBlock*</code></p> <p>The text block widget for displaying the quiz title.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Details_Widget/#utextblock-scheduledtext","title":"<code>UTextBlock* ScheduledText</code>","text":"<p>Type: <code>UTextBlock*</code></p> <p>The text block widget for displaying the quiz's scheduled date.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Details_Widget/#utextblock-questiontext","title":"<code>UTextBlock* QuestionText</code>","text":"<p>Type: <code>UTextBlock*</code></p> <p>The text block widget for displaying the list of questions in the quiz.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Details_Widget/#ubutton-startquizbutton","title":"<code>UButton* StartQuizButton</code>","text":"<p>Type: <code>UButton*</code></p> <p>The button widget that initiates the quiz start process.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Details_Widget/#tfunctionvoid-onstartquiz","title":"<code>TFunction&lt;void()&gt; OnStartQuiz</code>","text":"<p>Type: <code>TFunction&lt;void()&gt;</code></p> <p>A callback function that is invoked when the \"Start Quiz\" button is clicked.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Details_Widget/#fquizdata-currentquiz","title":"<code>FQuizData CurrentQuiz</code>","text":"<p>Type: <code>FQuizData</code></p> <p>The quiz data currently displayed by this widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Details_Widget/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Details_Widget/#void-onstartquizbuttonclicked","title":"<code>void OnStartQuizButtonClicked()</code>","text":"<p>Handles the click event for the Start Quiz button, which removes the widget from parent and triggers the <code>OnStartQuiz</code> callback.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_End_Screen_Widget/","title":"UCPP_QuizEndScreenWidget","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Widgets/Quiz/CPP_QuizEndScreenWidget.h</code> &amp; <code>VirtualAnatomy/Private/Widgets/Quiz/CPP_QuizEndScreenWidget.cpp</code></li> <li>Purpose: Displays a message to the user upon quiz completion and provides a button to navigate back to the main menu.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_End_Screen_Widget/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_End_Screen_Widget/#void-nativeconstruct","title":"<code>void NativeConstruct()</code>","text":"<p>Called when the widget is constructed. It binds the <code>OnMainMenuButtonClicked</code> event and sets the default end-of-quiz message.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_End_Screen_Widget/#protected-properties","title":"Protected Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_End_Screen_Widget/#utextblock-endofquiztext","title":"<code>UTextBlock* EndOfQuizText</code>","text":"<p>Type: <code>UTextBlock*</code></p> <p>Text block to display the end of quiz message.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_End_Screen_Widget/#ubutton-mainmenubutton","title":"<code>UButton* MainMenuButton</code>","text":"<p>Type: <code>UButton*</code></p> <p>Button to navigate back to the main menu.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_End_Screen_Widget/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_End_Screen_Widget/#void-onmainmenubuttonclicked","title":"<code>void OnMainMenuButtonClicked()</code>","text":"<p>Handles the click event for the main menu button, which loads the \"MainMenuLevel\".</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Item_Widget/","title":"UCPP_QuizItemWidget","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Widgets/Quiz/CPP_QuizItemWidget.h</code> &amp; <code>VirtualAnatomy/Private/Widgets/Quiz/CPP_QuizItemWidget.cpp</code></li> <li>Purpose: A user widget class that represents a single quiz item in the UI. It displays the quiz title and date and provides functionality for handling user interaction.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Item_Widget/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Item_Widget/#void-initializewithdataconst-fquizdata-quiz","title":"<code>void InitializeWithData(const FQuizData&amp; Quiz)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FQuizData&amp; Quiz</code> - The quiz data to populate the widget with.</li> </ul> <p>Initializes the widget with the provided quiz data, setting the title and formatted date.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Item_Widget/#void-nativeconstruct","title":"<code>void NativeConstruct()</code>","text":"<p>Called when the widget is constructed. It sets up bindings and initializes the widget's state.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Item_Widget/#void-handleclick","title":"<code>void HandleClick()</code>","text":"<p>Handles the click event for the associated button, broadcasting the <code>OnQuizItemClicked</code> delegate.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Item_Widget/#fonquizitemclicked-onquizitemclicked","title":"<code>FOnQuizItemClicked OnQuizItemClicked</code>","text":"<p>Type: <code>FOnQuizItemClicked</code> (Delegate)</p> <p>Delegate broadcast when the quiz item button is clicked, passing the <code>FQuizData</code> of the clicked item.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Item_Widget/#protected-properties","title":"Protected Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Item_Widget/#utextblock-titletext","title":"<code>UTextBlock* TitleText</code>","text":"<p>Type: <code>UTextBlock*</code></p> <p>The text block widget used to display the quiz title.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Item_Widget/#utextblock-datetext","title":"<code>UTextBlock* DateText</code>","text":"<p>Type: <code>UTextBlock*</code></p> <p>The text block widget used to display the scheduled date of the quiz.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Item_Widget/#ubutton-clickbutton","title":"<code>UButton* ClickButton</code>","text":"<p>Type: <code>UButton*</code></p> <p>The button widget that triggers the click event for the quiz item.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Item_Widget/#fquizdata-storedquizdata","title":"<code>FQuizData StoredQuizData</code>","text":"<p>Type: <code>FQuizData</code></p> <p>The quiz data stored by this widget instance.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Overview/","title":"UCPP_QuizOverview","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Widgets/Quiz/CPP_QuizOverview.h</code> &amp; <code>VirtualAnatomy/Private/Widgets/Quiz/CPP_QuizOverview.cpp</code></li> <li>Purpose: A user widget class responsible for displaying an overview of quizzes. It manages the UI elements for listing quizzes and handles the logic for fetching and displaying quiz data.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Overview/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Overview/#void-nativeconstruct","title":"<code>void NativeConstruct()</code>","text":"<p>Called when the widget is constructed.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Overview/#void-setonquizselectedcallbacktfunctionvoidconst-fquizdata-callback","title":"<code>void SetOnQuizSelectedCallback(TFunction&lt;void(const FQuizData&amp;)&gt; Callback)</code>","text":"<p>Parameters:</p> <ul> <li><code>TFunction&lt;void(const FQuizData&amp;)&gt; Callback</code> - The callback function to be executed when a quiz is selected.</li> </ul> <p>Sets the callback function to be called when a quiz item is selected in the overview.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Overview/#void-handlequizzesfetchedconst-tarrayfquizdata-fetchedquizzes","title":"<code>void HandleQuizzesFetched(const TArray&lt;FQuizData&gt;&amp; FetchedQuizzes)</code>","text":"<p>Parameters:</p> <ul> <li><code>const TArray&lt;FQuizData&gt;&amp; FetchedQuizzes</code> - The array of quiz data fetched from the server.</li> </ul> <p>Handles the event when quizzes are fetched successfully. It populates the quiz list UI with the fetched quiz data.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Overview/#protected-properties","title":"Protected Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Overview/#uverticalbox-quizlistbox","title":"<code>UVerticalBox* QuizListBox</code>","text":"<p>Type: <code>UVerticalBox*</code></p> <p>The vertical box widget that contains the list of quiz items.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Overview/#tsubclassofuuserwidget-quizlistboxclass","title":"<code>TSubclassOf&lt;UUserWidget&gt; QuizListBoxClass</code>","text":"<p>Type: <code>TSubclassOf&lt;UUserWidget&gt;</code></p> <p>The Blueprint class for individual quiz list items.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Overview/#uquizmanager-quizmanager","title":"<code>UQuizManager* QuizManager</code>","text":"<p>Type: <code>UQuizManager*</code></p> <p>A pointer to the <code>UQuizManager</code> instance.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Overview/#tarrayfquizdata-quizzes","title":"<code>TArray&lt;FQuizData&gt; Quizzes</code>","text":"<p>Type: <code>TArray&lt;FQuizData&gt;</code></p> <p>An array storing the <code>FQuizData</code> for all fetched quizzes.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Overview/#tfunctionvoidconst-fquizdata-onquizselected","title":"<code>TFunction&lt;void(const FQuizData&amp;)&gt; OnQuizSelected</code>","text":"<p>Type: <code>TFunction&lt;void(const FQuizData&amp;)&gt;</code></p> <p>A callback function that is invoked when a quiz item is selected, passing the selected quiz data.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Overview/#void-handlequizitemclickedconst-fquizdata-quizdata","title":"<code>void HandleQuizItemClicked(const FQuizData&amp; QuizData)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FQuizData&amp; QuizData</code> - The quiz data associated with the clicked quiz item.</li> </ul> <p>Handles the event when a quiz item is clicked. This function is bound to the <code>OnQuizItemClicked</code> event of the quiz item widget.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Question_Base/","title":"UCPP_QuizQuestionBase (Base Class)","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Widgets/Quiz/CPP_QuizQuestionBase.h</code> &amp; <code>VirtualAnatomy/Private/Widgets/Quiz/CPP_QuizQuestionBase.cpp</code></li> <li>Purpose: An abstract base class for all question-specific UI widgets within the quiz system.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Question_Base/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Question_Base/#void-initializewithquestionconst-fquizquestion-question","title":"<code>void InitializeWithQuestion(const FQuizQuestion&amp; Question)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FQuizQuestion&amp; Question</code> - The quiz question data to initialize the widget with.</li> </ul> <p>Initializes the widget with the provided quiz question data. This function should be overridden by child classes to set up their specific UI elements.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Question_Base/#fquizquestion-currentquestion","title":"<code>FQuizQuestion CurrentQuestion</code>","text":"<p>Type: <code>FQuizQuestion</code></p> <p>The <code>FQuizQuestion</code> data that this widget is currently displaying.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Quiz_Question_Base/#fonquestionanswered-onquestionanswered","title":"<code>FOnQuestionAnswered OnQuestionAnswered</code>","text":"<p>Type: <code>FOnQuestionAnswered</code> (Delegate)</p> <p>Delegate broadcast when the user has completed answering the question (e.g., clicked an answer, submitted text).</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/","title":"UCPP_SelectOrganWidget","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Widgets/Quiz/Questions/CPP_SelectOrganWidget.h</code> &amp; <code>VirtualAnatomy/Private/Widgets/Quiz/Questions/CPP_SelectOrganWidget.cpp</code></li> <li>Purpose: Displays questions that require the user to click on a specific anatomical mesh in the 3D environment.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/#void-initializewithquestionconst-fquizquestion-question","title":"<code>void InitializeWithQuestion(const FQuizQuestion&amp; Question)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FQuizQuestion&amp; Question</code> - The quiz question data to initialize the widget with.</li> </ul> <p>Initializes the widget with the provided quiz question, setting the question text and subscribing to the <code>UMeshSelector::OnMeshClicked</code> delegate.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/#fstring-lastclickedmeshdb_id","title":"<code>FString LastClickedMeshDB_ID</code>","text":"<p>Type: <code>FString</code></p> <p>Stores the database ID of the last clicked mesh for submission.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/#fstring-lastclickedmeshnamekey_forcataloglookup","title":"<code>FString LastClickedMeshNameKey_ForCatalogLookup</code>","text":"<p>Type: <code>FString</code></p> <p>Stores the name key of the last clicked mesh, used for lookup in the Mesh Knowledge Base.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/#aactor-selectedorgan","title":"<code>AActor* SelectedOrgan</code>","text":"<p>Type: <code>AActor*</code></p> <p>A pointer to the actor representing the last selected organ.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/#void-nativeconstruct","title":"<code>void NativeConstruct()</code>","text":"<p>Called when the widget is constructed. It binds the <code>OnSubmitButtonClicked</code> event and attempts to get a reference to <code>UQuizUIManager</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/#utextblock-questiontext","title":"<code>UTextBlock* QuestionText</code>","text":"<p>Type: <code>UTextBlock*</code></p> <p>The text block widget used to display the question text.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/#ubutton-submitbutton","title":"<code>UButton* SubmitButton</code>","text":"<p>Type: <code>UButton*</code></p> <p>The button widget to submit the selected organ.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/#void-onmeshclickedaactor-clickedowningactor","title":"<code>void OnMeshClicked(AActor* ClickedOwningActor)</code>","text":"<p>Parameters:</p> <ul> <li><code>AActor* ClickedOwningActor</code> - The owning actor of the mesh that was clicked.</li> </ul> <p>Handles the event when a mesh in the 3D environment is clicked. It updates <code>SelectedOrgan</code>, identifies the clicked mesh's name, and retrieves its database ID using the <code>UMeshKnowledgeBaseDataAsset</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/#void-onsubmitbuttonclicked","title":"<code>void OnSubmitButtonClicked()</code>","text":"<p>Handles the click event for the Submit button. It performs validation on the selected organ against the expected target and then broadcasts the <code>OnQuestionAnswered</code> delegate.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/#private-properties","title":"Private Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/#fstring-currentquestiontargettype","title":"<code>FString CurrentQuestionTargetType</code>","text":"<p>Type: <code>FString</code></p> <p>Stores the expected target type for the current question (\"mesh\" or \"group\").</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/#fstring-currentquestiontargetid","title":"<code>FString CurrentQuestionTargetID</code>","text":"<p>Type: <code>FString</code></p> <p>Stores the MongoDB <code>_id</code> of the expected target for the current question.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Select_Organ_Widget/#uquizuimanager-quizuimanagerref","title":"<code>UQuizUIManager* QuizUIManagerRef</code>","text":"<p>Type: <code>UQuizUIManager*</code></p> <p>A reference to the <code>UQuizUIManager</code> for accessing the Mesh Knowledge Base.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/","title":"UStudyYearSelectorWidget","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Widgets/Quiz/CPP_StudyYearSelectorWidget.h</code> &amp; <code>VirtualAnatomy/Private/Widgets/Quiz/CPP_StudyYearSelectorWidget.cpp</code></li> <li>Purpose: This widget allows the student to select their current study year and communicates this selection to the <code>UQuizUIManager</code> to filter and tailor quizzes.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/#public-properties","title":"Public Properties","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/#fonstudyyearselectedsignature-onstudyyearselectedevent","title":"<code>FOnStudyYearSelectedSignature OnStudyYearSelectedEvent</code>","text":"<p>Type: <code>FOnStudyYearSelectedSignature</code> (Delegate)</p> <p>Delegate broadcasted when a study year button is clicked and a year is selected.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/#uquizuimanager-quizuimanagerref","title":"<code>UQuizUIManager* QuizUIManagerRef</code>","text":"<p>Type: <code>UQuizUIManager*</code></p> <p>An optional direct reference to the QuizUIManager. It can be set by the widget creating this selector or found via the GameMode.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/#ubutton-year1button","title":"<code>UButton* Year1Button</code>","text":"<p>Type: <code>UButton*</code></p> <p>Button for selecting Year 1.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/#ubutton-year2button","title":"<code>UButton* Year2Button</code>","text":"<p>Type: <code>UButton*</code></p> <p>Button for selecting Year 2.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/#ubutton-year3button","title":"<code>UButton* Year3Button</code>","text":"<p>Type: <code>UButton*</code></p> <p>Button for selecting Year 3.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/#ubutton-year4button","title":"<code>UButton* Year4Button</code>","text":"<p>Type: <code>UButton*</code></p> <p>Button for selecting Year 4.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/#void-nativeconstruct","title":"<code>void NativeConstruct()</code>","text":"<p>Called when the widget is constructed. It is used to find the <code>QuizUIManager</code> and bind button click events.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/#private-methods","title":"Private Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/#void-onyear1buttonclicked","title":"<code>void OnYear1ButtonClicked()</code>","text":"<p>Handles the click event for the Year 1 button.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/#void-onyear2buttonclicked","title":"<code>void OnYear2ButtonClicked()</code>","text":"<p>Handles the click event for the Year 2 button.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/#void-onyear3buttonclicked","title":"<code>void OnYear3ButtonClicked()</code>","text":"<p>Handles the click event for the Year 3 button.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/#void-onyear4buttonclicked","title":"<code>void OnYear4ButtonClicked()</code>","text":"<p>Handles the click event for the Year 4 button.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/Study_Year_Selector_Widget/#void-handleyearselectionint32-year","title":"<code>void HandleYearSelection(int32 Year)</code>","text":"<p>Parameters:</p> <ul> <li><code>int32 Year</code> - The selected study year.</li> </ul> <p>Common logic executed when any year selection button is clicked. It notifies the <code>QuizUIManager</code> and then removes this widget from view.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/True_False_Widget/","title":"UCPP_TrueFalseWidget","text":"<ul> <li>File: <code>VirtualAnatomy/Public/Widgets/Quiz/Questions/CPP_TrueFalseWidget.h</code> &amp; <code>VirtualAnatomy/Private/Widgets/Quiz/Questions/CPP_TrueFalseWidget.cpp</code></li> <li>Purpose: Displays true/false questions to the user.</li> </ul>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/True_False_Widget/#public-methods","title":"Public Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/True_False_Widget/#void-initializewithquestionconst-fquizquestion-question","title":"<code>void InitializeWithQuestion(const FQuizQuestion&amp; Question)</code>","text":"<p>Parameters:</p> <ul> <li><code>const FQuizQuestion&amp; Question</code> - The quiz question data to initialize the widget with.</li> </ul> <p>Initializes the widget with the provided quiz question, setting the question text and resetting <code>bLastSelectedTrue</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/True_False_Widget/#bool-blastselectedtrue","title":"<code>bool bLastSelectedTrue</code>","text":"<p>Type: <code>bool</code> Default Value: <code>false</code></p> <p>Indicates if the \"True\" option was the last one selected by the user.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/True_False_Widget/#protected-methods","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/True_False_Widget/#void-nativeconstruct","title":"<code>void NativeConstruct()</code>","text":"<p>Called when the widget is constructed. It binds click events for the True and False buttons.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/True_False_Widget/#utextblock-questiontext","title":"<code>UTextBlock* QuestionText</code>","text":"<p>Type: <code>UTextBlock*</code></p> <p>The text block widget used to display the question text.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/True_False_Widget/#ubutton-truebutton","title":"<code>UButton* TrueButton</code>","text":"<p>Type: <code>UButton*</code></p> <p>The button widget for the \"True\" option.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/True_False_Widget/#ubutton-falsebutton","title":"<code>UButton* FalseButton</code>","text":"<p>Type: <code>UButton*</code></p> <p>The button widget for the \"False\" option.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/True_False_Widget/#protected-methods_1","title":"Protected Methods","text":""},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/True_False_Widget/#void-ontrueclicked","title":"<code>void OnTrueClicked()</code>","text":"<p>Handles the click event for the True button, calling <code>HandleAnswer(true)</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/True_False_Widget/#void-onfalseclicked","title":"<code>void OnFalseClicked()</code>","text":"<p>Handles the click event for the False button, calling <code>HandleAnswer(false)</code>.</p>"},{"location":"Virtual-Anatomy-%28Unreal-Engine%29/Quiz/Widgets/True_False_Widget/#void-handleanswerbool-bselectedtrue","title":"<code>void HandleAnswer(bool bSelectedTrue)</code>","text":"<p>Parameters:</p> <ul> <li><code>bool bSelectedTrue</code> - <code>true</code> if \"True\" was selected, <code>false</code> if \"False\" was selected.</li> </ul> <p>Processes the selected answer, sets <code>bLastSelectedTrue</code>, and broadcasts the <code>OnQuestionAnswered</code> delegate.</p>"}]}